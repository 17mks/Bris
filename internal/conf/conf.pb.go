// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.10
// source: conf/conf.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Bootstrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server *Server `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Data   *Data   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Bootstrap) Reset() {
	*x = Bootstrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bootstrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bootstrap) ProtoMessage() {}

func (x *Bootstrap) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bootstrap.ProtoReflect.Descriptor instead.
func (*Bootstrap) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{0}
}

func (x *Bootstrap) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Bootstrap) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type Minion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr            string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	AccessKeyID     string `protobuf:"bytes,2,opt,name=accessKeyID,proto3" json:"accessKeyID,omitempty"`
	SecretAccessKey string `protobuf:"bytes,3,opt,name=secretAccessKey,proto3" json:"secretAccessKey,omitempty"`
	UseSSl          string `protobuf:"bytes,4,opt,name=useSSl,proto3" json:"useSSl,omitempty"`
	SslUrl          bool   `protobuf:"varint,5,opt,name=sslUrl,proto3" json:"sslUrl,omitempty"`
	BucketName      string `protobuf:"bytes,6,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
}

func (x *Minion) Reset() {
	*x = Minion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Minion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Minion) ProtoMessage() {}

func (x *Minion) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Minion.ProtoReflect.Descriptor instead.
func (*Minion) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{1}
}

func (x *Minion) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Minion) GetAccessKeyID() string {
	if x != nil {
		return x.AccessKeyID
	}
	return ""
}

func (x *Minion) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *Minion) GetUseSSl() string {
	if x != nil {
		return x.UseSSl
	}
	return ""
}

func (x *Minion) GetSslUrl() bool {
	if x != nil {
		return x.SslUrl
	}
	return false
}

func (x *Minion) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Http      *Server_HTTP `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	Grpc      *Server_GRPC `protobuf:"bytes,2,opt,name=grpc,proto3" json:"grpc,omitempty"`
	Jwt       *Server_JWT  `protobuf:"bytes,3,opt,name=jwt,proto3" json:"jwt,omitempty"`
	Huiyikang *HYK         `protobuf:"bytes,4,opt,name=huiyikang,proto3" json:"huiyikang,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2}
}

func (x *Server) GetHttp() *Server_HTTP {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *Server) GetGrpc() *Server_GRPC {
	if x != nil {
		return x.Grpc
	}
	return nil
}

func (x *Server) GetJwt() *Server_JWT {
	if x != nil {
		return x.Jwt
	}
	return nil
}

func (x *Server) GetHuiyikang() *HYK {
	if x != nil {
		return x.Huiyikang
	}
	return nil
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database    *Data_Database    `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Redis       *Data_Redis       `protobuf:"bytes,2,opt,name=redis,proto3" json:"redis,omitempty"`
	Jwt         *JWT              `protobuf:"bytes,3,opt,name=jwt,proto3" json:"jwt,omitempty"`
	Minion      *Minion           `protobuf:"bytes,4,opt,name=minion,proto3" json:"minion,omitempty"`
	BucketName  *BucketName       `protobuf:"bytes,5,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	SearchPath  *SerachPath       `protobuf:"bytes,6,opt,name=searchPath,proto3" json:"searchPath,omitempty"`
	FileService *Data_FileService `protobuf:"bytes,7,opt,name=fileService,proto3" json:"fileService,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3}
}

func (x *Data) GetDatabase() *Data_Database {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *Data) GetRedis() *Data_Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Data) GetJwt() *JWT {
	if x != nil {
		return x.Jwt
	}
	return nil
}

func (x *Data) GetMinion() *Minion {
	if x != nil {
		return x.Minion
	}
	return nil
}

func (x *Data) GetBucketName() *BucketName {
	if x != nil {
		return x.BucketName
	}
	return nil
}

func (x *Data) GetSearchPath() *SerachPath {
	if x != nil {
		return x.SearchPath
	}
	return nil
}

func (x *Data) GetFileService() *Data_FileService {
	if x != nil {
		return x.FileService
	}
	return nil
}

type JWT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *JWT) Reset() {
	*x = JWT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWT) ProtoMessage() {}

func (x *JWT) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWT.ProtoReflect.Descriptor instead.
func (*JWT) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{4}
}

func (x *JWT) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type BucketName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
}

func (x *BucketName) Reset() {
	*x = BucketName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketName) ProtoMessage() {}

func (x *BucketName) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketName.ProtoReflect.Descriptor instead.
func (*BucketName) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{5}
}

func (x *BucketName) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

type SerachPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchPath string `protobuf:"bytes,1,opt,name=searchPath,proto3" json:"searchPath,omitempty"`
}

func (x *SerachPath) Reset() {
	*x = SerachPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerachPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerachPath) ProtoMessage() {}

func (x *SerachPath) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerachPath.ProtoReflect.Descriptor instead.
func (*SerachPath) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{6}
}

func (x *SerachPath) GetSearchPath() string {
	if x != nil {
		return x.SearchPath
	}
	return ""
}

type HYK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr        string               `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	SystemCode  string               `protobuf:"bytes,2,opt,name=systemCode,proto3" json:"systemCode,omitempty"`
	RequestPort string               `protobuf:"bytes,3,opt,name=requestPort,proto3" json:"requestPort,omitempty"`
	PostPort    string               `protobuf:"bytes,4,opt,name=postPort,proto3" json:"postPort,omitempty"`
	FilePath    string               `protobuf:"bytes,5,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Timeout     *durationpb.Duration `protobuf:"bytes,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *HYK) Reset() {
	*x = HYK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HYK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HYK) ProtoMessage() {}

func (x *HYK) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HYK.ProtoReflect.Descriptor instead.
func (*HYK) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{7}
}

func (x *HYK) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *HYK) GetSystemCode() string {
	if x != nil {
		return x.SystemCode
	}
	return ""
}

func (x *HYK) GetRequestPort() string {
	if x != nil {
		return x.RequestPort
	}
	return ""
}

func (x *HYK) GetPostPort() string {
	if x != nil {
		return x.PostPort
	}
	return ""
}

func (x *HYK) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *HYK) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type HycConsultationApplysList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdNumber                    string `protobuf:"bytes,1,opt,name=adNumber,proto3" json:"adNumber,omitempty"`                                         //病人住院号
	Address                     string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`                                           //患者地址
	AddressCity                 string `protobuf:"bytes,3,opt,name=addressCity,proto3" json:"addressCity,omitempty"`                                   //城市
	AddressCountry              string `protobuf:"bytes,4,opt,name=addressCountry,proto3" json:"addressCountry,omitempty"`                             //区县
	AddressProvince             string `protobuf:"bytes,5,opt,name=addressProvince,proto3" json:"addressProvince,omitempty"`                           //省份
	Age                         int32  `protobuf:"varint,6,opt,name=age,proto3" json:"age,omitempty"`                                                  //年龄
	AgeUnit                     string `protobuf:"bytes,7,opt,name=ageUnit,proto3" json:"ageUnit,omitempty"`                                           //年龄单位
	AllergicHistory             string `protobuf:"bytes,8,opt,name=allergicHistory,proto3" json:"allergicHistory,omitempty"`                           //过敏史
	ApplicationConsultationTime string `protobuf:"bytes,9,opt,name=applicationConsultationTime,proto3" json:"applicationConsultationTime,omitempty"`   //申请方预期的会诊开始时间
	ApplicationConsultationType int32  `protobuf:"varint,10,opt,name=applicationConsultationType,proto3" json:"applicationConsultationType,omitempty"` //申请会诊类型
	ApplicationDepartmentId     string `protobuf:"bytes,11,opt,name=applicationDepartmentId,proto3" json:"applicationDepartmentId,omitempty"`          //申请人所在部门(科室)id
	ApplicationDepartmentName   string `protobuf:"bytes,12,opt,name=applicationDepartmentName,proto3" json:"applicationDepartmentName,omitempty"`      //申请人所在部门(科室)名称
	ApplicationDoctor           string `protobuf:"bytes,13,opt,name=applicationDoctor,proto3" json:"applicationDoctor,omitempty"`                      //申请上级医院提供会诊的医生
	ApplicationDoctorDepartment string `protobuf:"bytes,14,opt,name=applicationDoctorDepartment,proto3" json:"applicationDoctorDepartment,omitempty"`  //申请上级医院提供会诊的医生所属科室
	ApplicationHospitalId       string `protobuf:"bytes,15,opt,name=applicationHospitalId,proto3" json:"applicationHospitalId,omitempty"`              //会诊申请人所在机构(医院)ID
	ApplicationHospitalName     string `protobuf:"bytes,16,opt,name=applicationHospitalName,proto3" json:"applicationHospitalName,omitempty"`          //会诊申请人所在机构(医院)名称
	ApplicationNumber           string `protobuf:"bytes,17,opt,name=applicationNumber,proto3" json:"applicationNumber,omitempty"`                      //会诊单编号
	ApplicationUserId           string `protobuf:"bytes,18,opt,name=applicationUserId,proto3" json:"applicationUserId,omitempty"`                      //申请人ID
	ApplicationUserName         string `protobuf:"bytes,19,opt,name=applicationUserName,proto3" json:"applicationUserName,omitempty"`                  //申请人姓名
	ArrangeActualTime           string `protobuf:"bytes,20,opt,name=arrangeActualTime,proto3" json:"arrangeActualTime,omitempty"`                      //远程会诊安排人员实际操作申请单时间
	ArrangeConsultationType     int32  `protobuf:"varint,21,opt,name=arrangeConsultationType,proto3" json:"arrangeConsultationType,omitempty"`         //远程会诊安排人员安排的会诊类型
	ArrangeDoctor               string `protobuf:"bytes,22,opt,name=arrangeDoctor,proto3" json:"arrangeDoctor,omitempty"`                              //安排的会诊方医生
	ArrangeDoctorDepartment     string `protobuf:"bytes,23,opt,name=arrangeDoctorDepartment,proto3" json:"arrangeDoctorDepartment,omitempty"`          //安排的会诊方医生所属科室
	ArrangeOptions              string `protobuf:"bytes,24,opt,name=arrangeOptions,proto3" json:"arrangeOptions,omitempty"`                            //安排建议
	ArrangeRemarks              string `protobuf:"bytes,25,opt,name=arrangeRemarks,proto3" json:"arrangeRemarks,omitempty"`                            //安排备注
	ArrangeScheduleTime         string `protobuf:"bytes,26,opt,name=arrangeScheduleTime,proto3" json:"arrangeScheduleTime,omitempty"`                  //远程会诊安排人员预期的会诊开始实际
	ArrangeUserId               string `protobuf:"bytes,27,opt,name=arrangeUserId,proto3" json:"arrangeUserId,omitempty"`                              //远程会诊安排人员ID
	ArrangeUserName             string `protobuf:"bytes,28,opt,name=arrangeUserName,proto3" json:"arrangeUserName,omitempty"`                          //远程会诊安排人员姓名
	AssistedCheck               string `protobuf:"bytes,29,opt,name=assistedCheck,proto3" json:"assistedCheck,omitempty"`                              //辅助检查
	AttachmentPath              string `protobuf:"bytes,30,opt,name=attachmentPath,proto3" json:"attachmentPath,omitempty"`                            //附件列表关联id
	BirthDate                   string `protobuf:"bytes,31,opt,name=birthDate,proto3" json:"birthDate,omitempty"`                                      //出生日期
	CheckUserID                 string `protobuf:"bytes,32,opt,name=checkUserID,proto3" json:"checkUserID,omitempty"`                                  //报到使用的用户id
	CheckinFlag                 int32  `protobuf:"varint,33,opt,name=checkinFlag,proto3" json:"checkinFlag,omitempty"`                                 // 0（未报到），1（已报到）
	ConsultationActualStartTime string `protobuf:"bytes,34,opt,name=consultationActualStartTime,proto3" json:"consultationActualStartTime,omitempty"`  //会诊实际开始时间
	ConsultationCompleteTime    string `protobuf:"bytes,35,opt,name=consultationCompleteTime,proto3" json:"consultationCompleteTime,omitempty"`        //会诊完成(结束)时间
	ConsultationHospitalId      string `protobuf:"bytes,36,opt,name=consultationHospitalId,proto3" json:"consultationHospitalId,omitempty"`            //远程会诊方医院ID
	ConsultationHospitalName    string `protobuf:"bytes,37,opt,name=consultationHospitalName,proto3" json:"consultationHospitalName,omitempty"`        //远程会诊方医院名称
	CreatedBy                   string `protobuf:"bytes,38,opt,name=createdBy,proto3" json:"createdBy,omitempty"`                                      //创建人
	CreatedDate                 string `protobuf:"bytes,39,opt,name=createdDate,proto3" json:"createdDate,omitempty"`                                  //创建时间
	DelFlag                     int32  `protobuf:"varint,40,opt,name=delFlag,proto3" json:"delFlag,omitempty"`                                         //是否删除
	DirectorDoctorName          string `protobuf:"bytes,41,opt,name=directorDoctorName,proto3" json:"directorDoctorName,omitempty"`                    //患者主管医生姓名
	DirectorDoctorPhone         string `protobuf:"bytes,42,opt,name=directorDoctorPhone,proto3" json:"directorDoctorPhone,omitempty"`                  //主管医生电话
	DoctorAdviceDetail          string `protobuf:"bytes,43,opt,name=doctorAdviceDetail,proto3" json:"doctorAdviceDetail,omitempty"`                    //医嘱明细
	FamilyIllHistory            string `protobuf:"bytes,44,opt,name=familyIllHistory,proto3" json:"familyIllHistory,omitempty"`                        //家族史
	FamilyName                  string `protobuf:"bytes,45,opt,name=familyName,proto3" json:"familyName,omitempty"`                                    //联系人(家属)姓名
	FamilyPhoneNumber           string `protobuf:"bytes,46,opt,name=familyPhoneNumber,proto3" json:"familyPhoneNumber,omitempty"`                      //联系人(家属)电话
	HospitalCheckInTime         string `protobuf:"bytes,47,opt,name=hospitalCheckInTime,proto3" json:"hospitalCheckInTime,omitempty"`                  //入院时间
	HpiHistory                  string `protobuf:"bytes,48,opt,name=hpiHistory,proto3" json:"hpiHistory,omitempty"`                                    //现病史
	Id                          string `protobuf:"bytes,49,opt,name=id,proto3" json:"id,omitempty"`                                                    //申请主键ID
	IdCard                      string `protobuf:"bytes,50,opt,name=idCard,proto3" json:"idCard,omitempty"`                                            //身份证号
	Illness                     string `protobuf:"bytes,51,opt,name=illness,proto3" json:"illness,omitempty"`                                          //病情概述
	ImageId                     string `protobuf:"bytes,52,opt,name=imageId,proto3" json:"imageId,omitempty"`                                          //影像业务ID
	InspectionResult            string `protobuf:"bytes,53,opt,name=inspectionResult,proto3" json:"inspectionResult,omitempty"`                        //检验检查结果
	InviteUserID                string `protobuf:"bytes,54,opt,name=inviteUserID,proto3" json:"inviteUserID,omitempty"`                                //发起邀请医生ID
	IsAccompany                 bool   `protobuf:"varint,55,opt,name=isAccompany,proto3" json:"isAccompany,omitempty"`                                 //是否有家属陪同
	IsTransfer                  bool   `protobuf:"varint,56,opt,name=isTransfer,proto3" json:"isTransfer,omitempty"`                                   //是否转院
	IsUrgent                    bool   `protobuf:"varint,57,opt,name=isUrgent,proto3" json:"isUrgent,omitempty"`                                       //会诊申请是否紧急
	MaritalStatus               string `protobuf:"bytes,58,opt,name=maritalStatus,proto3" json:"maritalStatus,omitempty"`                              //婚姻状况
	PatientId                   string `protobuf:"bytes,59,opt,name=patientId,proto3" json:"patientId,omitempty"`                                      //病人号
	PatientName                 string `protobuf:"bytes,60,opt,name=patientName,proto3" json:"patientName,omitempty"`                                  //患者姓名
	PatientSelfIllDesc          string `protobuf:"bytes,61,opt,name=patientSelfIllDesc,proto3" json:"patientSelfIllDesc,omitempty"`                    //患者主诉
	PersonalHistory             string `protobuf:"bytes,62,opt,name=personalHistory,proto3" json:"personalHistory,omitempty"`                          //个人史
	PhoneNumber                 string `protobuf:"bytes,63,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`                                  //患者电话
	PhysicalCheck               string `protobuf:"bytes,64,opt,name=physicalCheck,proto3" json:"physicalCheck,omitempty"`                              //体格检查
	PmhHistory                  string `protobuf:"bytes,65,opt,name=pmhHistory,proto3" json:"pmhHistory,omitempty"`                                    //既往史
	PreliminaryConclusion       string `protobuf:"bytes,66,opt,name=preliminaryConclusion,proto3" json:"preliminaryConclusion,omitempty"`              //初步结论
	PrintCount                  int32  `protobuf:"varint,67,opt,name=printCount,proto3" json:"printCount,omitempty"`                                   //打印次数
	Profession                  string `protobuf:"bytes,68,opt,name=profession,proto3" json:"profession,omitempty"`                                    //职业
	ProgressNotes               string `protobuf:"bytes,69,opt,name=progressNotes,proto3" json:"progressNotes,omitempty"`                              //病程概述
	RefuseReason                string `protobuf:"bytes,70,opt,name=refuseReason,proto3" json:"refuseReason,omitempty"`                                //远程会诊安排人员拒绝原因
	Sex                         int32  `protobuf:"varint,71,opt,name=sex,proto3" json:"sex,omitempty"`                                                 //病人性别(0男，1女，2不确定)
	SolveProblem                string `protobuf:"bytes,72,opt,name=solveProblem,proto3" json:"solveProblem,omitempty"`                                //申请备注信息(会诊诉求)需要解决的问题
	Status                      int32  `protobuf:"varint,73,opt,name=status,proto3" json:"status,omitempty"`                                           //会诊单状态(1草稿，2已申请，3已安排， 4
	// 已创建会议，5，会诊中 6，未结论  7 已结论
	// 8已取消（用户自己取消的）,9.已拒绝（安排人员拒绝安排）
	TreatmentHistory string `protobuf:"bytes,74,opt,name=treatmentHistory,proto3" json:"treatmentHistory,omitempty"` //治疗经过
}

func (x *HycConsultationApplysList) Reset() {
	*x = HycConsultationApplysList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HycConsultationApplysList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HycConsultationApplysList) ProtoMessage() {}

func (x *HycConsultationApplysList) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HycConsultationApplysList.ProtoReflect.Descriptor instead.
func (*HycConsultationApplysList) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{8}
}

func (x *HycConsultationApplysList) GetAdNumber() string {
	if x != nil {
		return x.AdNumber
	}
	return ""
}

func (x *HycConsultationApplysList) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HycConsultationApplysList) GetAddressCity() string {
	if x != nil {
		return x.AddressCity
	}
	return ""
}

func (x *HycConsultationApplysList) GetAddressCountry() string {
	if x != nil {
		return x.AddressCountry
	}
	return ""
}

func (x *HycConsultationApplysList) GetAddressProvince() string {
	if x != nil {
		return x.AddressProvince
	}
	return ""
}

func (x *HycConsultationApplysList) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *HycConsultationApplysList) GetAgeUnit() string {
	if x != nil {
		return x.AgeUnit
	}
	return ""
}

func (x *HycConsultationApplysList) GetAllergicHistory() string {
	if x != nil {
		return x.AllergicHistory
	}
	return ""
}

func (x *HycConsultationApplysList) GetApplicationConsultationTime() string {
	if x != nil {
		return x.ApplicationConsultationTime
	}
	return ""
}

func (x *HycConsultationApplysList) GetApplicationConsultationType() int32 {
	if x != nil {
		return x.ApplicationConsultationType
	}
	return 0
}

func (x *HycConsultationApplysList) GetApplicationDepartmentId() string {
	if x != nil {
		return x.ApplicationDepartmentId
	}
	return ""
}

func (x *HycConsultationApplysList) GetApplicationDepartmentName() string {
	if x != nil {
		return x.ApplicationDepartmentName
	}
	return ""
}

func (x *HycConsultationApplysList) GetApplicationDoctor() string {
	if x != nil {
		return x.ApplicationDoctor
	}
	return ""
}

func (x *HycConsultationApplysList) GetApplicationDoctorDepartment() string {
	if x != nil {
		return x.ApplicationDoctorDepartment
	}
	return ""
}

func (x *HycConsultationApplysList) GetApplicationHospitalId() string {
	if x != nil {
		return x.ApplicationHospitalId
	}
	return ""
}

func (x *HycConsultationApplysList) GetApplicationHospitalName() string {
	if x != nil {
		return x.ApplicationHospitalName
	}
	return ""
}

func (x *HycConsultationApplysList) GetApplicationNumber() string {
	if x != nil {
		return x.ApplicationNumber
	}
	return ""
}

func (x *HycConsultationApplysList) GetApplicationUserId() string {
	if x != nil {
		return x.ApplicationUserId
	}
	return ""
}

func (x *HycConsultationApplysList) GetApplicationUserName() string {
	if x != nil {
		return x.ApplicationUserName
	}
	return ""
}

func (x *HycConsultationApplysList) GetArrangeActualTime() string {
	if x != nil {
		return x.ArrangeActualTime
	}
	return ""
}

func (x *HycConsultationApplysList) GetArrangeConsultationType() int32 {
	if x != nil {
		return x.ArrangeConsultationType
	}
	return 0
}

func (x *HycConsultationApplysList) GetArrangeDoctor() string {
	if x != nil {
		return x.ArrangeDoctor
	}
	return ""
}

func (x *HycConsultationApplysList) GetArrangeDoctorDepartment() string {
	if x != nil {
		return x.ArrangeDoctorDepartment
	}
	return ""
}

func (x *HycConsultationApplysList) GetArrangeOptions() string {
	if x != nil {
		return x.ArrangeOptions
	}
	return ""
}

func (x *HycConsultationApplysList) GetArrangeRemarks() string {
	if x != nil {
		return x.ArrangeRemarks
	}
	return ""
}

func (x *HycConsultationApplysList) GetArrangeScheduleTime() string {
	if x != nil {
		return x.ArrangeScheduleTime
	}
	return ""
}

func (x *HycConsultationApplysList) GetArrangeUserId() string {
	if x != nil {
		return x.ArrangeUserId
	}
	return ""
}

func (x *HycConsultationApplysList) GetArrangeUserName() string {
	if x != nil {
		return x.ArrangeUserName
	}
	return ""
}

func (x *HycConsultationApplysList) GetAssistedCheck() string {
	if x != nil {
		return x.AssistedCheck
	}
	return ""
}

func (x *HycConsultationApplysList) GetAttachmentPath() string {
	if x != nil {
		return x.AttachmentPath
	}
	return ""
}

func (x *HycConsultationApplysList) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *HycConsultationApplysList) GetCheckUserID() string {
	if x != nil {
		return x.CheckUserID
	}
	return ""
}

func (x *HycConsultationApplysList) GetCheckinFlag() int32 {
	if x != nil {
		return x.CheckinFlag
	}
	return 0
}

func (x *HycConsultationApplysList) GetConsultationActualStartTime() string {
	if x != nil {
		return x.ConsultationActualStartTime
	}
	return ""
}

func (x *HycConsultationApplysList) GetConsultationCompleteTime() string {
	if x != nil {
		return x.ConsultationCompleteTime
	}
	return ""
}

func (x *HycConsultationApplysList) GetConsultationHospitalId() string {
	if x != nil {
		return x.ConsultationHospitalId
	}
	return ""
}

func (x *HycConsultationApplysList) GetConsultationHospitalName() string {
	if x != nil {
		return x.ConsultationHospitalName
	}
	return ""
}

func (x *HycConsultationApplysList) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *HycConsultationApplysList) GetCreatedDate() string {
	if x != nil {
		return x.CreatedDate
	}
	return ""
}

func (x *HycConsultationApplysList) GetDelFlag() int32 {
	if x != nil {
		return x.DelFlag
	}
	return 0
}

func (x *HycConsultationApplysList) GetDirectorDoctorName() string {
	if x != nil {
		return x.DirectorDoctorName
	}
	return ""
}

func (x *HycConsultationApplysList) GetDirectorDoctorPhone() string {
	if x != nil {
		return x.DirectorDoctorPhone
	}
	return ""
}

func (x *HycConsultationApplysList) GetDoctorAdviceDetail() string {
	if x != nil {
		return x.DoctorAdviceDetail
	}
	return ""
}

func (x *HycConsultationApplysList) GetFamilyIllHistory() string {
	if x != nil {
		return x.FamilyIllHistory
	}
	return ""
}

func (x *HycConsultationApplysList) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *HycConsultationApplysList) GetFamilyPhoneNumber() string {
	if x != nil {
		return x.FamilyPhoneNumber
	}
	return ""
}

func (x *HycConsultationApplysList) GetHospitalCheckInTime() string {
	if x != nil {
		return x.HospitalCheckInTime
	}
	return ""
}

func (x *HycConsultationApplysList) GetHpiHistory() string {
	if x != nil {
		return x.HpiHistory
	}
	return ""
}

func (x *HycConsultationApplysList) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HycConsultationApplysList) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *HycConsultationApplysList) GetIllness() string {
	if x != nil {
		return x.Illness
	}
	return ""
}

func (x *HycConsultationApplysList) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *HycConsultationApplysList) GetInspectionResult() string {
	if x != nil {
		return x.InspectionResult
	}
	return ""
}

func (x *HycConsultationApplysList) GetInviteUserID() string {
	if x != nil {
		return x.InviteUserID
	}
	return ""
}

func (x *HycConsultationApplysList) GetIsAccompany() bool {
	if x != nil {
		return x.IsAccompany
	}
	return false
}

func (x *HycConsultationApplysList) GetIsTransfer() bool {
	if x != nil {
		return x.IsTransfer
	}
	return false
}

func (x *HycConsultationApplysList) GetIsUrgent() bool {
	if x != nil {
		return x.IsUrgent
	}
	return false
}

func (x *HycConsultationApplysList) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *HycConsultationApplysList) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *HycConsultationApplysList) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *HycConsultationApplysList) GetPatientSelfIllDesc() string {
	if x != nil {
		return x.PatientSelfIllDesc
	}
	return ""
}

func (x *HycConsultationApplysList) GetPersonalHistory() string {
	if x != nil {
		return x.PersonalHistory
	}
	return ""
}

func (x *HycConsultationApplysList) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *HycConsultationApplysList) GetPhysicalCheck() string {
	if x != nil {
		return x.PhysicalCheck
	}
	return ""
}

func (x *HycConsultationApplysList) GetPmhHistory() string {
	if x != nil {
		return x.PmhHistory
	}
	return ""
}

func (x *HycConsultationApplysList) GetPreliminaryConclusion() string {
	if x != nil {
		return x.PreliminaryConclusion
	}
	return ""
}

func (x *HycConsultationApplysList) GetPrintCount() int32 {
	if x != nil {
		return x.PrintCount
	}
	return 0
}

func (x *HycConsultationApplysList) GetProfession() string {
	if x != nil {
		return x.Profession
	}
	return ""
}

func (x *HycConsultationApplysList) GetProgressNotes() string {
	if x != nil {
		return x.ProgressNotes
	}
	return ""
}

func (x *HycConsultationApplysList) GetRefuseReason() string {
	if x != nil {
		return x.RefuseReason
	}
	return ""
}

func (x *HycConsultationApplysList) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *HycConsultationApplysList) GetSolveProblem() string {
	if x != nil {
		return x.SolveProblem
	}
	return ""
}

func (x *HycConsultationApplysList) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HycConsultationApplysList) GetTreatmentHistory() string {
	if x != nil {
		return x.TreatmentHistory
	}
	return ""
}

type HykAddHospitalServiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	CreateBy       string `protobuf:"bytes,2,opt,name=createBy,proto3" json:"createBy,omitempty"`
	CreateName     string `protobuf:"bytes,3,opt,name=createName,proto3" json:"createName,omitempty"`
	Departname     string `protobuf:"bytes,4,opt,name=departname,proto3" json:"departname,omitempty"`
	DepartnameEn   string `protobuf:"bytes,5,opt,name=departnameEn,proto3" json:"departnameEn,omitempty"`
	Description    string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Fax            string `protobuf:"bytes,7,opt,name=fax,proto3" json:"fax,omitempty"`
	HospitalCode   string `protobuf:"bytes,8,opt,name=hospitalCode,proto3" json:"hospitalCode,omitempty"`
	Id             string `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
	Memo           string `protobuf:"bytes,10,opt,name=memo,proto3" json:"memo,omitempty"`
	OrgCode        string `protobuf:"bytes,11,opt,name=orgCode,proto3" json:"orgCode,omitempty"`
	Parentdepartid string `protobuf:"bytes,12,opt,name=parentdepartid,proto3" json:"parentdepartid,omitempty"`
}

func (x *HykAddHospitalServiceReq) Reset() {
	*x = HykAddHospitalServiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HykAddHospitalServiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HykAddHospitalServiceReq) ProtoMessage() {}

func (x *HykAddHospitalServiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HykAddHospitalServiceReq.ProtoReflect.Descriptor instead.
func (*HykAddHospitalServiceReq) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{9}
}

func (x *HykAddHospitalServiceReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HykAddHospitalServiceReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *HykAddHospitalServiceReq) GetCreateName() string {
	if x != nil {
		return x.CreateName
	}
	return ""
}

func (x *HykAddHospitalServiceReq) GetDepartname() string {
	if x != nil {
		return x.Departname
	}
	return ""
}

func (x *HykAddHospitalServiceReq) GetDepartnameEn() string {
	if x != nil {
		return x.DepartnameEn
	}
	return ""
}

func (x *HykAddHospitalServiceReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HykAddHospitalServiceReq) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *HykAddHospitalServiceReq) GetHospitalCode() string {
	if x != nil {
		return x.HospitalCode
	}
	return ""
}

func (x *HykAddHospitalServiceReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HykAddHospitalServiceReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *HykAddHospitalServiceReq) GetOrgCode() string {
	if x != nil {
		return x.OrgCode
	}
	return ""
}

func (x *HykAddHospitalServiceReq) GetParentdepartid() string {
	if x != nil {
		return x.Parentdepartid
	}
	return ""
}

type TshospitaldeptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedBy              string `protobuf:"bytes,1,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	HospitalId             string `protobuf:"bytes,2,opt,name=hospitalId,proto3" json:"hospitalId,omitempty"`
	HospitalName           string `protobuf:"bytes,3,opt,name=hospitalName,proto3" json:"hospitalName,omitempty"`
	Id                     string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Name                   string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	SuperiorHospitalDeptId string `protobuf:"bytes,6,opt,name=superiorHospitalDeptId,proto3" json:"superiorHospitalDeptId,omitempty"`
	TreatmentRange         string `protobuf:"bytes,7,opt,name=treatmentRange,proto3" json:"treatmentRange,omitempty"`
}

func (x *TshospitaldeptReq) Reset() {
	*x = TshospitaldeptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TshospitaldeptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TshospitaldeptReq) ProtoMessage() {}

func (x *TshospitaldeptReq) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TshospitaldeptReq.ProtoReflect.Descriptor instead.
func (*TshospitaldeptReq) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{10}
}

func (x *TshospitaldeptReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *TshospitaldeptReq) GetHospitalId() string {
	if x != nil {
		return x.HospitalId
	}
	return ""
}

func (x *TshospitaldeptReq) GetHospitalName() string {
	if x != nil {
		return x.HospitalName
	}
	return ""
}

func (x *TshospitaldeptReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TshospitaldeptReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TshospitaldeptReq) GetSuperiorHospitalDeptId() string {
	if x != nil {
		return x.SuperiorHospitalDeptId
	}
	return ""
}

func (x *TshospitaldeptReq) GetTreatmentRange() string {
	if x != nil {
		return x.TreatmentRange
	}
	return ""
}

type HycConsultationApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdNumber                    string         `protobuf:"bytes,1,opt,name=adNumber,proto3" json:"adNumber,omitempty"`
	Address                     string         `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	AddressCity                 string         `protobuf:"bytes,3,opt,name=addressCity,proto3" json:"addressCity,omitempty"`
	AddressCountry              string         `protobuf:"bytes,4,opt,name=addressCountry,proto3" json:"addressCountry,omitempty"`
	AddressProvince             string         `protobuf:"bytes,5,opt,name=addressProvince,proto3" json:"addressProvince,omitempty"`
	Age                         int32          `protobuf:"varint,6,opt,name=age,proto3" json:"age,omitempty"`
	AgeUnit                     string         `protobuf:"bytes,7,opt,name=ageUnit,proto3" json:"ageUnit,omitempty"`
	AllergicHistory             string         `protobuf:"bytes,8,opt,name=allergicHistory,proto3" json:"allergicHistory,omitempty"`
	ApplicationConsultationTime string         `protobuf:"bytes,9,opt,name=applicationConsultationTime,proto3" json:"applicationConsultationTime,omitempty"`
	ApplicationConsultationType int32          `protobuf:"varint,10,opt,name=applicationConsultationType,proto3" json:"applicationConsultationType,omitempty"`
	ApplicationDepartmentId     string         `protobuf:"bytes,11,opt,name=applicationDepartmentId,proto3" json:"applicationDepartmentId,omitempty"`
	ApplicationDepartmentName   string         `protobuf:"bytes,12,opt,name=applicationDepartmentName,proto3" json:"applicationDepartmentName,omitempty"`
	ApplicationDoctor           string         `protobuf:"bytes,13,opt,name=applicationDoctor,proto3" json:"applicationDoctor,omitempty"`
	ApplicationDoctorDepartment string         `protobuf:"bytes,14,opt,name=applicationDoctorDepartment,proto3" json:"applicationDoctorDepartment,omitempty"`
	ApplicationHospitalId       string         `protobuf:"bytes,15,opt,name=applicationHospitalId,proto3" json:"applicationHospitalId,omitempty"`
	ApplicationHospitalName     string         `protobuf:"bytes,16,opt,name=applicationHospitalName,proto3" json:"applicationHospitalName,omitempty"`
	ApplicationNumber           string         `protobuf:"bytes,17,opt,name=applicationNumber,proto3" json:"applicationNumber,omitempty"`
	ApplicationUserId           string         `protobuf:"bytes,18,opt,name=applicationUserId,proto3" json:"applicationUserId,omitempty"`
	ApplicationUserName         string         `protobuf:"bytes,19,opt,name=applicationUserName,proto3" json:"applicationUserName,omitempty"`
	ArrangeActualTime           string         `protobuf:"bytes,20,opt,name=arrangeActualTime,proto3" json:"arrangeActualTime,omitempty"`
	ArrangeConsultationType     int32          `protobuf:"varint,21,opt,name=arrangeConsultationType,proto3" json:"arrangeConsultationType,omitempty"`
	ArrangeDoctor               string         `protobuf:"bytes,22,opt,name=arrangeDoctor,proto3" json:"arrangeDoctor,omitempty"`
	ArrangeDoctorDepartment     string         `protobuf:"bytes,23,opt,name=arrangeDoctorDepartment,proto3" json:"arrangeDoctorDepartment,omitempty"`
	ArrangeOptions              string         `protobuf:"bytes,24,opt,name=arrangeOptions,proto3" json:"arrangeOptions,omitempty"`
	ArrangeRemarks              string         `protobuf:"bytes,25,opt,name=arrangeRemarks,proto3" json:"arrangeRemarks,omitempty"`
	ArrangeScheduleTime         string         `protobuf:"bytes,26,opt,name=arrangeScheduleTime,proto3" json:"arrangeScheduleTime,omitempty"`
	ArrangeUserId               string         `protobuf:"bytes,27,opt,name=arrangeUserId,proto3" json:"arrangeUserId,omitempty"`
	ArrangeUserName             string         `protobuf:"bytes,28,opt,name=arrangeUserName,proto3" json:"arrangeUserName,omitempty"`
	AssistedCheck               string         `protobuf:"bytes,29,opt,name=assistedCheck,proto3" json:"assistedCheck,omitempty"`
	Attachments                 []*Attachments `protobuf:"bytes,30,rep,name=attachments,proto3" json:"attachments,omitempty"`
	BirthDate                   string         `protobuf:"bytes,31,opt,name=birthDate,proto3" json:"birthDate,omitempty"`
	CheckInFlag                 int64          `protobuf:"varint,32,opt,name=checkInFlag,proto3" json:"checkInFlag,omitempty"`
	ConclusionButtonFlag        string         `protobuf:"bytes,33,opt,name=conclusionButtonFlag,proto3" json:"conclusionButtonFlag,omitempty"`
	ConsultationActualStartTime string         `protobuf:"bytes,34,opt,name=consultationActualStartTime,proto3" json:"consultationActualStartTime,omitempty"`
	ConsultationCompleteTime    string         `protobuf:"bytes,35,opt,name=consultationCompleteTime,proto3" json:"consultationCompleteTime,omitempty"`
	ConsultationHospitalId      string         `protobuf:"bytes,36,opt,name=consultationHospitalId,proto3" json:"consultationHospitalId,omitempty"`
	ConsultationHospitalName    string         `protobuf:"bytes,37,opt,name=consultationHospitalName,proto3" json:"consultationHospitalName,omitempty"`
	CreatedBy                   string         `protobuf:"bytes,38,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedDate                 string         `protobuf:"bytes,39,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	DelFlag                     int32          `protobuf:"varint,40,opt,name=delFlag,proto3" json:"delFlag,omitempty"`
	DirectorDoctorName          string         `protobuf:"bytes,41,opt,name=directorDoctorName,proto3" json:"directorDoctorName,omitempty"`
	DirectorDoctorPhone         string         `protobuf:"bytes,42,opt,name=directorDoctorPhone,proto3" json:"directorDoctorPhone,omitempty"`
	DoctorAdviceDetail          string         `protobuf:"bytes,43,opt,name=doctorAdviceDetail,proto3" json:"doctorAdviceDetail,omitempty"`
	EndDate                     string         `protobuf:"bytes,44,opt,name=endDate,proto3" json:"endDate,omitempty"`
	FamilyIllHistory            string         `protobuf:"bytes,45,opt,name=familyIllHistory,proto3" json:"familyIllHistory,omitempty"`
	FamilyName                  string         `protobuf:"bytes,46,opt,name=familyName,proto3" json:"familyName,omitempty"`
	FamilyPhoneNumber           string         `protobuf:"bytes,47,opt,name=familyPhoneNumber,proto3" json:"familyPhoneNumber,omitempty"`
	HospitalCheckInTime         string         `protobuf:"bytes,48,opt,name=hospitalCheckInTime,proto3" json:"hospitalCheckInTime,omitempty"`
	HpiHistory                  string         `protobuf:"bytes,49,opt,name=hpiHistory,proto3" json:"hpiHistory,omitempty"`
	Id                          string         `protobuf:"bytes,50,opt,name=id,proto3" json:"id,omitempty"`
	IdCard                      string         `protobuf:"bytes,51,opt,name=idCard,proto3" json:"idCard,omitempty"`
	Illness                     string         `protobuf:"bytes,52,opt,name=illness,proto3" json:"illness,omitempty"`
	ImageId                     string         `protobuf:"bytes,53,opt,name=imageId,proto3" json:"imageId,omitempty"`
	InspectionResult            string         `protobuf:"bytes,54,opt,name=inspectionResult,proto3" json:"inspectionResult,omitempty"`
	IsAccompany                 bool           `protobuf:"varint,55,opt,name=isAccompany,proto3" json:"isAccompany,omitempty"`
	IsEvaluated                 bool           `protobuf:"varint,56,opt,name=isEvaluated,proto3" json:"isEvaluated,omitempty"`
	IsTransfer                  bool           `protobuf:"varint,57,opt,name=isTransfer,proto3" json:"isTransfer,omitempty"`
	IsUrgent                    bool           `protobuf:"varint,58,opt,name=isUrgent,proto3" json:"isUrgent,omitempty"`
	MaritalStatus               string         `protobuf:"bytes,59,opt,name=maritalStatus,proto3" json:"maritalStatus,omitempty"`
	PatientId                   string         `protobuf:"bytes,60,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientName                 string         `protobuf:"bytes,61,opt,name=patientName,proto3" json:"patientName,omitempty"`
	PatientNature               string         `protobuf:"bytes,62,opt,name=patientNature,proto3" json:"patientNature,omitempty"`
	PatientSelfIllDesc          string         `protobuf:"bytes,63,opt,name=patientSelfIllDesc,proto3" json:"patientSelfIllDesc,omitempty"`
	PersonalHistory             string         `protobuf:"bytes,64,opt,name=personalHistory,proto3" json:"personalHistory,omitempty"`
	PhoneNumber                 string         `protobuf:"bytes,65,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	PhysicalCheck               string         `protobuf:"bytes,66,opt,name=physicalCheck,proto3" json:"physicalCheck,omitempty"`
	PmhHistory                  string         `protobuf:"bytes,67,opt,name=pmhHistory,proto3" json:"pmhHistory,omitempty"`
	PreliminaryConclusion       string         `protobuf:"bytes,68,opt,name=preliminaryConclusion,proto3" json:"preliminaryConclusion,omitempty"`
	PrintCount                  int32          `protobuf:"varint,69,opt,name=printCount,proto3" json:"printCount,omitempty"`
	Profession                  string         `protobuf:"bytes,70,opt,name=profession,proto3" json:"profession,omitempty"`
	ProgressNotes               string         `protobuf:"bytes,71,opt,name=progressNotes,proto3" json:"progressNotes,omitempty"`
	RefuseReason                string         `protobuf:"bytes,72,opt,name=refuseReason,proto3" json:"refuseReason,omitempty"`
	Sex                         int32          `protobuf:"varint,73,opt,name=sex,proto3" json:"sex,omitempty"`
	SolveProblem                string         `protobuf:"bytes,74,opt,name=solveProblem,proto3" json:"solveProblem,omitempty"`
	StartDate                   string         `protobuf:"bytes,75,opt,name=startDate,proto3" json:"startDate,omitempty"`
	Status                      int32          `protobuf:"varint,76,opt,name=status,proto3" json:"status,omitempty"`
	TreatmentHistory            string         `protobuf:"bytes,77,opt,name=treatmentHistory,proto3" json:"treatmentHistory,omitempty"`
	YcType                      int32          `protobuf:"varint,78,opt,name=ycType,proto3" json:"ycType,omitempty"`
}

func (x *HycConsultationApply) Reset() {
	*x = HycConsultationApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HycConsultationApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HycConsultationApply) ProtoMessage() {}

func (x *HycConsultationApply) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HycConsultationApply.ProtoReflect.Descriptor instead.
func (*HycConsultationApply) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{11}
}

func (x *HycConsultationApply) GetAdNumber() string {
	if x != nil {
		return x.AdNumber
	}
	return ""
}

func (x *HycConsultationApply) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HycConsultationApply) GetAddressCity() string {
	if x != nil {
		return x.AddressCity
	}
	return ""
}

func (x *HycConsultationApply) GetAddressCountry() string {
	if x != nil {
		return x.AddressCountry
	}
	return ""
}

func (x *HycConsultationApply) GetAddressProvince() string {
	if x != nil {
		return x.AddressProvince
	}
	return ""
}

func (x *HycConsultationApply) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *HycConsultationApply) GetAgeUnit() string {
	if x != nil {
		return x.AgeUnit
	}
	return ""
}

func (x *HycConsultationApply) GetAllergicHistory() string {
	if x != nil {
		return x.AllergicHistory
	}
	return ""
}

func (x *HycConsultationApply) GetApplicationConsultationTime() string {
	if x != nil {
		return x.ApplicationConsultationTime
	}
	return ""
}

func (x *HycConsultationApply) GetApplicationConsultationType() int32 {
	if x != nil {
		return x.ApplicationConsultationType
	}
	return 0
}

func (x *HycConsultationApply) GetApplicationDepartmentId() string {
	if x != nil {
		return x.ApplicationDepartmentId
	}
	return ""
}

func (x *HycConsultationApply) GetApplicationDepartmentName() string {
	if x != nil {
		return x.ApplicationDepartmentName
	}
	return ""
}

func (x *HycConsultationApply) GetApplicationDoctor() string {
	if x != nil {
		return x.ApplicationDoctor
	}
	return ""
}

func (x *HycConsultationApply) GetApplicationDoctorDepartment() string {
	if x != nil {
		return x.ApplicationDoctorDepartment
	}
	return ""
}

func (x *HycConsultationApply) GetApplicationHospitalId() string {
	if x != nil {
		return x.ApplicationHospitalId
	}
	return ""
}

func (x *HycConsultationApply) GetApplicationHospitalName() string {
	if x != nil {
		return x.ApplicationHospitalName
	}
	return ""
}

func (x *HycConsultationApply) GetApplicationNumber() string {
	if x != nil {
		return x.ApplicationNumber
	}
	return ""
}

func (x *HycConsultationApply) GetApplicationUserId() string {
	if x != nil {
		return x.ApplicationUserId
	}
	return ""
}

func (x *HycConsultationApply) GetApplicationUserName() string {
	if x != nil {
		return x.ApplicationUserName
	}
	return ""
}

func (x *HycConsultationApply) GetArrangeActualTime() string {
	if x != nil {
		return x.ArrangeActualTime
	}
	return ""
}

func (x *HycConsultationApply) GetArrangeConsultationType() int32 {
	if x != nil {
		return x.ArrangeConsultationType
	}
	return 0
}

func (x *HycConsultationApply) GetArrangeDoctor() string {
	if x != nil {
		return x.ArrangeDoctor
	}
	return ""
}

func (x *HycConsultationApply) GetArrangeDoctorDepartment() string {
	if x != nil {
		return x.ArrangeDoctorDepartment
	}
	return ""
}

func (x *HycConsultationApply) GetArrangeOptions() string {
	if x != nil {
		return x.ArrangeOptions
	}
	return ""
}

func (x *HycConsultationApply) GetArrangeRemarks() string {
	if x != nil {
		return x.ArrangeRemarks
	}
	return ""
}

func (x *HycConsultationApply) GetArrangeScheduleTime() string {
	if x != nil {
		return x.ArrangeScheduleTime
	}
	return ""
}

func (x *HycConsultationApply) GetArrangeUserId() string {
	if x != nil {
		return x.ArrangeUserId
	}
	return ""
}

func (x *HycConsultationApply) GetArrangeUserName() string {
	if x != nil {
		return x.ArrangeUserName
	}
	return ""
}

func (x *HycConsultationApply) GetAssistedCheck() string {
	if x != nil {
		return x.AssistedCheck
	}
	return ""
}

func (x *HycConsultationApply) GetAttachments() []*Attachments {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *HycConsultationApply) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *HycConsultationApply) GetCheckInFlag() int64 {
	if x != nil {
		return x.CheckInFlag
	}
	return 0
}

func (x *HycConsultationApply) GetConclusionButtonFlag() string {
	if x != nil {
		return x.ConclusionButtonFlag
	}
	return ""
}

func (x *HycConsultationApply) GetConsultationActualStartTime() string {
	if x != nil {
		return x.ConsultationActualStartTime
	}
	return ""
}

func (x *HycConsultationApply) GetConsultationCompleteTime() string {
	if x != nil {
		return x.ConsultationCompleteTime
	}
	return ""
}

func (x *HycConsultationApply) GetConsultationHospitalId() string {
	if x != nil {
		return x.ConsultationHospitalId
	}
	return ""
}

func (x *HycConsultationApply) GetConsultationHospitalName() string {
	if x != nil {
		return x.ConsultationHospitalName
	}
	return ""
}

func (x *HycConsultationApply) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *HycConsultationApply) GetCreatedDate() string {
	if x != nil {
		return x.CreatedDate
	}
	return ""
}

func (x *HycConsultationApply) GetDelFlag() int32 {
	if x != nil {
		return x.DelFlag
	}
	return 0
}

func (x *HycConsultationApply) GetDirectorDoctorName() string {
	if x != nil {
		return x.DirectorDoctorName
	}
	return ""
}

func (x *HycConsultationApply) GetDirectorDoctorPhone() string {
	if x != nil {
		return x.DirectorDoctorPhone
	}
	return ""
}

func (x *HycConsultationApply) GetDoctorAdviceDetail() string {
	if x != nil {
		return x.DoctorAdviceDetail
	}
	return ""
}

func (x *HycConsultationApply) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *HycConsultationApply) GetFamilyIllHistory() string {
	if x != nil {
		return x.FamilyIllHistory
	}
	return ""
}

func (x *HycConsultationApply) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *HycConsultationApply) GetFamilyPhoneNumber() string {
	if x != nil {
		return x.FamilyPhoneNumber
	}
	return ""
}

func (x *HycConsultationApply) GetHospitalCheckInTime() string {
	if x != nil {
		return x.HospitalCheckInTime
	}
	return ""
}

func (x *HycConsultationApply) GetHpiHistory() string {
	if x != nil {
		return x.HpiHistory
	}
	return ""
}

func (x *HycConsultationApply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HycConsultationApply) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *HycConsultationApply) GetIllness() string {
	if x != nil {
		return x.Illness
	}
	return ""
}

func (x *HycConsultationApply) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *HycConsultationApply) GetInspectionResult() string {
	if x != nil {
		return x.InspectionResult
	}
	return ""
}

func (x *HycConsultationApply) GetIsAccompany() bool {
	if x != nil {
		return x.IsAccompany
	}
	return false
}

func (x *HycConsultationApply) GetIsEvaluated() bool {
	if x != nil {
		return x.IsEvaluated
	}
	return false
}

func (x *HycConsultationApply) GetIsTransfer() bool {
	if x != nil {
		return x.IsTransfer
	}
	return false
}

func (x *HycConsultationApply) GetIsUrgent() bool {
	if x != nil {
		return x.IsUrgent
	}
	return false
}

func (x *HycConsultationApply) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *HycConsultationApply) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *HycConsultationApply) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *HycConsultationApply) GetPatientNature() string {
	if x != nil {
		return x.PatientNature
	}
	return ""
}

func (x *HycConsultationApply) GetPatientSelfIllDesc() string {
	if x != nil {
		return x.PatientSelfIllDesc
	}
	return ""
}

func (x *HycConsultationApply) GetPersonalHistory() string {
	if x != nil {
		return x.PersonalHistory
	}
	return ""
}

func (x *HycConsultationApply) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *HycConsultationApply) GetPhysicalCheck() string {
	if x != nil {
		return x.PhysicalCheck
	}
	return ""
}

func (x *HycConsultationApply) GetPmhHistory() string {
	if x != nil {
		return x.PmhHistory
	}
	return ""
}

func (x *HycConsultationApply) GetPreliminaryConclusion() string {
	if x != nil {
		return x.PreliminaryConclusion
	}
	return ""
}

func (x *HycConsultationApply) GetPrintCount() int32 {
	if x != nil {
		return x.PrintCount
	}
	return 0
}

func (x *HycConsultationApply) GetProfession() string {
	if x != nil {
		return x.Profession
	}
	return ""
}

func (x *HycConsultationApply) GetProgressNotes() string {
	if x != nil {
		return x.ProgressNotes
	}
	return ""
}

func (x *HycConsultationApply) GetRefuseReason() string {
	if x != nil {
		return x.RefuseReason
	}
	return ""
}

func (x *HycConsultationApply) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *HycConsultationApply) GetSolveProblem() string {
	if x != nil {
		return x.SolveProblem
	}
	return ""
}

func (x *HycConsultationApply) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *HycConsultationApply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HycConsultationApply) GetTreatmentHistory() string {
	if x != nil {
		return x.TreatmentHistory
	}
	return ""
}

func (x *HycConsultationApply) GetYcType() int32 {
	if x != nil {
		return x.YcType
	}
	return 0
}

type Attachments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attachemnttypename string `protobuf:"bytes,1,opt,name=attachemnttypename,proto3" json:"attachemnttypename,omitempty"`
	Attachmentcontent  string `protobuf:"bytes,2,opt,name=attachmentcontent,proto3" json:"attachmentcontent,omitempty"`
	Attachmenttype     string `protobuf:"bytes,3,opt,name=attachmenttype,proto3" json:"attachmenttype,omitempty"`
	Createdate         string `protobuf:"bytes,4,opt,name=createdate,proto3" json:"createdate,omitempty"`
	Extend             string `protobuf:"bytes,5,opt,name=extend,proto3" json:"extend,omitempty"`
	FileSize           string `protobuf:"bytes,6,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	FileUrl            string `protobuf:"bytes,7,opt,name=fileUrl,proto3" json:"fileUrl,omitempty"`
	Heigth             int32  `protobuf:"varint,8,opt,name=heigth,proto3" json:"heigth,omitempty"`
	Id                 string `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
	OriginalFileName   string `protobuf:"bytes,10,opt,name=originalFileName,proto3" json:"originalFileName,omitempty"`
	Osskey             string `protobuf:"bytes,11,opt,name=osskey,proto3" json:"osskey,omitempty"`
	Realpath           string `protobuf:"bytes,12,opt,name=realpath,proto3" json:"realpath,omitempty"`
	Subclassname       string `protobuf:"bytes,13,opt,name=subclassname,proto3" json:"subclassname,omitempty"`
	Swfpath            string `protobuf:"bytes,14,opt,name=swfpath,proto3" json:"swfpath,omitempty"`
	Userid             string `protobuf:"bytes,15,opt,name=userid,proto3" json:"userid,omitempty"`
	Width              int32  `protobuf:"varint,16,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *Attachments) Reset() {
	*x = Attachments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachments) ProtoMessage() {}

func (x *Attachments) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachments.ProtoReflect.Descriptor instead.
func (*Attachments) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{12}
}

func (x *Attachments) GetAttachemnttypename() string {
	if x != nil {
		return x.Attachemnttypename
	}
	return ""
}

func (x *Attachments) GetAttachmentcontent() string {
	if x != nil {
		return x.Attachmentcontent
	}
	return ""
}

func (x *Attachments) GetAttachmenttype() string {
	if x != nil {
		return x.Attachmenttype
	}
	return ""
}

func (x *Attachments) GetCreatedate() string {
	if x != nil {
		return x.Createdate
	}
	return ""
}

func (x *Attachments) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

func (x *Attachments) GetFileSize() string {
	if x != nil {
		return x.FileSize
	}
	return ""
}

func (x *Attachments) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *Attachments) GetHeigth() int32 {
	if x != nil {
		return x.Heigth
	}
	return 0
}

func (x *Attachments) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Attachments) GetOriginalFileName() string {
	if x != nil {
		return x.OriginalFileName
	}
	return ""
}

func (x *Attachments) GetOsskey() string {
	if x != nil {
		return x.Osskey
	}
	return ""
}

func (x *Attachments) GetRealpath() string {
	if x != nil {
		return x.Realpath
	}
	return ""
}

func (x *Attachments) GetSubclassname() string {
	if x != nil {
		return x.Subclassname
	}
	return ""
}

func (x *Attachments) GetSwfpath() string {
	if x != nil {
		return x.Swfpath
	}
	return ""
}

func (x *Attachments) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *Attachments) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type HycDualReferralApplys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Advice               string `protobuf:"bytes,1,opt,name=advice,proto3" json:"advice,omitempty"`
	AllergicHistory      string `protobuf:"bytes,2,opt,name=allergicHistory,proto3" json:"allergicHistory,omitempty"`
	ApplyDate            string `protobuf:"bytes,3,opt,name=applyDate,proto3" json:"applyDate,omitempty"`
	ApplyDoctorId        string `protobuf:"bytes,4,opt,name=applyDoctorId,proto3" json:"applyDoctorId,omitempty"`
	ApplyDoctorName      string `protobuf:"bytes,5,opt,name=applyDoctorName,proto3" json:"applyDoctorName,omitempty"`
	ApplyHospitalId      string `protobuf:"bytes,6,opt,name=applyHospitalId,proto3" json:"applyHospitalId,omitempty"`
	ApplyHospitalName    string `protobuf:"bytes,7,opt,name=applyHospitalName,proto3" json:"applyHospitalName,omitempty"`
	ArrangeintoDate      string `protobuf:"bytes,8,opt,name=arrangeintoDate,proto3" json:"arrangeintoDate,omitempty"`
	AttachmentPath       string `protobuf:"bytes,9,opt,name=attachmentPath,proto3" json:"attachmentPath,omitempty"`
	BackHospitalFlag     int32  `protobuf:"varint,10,opt,name=backHospitalFlag,proto3" json:"backHospitalFlag,omitempty"`
	BirthDate            string `protobuf:"bytes,11,opt,name=birthDate,proto3" json:"birthDate,omitempty"`
	CancelDate           string `protobuf:"bytes,12,opt,name=cancelDate,proto3" json:"cancelDate,omitempty"`
	City                 string `protobuf:"bytes,13,opt,name=city,proto3" json:"city,omitempty"`
	ComDocDepart         string `protobuf:"bytes,14,opt,name=comDocDepart,proto3" json:"comDocDepart,omitempty"`
	ComDocDepartId       string `protobuf:"bytes,15,opt,name=comDocDepartId,proto3" json:"comDocDepartId,omitempty"`
	ComDoctorPhone       string `protobuf:"bytes,16,opt,name=comDoctorPhone,proto3" json:"comDoctorPhone,omitempty"`
	CompetentDoctorName  string `protobuf:"bytes,17,opt,name=competentDoctorName,proto3" json:"competentDoctorName,omitempty"`
	County               string `protobuf:"bytes,18,opt,name=county,proto3" json:"county,omitempty"`
	CreatedBy            string `protobuf:"bytes,19,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedDate          string `protobuf:"bytes,20,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	DependentsName       string `protobuf:"bytes,21,opt,name=dependentsName,proto3" json:"dependentsName,omitempty"`
	DependentsPhone      string `protobuf:"bytes,22,opt,name=dependentsPhone,proto3" json:"dependentsPhone,omitempty"`
	Diagnosis            string `protobuf:"bytes,23,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	DraftDate            string `protobuf:"bytes,24,opt,name=draftDate,proto3" json:"draftDate,omitempty"`
	FamilyIllHistory     string `protobuf:"bytes,25,opt,name=familyIllHistory,proto3" json:"familyIllHistory,omitempty"`
	FirstImpression      string `protobuf:"bytes,26,opt,name=firstImpression,proto3" json:"firstImpression,omitempty"`
	FromType             string `protobuf:"bytes,27,opt,name=fromType,proto3" json:"fromType,omitempty"`
	Id                   string `protobuf:"bytes,28,opt,name=id,proto3" json:"id,omitempty"`
	InHospitalNum        string `protobuf:"bytes,29,opt,name=inHospitalNum,proto3" json:"inHospitalNum,omitempty"`
	IntoHospitalId       string `protobuf:"bytes,30,opt,name=intoHospitalId,proto3" json:"intoHospitalId,omitempty"`
	IntoHospitalName     string `protobuf:"bytes,31,opt,name=intoHospitalName,proto3" json:"intoHospitalName,omitempty"`
	IntodoctorId         string `protobuf:"bytes,32,opt,name=intodoctorId,proto3" json:"intodoctorId,omitempty"`
	IntodoctorName       string `protobuf:"bytes,33,opt,name=intodoctorName,proto3" json:"intodoctorName,omitempty"`
	IntodoctordepartName string `protobuf:"bytes,34,opt,name=intodoctordepartName,proto3" json:"intodoctordepartName,omitempty"`
	MainCheckResult      string `protobuf:"bytes,35,opt,name=mainCheckResult,proto3" json:"mainCheckResult,omitempty"`
	MedicalHistory       string `protobuf:"bytes,36,opt,name=medicalHistory,proto3" json:"medicalHistory,omitempty"`
	NowMedicalHistory    string `protobuf:"bytes,37,opt,name=nowMedicalHistory,proto3" json:"nowMedicalHistory,omitempty"`
	PatientAge           string `protobuf:"bytes,38,opt,name=patientAge,proto3" json:"patientAge,omitempty"`
	PatientId            string `protobuf:"bytes,39,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdCard        string `protobuf:"bytes,40,opt,name=patientIdCard,proto3" json:"patientIdCard,omitempty"`
	PatientName          string `protobuf:"bytes,41,opt,name=patientName,proto3" json:"patientName,omitempty"`
	PatientPhone         string `protobuf:"bytes,42,opt,name=patientPhone,proto3" json:"patientPhone,omitempty"`
	PatientSex           string `protobuf:"bytes,43,opt,name=patientSex,proto3" json:"patientSex,omitempty"`
	PatientreportDate    string `protobuf:"bytes,44,opt,name=patientreportDate,proto3" json:"patientreportDate,omitempty"`
	Province             string `protobuf:"bytes,45,opt,name=province,proto3" json:"province,omitempty"`
	ReferralNumber       string `protobuf:"bytes,46,opt,name=referralNumber,proto3" json:"referralNumber,omitempty"`
	RefuseReason         string `protobuf:"bytes,47,opt,name=refuseReason,proto3" json:"refuseReason,omitempty"`
	Status               int32  `protobuf:"varint,48,opt,name=status,proto3" json:"status,omitempty"`
	Street               string `protobuf:"bytes,49,opt,name=street,proto3" json:"street,omitempty"`
	TreatmentProcedure   string `protobuf:"bytes,50,opt,name=treatmentProcedure,proto3" json:"treatmentProcedure,omitempty"`
}

func (x *HycDualReferralApplys) Reset() {
	*x = HycDualReferralApplys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HycDualReferralApplys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HycDualReferralApplys) ProtoMessage() {}

func (x *HycDualReferralApplys) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HycDualReferralApplys.ProtoReflect.Descriptor instead.
func (*HycDualReferralApplys) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{13}
}

func (x *HycDualReferralApplys) GetAdvice() string {
	if x != nil {
		return x.Advice
	}
	return ""
}

func (x *HycDualReferralApplys) GetAllergicHistory() string {
	if x != nil {
		return x.AllergicHistory
	}
	return ""
}

func (x *HycDualReferralApplys) GetApplyDate() string {
	if x != nil {
		return x.ApplyDate
	}
	return ""
}

func (x *HycDualReferralApplys) GetApplyDoctorId() string {
	if x != nil {
		return x.ApplyDoctorId
	}
	return ""
}

func (x *HycDualReferralApplys) GetApplyDoctorName() string {
	if x != nil {
		return x.ApplyDoctorName
	}
	return ""
}

func (x *HycDualReferralApplys) GetApplyHospitalId() string {
	if x != nil {
		return x.ApplyHospitalId
	}
	return ""
}

func (x *HycDualReferralApplys) GetApplyHospitalName() string {
	if x != nil {
		return x.ApplyHospitalName
	}
	return ""
}

func (x *HycDualReferralApplys) GetArrangeintoDate() string {
	if x != nil {
		return x.ArrangeintoDate
	}
	return ""
}

func (x *HycDualReferralApplys) GetAttachmentPath() string {
	if x != nil {
		return x.AttachmentPath
	}
	return ""
}

func (x *HycDualReferralApplys) GetBackHospitalFlag() int32 {
	if x != nil {
		return x.BackHospitalFlag
	}
	return 0
}

func (x *HycDualReferralApplys) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *HycDualReferralApplys) GetCancelDate() string {
	if x != nil {
		return x.CancelDate
	}
	return ""
}

func (x *HycDualReferralApplys) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *HycDualReferralApplys) GetComDocDepart() string {
	if x != nil {
		return x.ComDocDepart
	}
	return ""
}

func (x *HycDualReferralApplys) GetComDocDepartId() string {
	if x != nil {
		return x.ComDocDepartId
	}
	return ""
}

func (x *HycDualReferralApplys) GetComDoctorPhone() string {
	if x != nil {
		return x.ComDoctorPhone
	}
	return ""
}

func (x *HycDualReferralApplys) GetCompetentDoctorName() string {
	if x != nil {
		return x.CompetentDoctorName
	}
	return ""
}

func (x *HycDualReferralApplys) GetCounty() string {
	if x != nil {
		return x.County
	}
	return ""
}

func (x *HycDualReferralApplys) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *HycDualReferralApplys) GetCreatedDate() string {
	if x != nil {
		return x.CreatedDate
	}
	return ""
}

func (x *HycDualReferralApplys) GetDependentsName() string {
	if x != nil {
		return x.DependentsName
	}
	return ""
}

func (x *HycDualReferralApplys) GetDependentsPhone() string {
	if x != nil {
		return x.DependentsPhone
	}
	return ""
}

func (x *HycDualReferralApplys) GetDiagnosis() string {
	if x != nil {
		return x.Diagnosis
	}
	return ""
}

func (x *HycDualReferralApplys) GetDraftDate() string {
	if x != nil {
		return x.DraftDate
	}
	return ""
}

func (x *HycDualReferralApplys) GetFamilyIllHistory() string {
	if x != nil {
		return x.FamilyIllHistory
	}
	return ""
}

func (x *HycDualReferralApplys) GetFirstImpression() string {
	if x != nil {
		return x.FirstImpression
	}
	return ""
}

func (x *HycDualReferralApplys) GetFromType() string {
	if x != nil {
		return x.FromType
	}
	return ""
}

func (x *HycDualReferralApplys) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HycDualReferralApplys) GetInHospitalNum() string {
	if x != nil {
		return x.InHospitalNum
	}
	return ""
}

func (x *HycDualReferralApplys) GetIntoHospitalId() string {
	if x != nil {
		return x.IntoHospitalId
	}
	return ""
}

func (x *HycDualReferralApplys) GetIntoHospitalName() string {
	if x != nil {
		return x.IntoHospitalName
	}
	return ""
}

func (x *HycDualReferralApplys) GetIntodoctorId() string {
	if x != nil {
		return x.IntodoctorId
	}
	return ""
}

func (x *HycDualReferralApplys) GetIntodoctorName() string {
	if x != nil {
		return x.IntodoctorName
	}
	return ""
}

func (x *HycDualReferralApplys) GetIntodoctordepartName() string {
	if x != nil {
		return x.IntodoctordepartName
	}
	return ""
}

func (x *HycDualReferralApplys) GetMainCheckResult() string {
	if x != nil {
		return x.MainCheckResult
	}
	return ""
}

func (x *HycDualReferralApplys) GetMedicalHistory() string {
	if x != nil {
		return x.MedicalHistory
	}
	return ""
}

func (x *HycDualReferralApplys) GetNowMedicalHistory() string {
	if x != nil {
		return x.NowMedicalHistory
	}
	return ""
}

func (x *HycDualReferralApplys) GetPatientAge() string {
	if x != nil {
		return x.PatientAge
	}
	return ""
}

func (x *HycDualReferralApplys) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *HycDualReferralApplys) GetPatientIdCard() string {
	if x != nil {
		return x.PatientIdCard
	}
	return ""
}

func (x *HycDualReferralApplys) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *HycDualReferralApplys) GetPatientPhone() string {
	if x != nil {
		return x.PatientPhone
	}
	return ""
}

func (x *HycDualReferralApplys) GetPatientSex() string {
	if x != nil {
		return x.PatientSex
	}
	return ""
}

func (x *HycDualReferralApplys) GetPatientreportDate() string {
	if x != nil {
		return x.PatientreportDate
	}
	return ""
}

func (x *HycDualReferralApplys) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *HycDualReferralApplys) GetReferralNumber() string {
	if x != nil {
		return x.ReferralNumber
	}
	return ""
}

func (x *HycDualReferralApplys) GetRefuseReason() string {
	if x != nil {
		return x.RefuseReason
	}
	return ""
}

func (x *HycDualReferralApplys) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HycDualReferralApplys) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *HycDualReferralApplys) GetTreatmentProcedure() string {
	if x != nil {
		return x.TreatmentProcedure
	}
	return ""
}

type HycDualReferralApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Advice               string         `protobuf:"bytes,1,opt,name=advice,proto3" json:"advice,omitempty"`
	AllergicHistory      string         `protobuf:"bytes,2,opt,name=allergicHistory,proto3" json:"allergicHistory,omitempty"`
	ApplyDate            string         `protobuf:"bytes,3,opt,name=applyDate,proto3" json:"applyDate,omitempty"`
	ApplyDoctorId        string         `protobuf:"bytes,4,opt,name=applyDoctorId,proto3" json:"applyDoctorId,omitempty"`
	ApplyDoctorName      string         `protobuf:"bytes,5,opt,name=applyDoctorName,proto3" json:"applyDoctorName,omitempty"`
	ApplyHospitalId      string         `protobuf:"bytes,6,opt,name=applyHospitalId,proto3" json:"applyHospitalId,omitempty"`
	ApplyHospitalName    string         `protobuf:"bytes,7,opt,name=applyHospitalName,proto3" json:"applyHospitalName,omitempty"`
	ArrangeintoDate      string         `protobuf:"bytes,8,opt,name=arrangeintoDate,proto3" json:"arrangeintoDate,omitempty"`
	Attachments          []*Attachments `protobuf:"bytes,9,rep,name=attachments,proto3" json:"attachments,omitempty"`
	BackHospitalFlag     int32          `protobuf:"varint,10,opt,name=backHospitalFlag,proto3" json:"backHospitalFlag,omitempty"`
	BirthDate            string         `protobuf:"bytes,11,opt,name=birthDate,proto3" json:"birthDate,omitempty"`
	CancelDate           string         `protobuf:"bytes,12,opt,name=cancelDate,proto3" json:"cancelDate,omitempty"`
	City                 string         `protobuf:"bytes,13,opt,name=city,proto3" json:"city,omitempty"`
	ComDocDepart         string         `protobuf:"bytes,14,opt,name=comDocDepart,proto3" json:"comDocDepart,omitempty"`
	ComDocDepartId       string         `protobuf:"bytes,15,opt,name=comDocDepartId,proto3" json:"comDocDepartId,omitempty"`
	ComDoctorPhone       string         `protobuf:"bytes,16,opt,name=comDoctorPhone,proto3" json:"comDoctorPhone,omitempty"`
	CompetentDoctorName  string         `protobuf:"bytes,17,opt,name=competentDoctorName,proto3" json:"competentDoctorName,omitempty"`
	County               string         `protobuf:"bytes,18,opt,name=county,proto3" json:"county,omitempty"`
	CreatedBy            string         `protobuf:"bytes,19,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedDate          string         `protobuf:"bytes,20,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	DependentsName       string         `protobuf:"bytes,21,opt,name=dependentsName,proto3" json:"dependentsName,omitempty"`
	DependentsPhone      string         `protobuf:"bytes,22,opt,name=dependentsPhone,proto3" json:"dependentsPhone,omitempty"`
	Diagnosis            string         `protobuf:"bytes,23,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	DraftDate            string         `protobuf:"bytes,24,opt,name=draftDate,proto3" json:"draftDate,omitempty"`
	EndDate              string         `protobuf:"bytes,25,opt,name=endDate,proto3" json:"endDate,omitempty"`
	FamilyIllHistory     string         `protobuf:"bytes,26,opt,name=familyIllHistory,proto3" json:"familyIllHistory,omitempty"`
	FirstImpression      string         `protobuf:"bytes,27,opt,name=firstImpression,proto3" json:"firstImpression,omitempty"`
	FromType             string         `protobuf:"bytes,28,opt,name=fromType,proto3" json:"fromType,omitempty"`
	Id                   string         `protobuf:"bytes,29,opt,name=id,proto3" json:"id,omitempty"`
	InHospitalNum        string         `protobuf:"bytes,30,opt,name=inHospitalNum,proto3" json:"inHospitalNum,omitempty"`
	IntoHospitalId       string         `protobuf:"bytes,31,opt,name=intoHospitalId,proto3" json:"intoHospitalId,omitempty"`
	IntoHospitalName     string         `protobuf:"bytes,32,opt,name=intoHospitalName,proto3" json:"intoHospitalName,omitempty"`
	IntodoctorId         string         `protobuf:"bytes,33,opt,name=intodoctorId,proto3" json:"intodoctorId,omitempty"`
	IntodoctorName       string         `protobuf:"bytes,34,opt,name=intodoctorName,proto3" json:"intodoctorName,omitempty"`
	IntodoctordepartName string         `protobuf:"bytes,35,opt,name=intodoctordepartName,proto3" json:"intodoctordepartName,omitempty"`
	MainCheckResult      string         `protobuf:"bytes,36,opt,name=mainCheckResult,proto3" json:"mainCheckResult,omitempty"`
	MedicalHistory       string         `protobuf:"bytes,37,opt,name=medicalHistory,proto3" json:"medicalHistory,omitempty"`
	NowMedicalHistory    string         `protobuf:"bytes,38,opt,name=nowMedicalHistory,proto3" json:"nowMedicalHistory,omitempty"`
	PatientAge           string         `protobuf:"bytes,39,opt,name=patientAge,proto3" json:"patientAge,omitempty"`
	PatientId            string         `protobuf:"bytes,40,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdCard        string         `protobuf:"bytes,41,opt,name=patientIdCard,proto3" json:"patientIdCard,omitempty"`
	PatientName          string         `protobuf:"bytes,42,opt,name=patientName,proto3" json:"patientName,omitempty"`
	PatientPhone         string         `protobuf:"bytes,43,opt,name=patientPhone,proto3" json:"patientPhone,omitempty"`
	PatientSex           string         `protobuf:"bytes,44,opt,name=patientSex,proto3" json:"patientSex,omitempty"`
	PatientreportDate    string         `protobuf:"bytes,45,opt,name=patientreportDate,proto3" json:"patientreportDate,omitempty"`
	Province             string         `protobuf:"bytes,46,opt,name=province,proto3" json:"province,omitempty"`
	ReferralNumber       string         `protobuf:"bytes,47,opt,name=referralNumber,proto3" json:"referralNumber,omitempty"`
	RefuseReason         string         `protobuf:"bytes,48,opt,name=refuseReason,proto3" json:"refuseReason,omitempty"`
	StartDate            string         `protobuf:"bytes,49,opt,name=startDate,proto3" json:"startDate,omitempty"`
	Status               int32          `protobuf:"varint,50,opt,name=status,proto3" json:"status,omitempty"`
	Street               string         `protobuf:"bytes,51,opt,name=street,proto3" json:"street,omitempty"`
	TreatmentProcedure   string         `protobuf:"bytes,52,opt,name=treatmentProcedure,proto3" json:"treatmentProcedure,omitempty"`
	UpdatedBy            string         `protobuf:"bytes,53,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	UpdatedDate          string         `protobuf:"bytes,54,opt,name=updatedDate,proto3" json:"updatedDate,omitempty"`
}

func (x *HycDualReferralApply) Reset() {
	*x = HycDualReferralApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HycDualReferralApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HycDualReferralApply) ProtoMessage() {}

func (x *HycDualReferralApply) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HycDualReferralApply.ProtoReflect.Descriptor instead.
func (*HycDualReferralApply) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{14}
}

func (x *HycDualReferralApply) GetAdvice() string {
	if x != nil {
		return x.Advice
	}
	return ""
}

func (x *HycDualReferralApply) GetAllergicHistory() string {
	if x != nil {
		return x.AllergicHistory
	}
	return ""
}

func (x *HycDualReferralApply) GetApplyDate() string {
	if x != nil {
		return x.ApplyDate
	}
	return ""
}

func (x *HycDualReferralApply) GetApplyDoctorId() string {
	if x != nil {
		return x.ApplyDoctorId
	}
	return ""
}

func (x *HycDualReferralApply) GetApplyDoctorName() string {
	if x != nil {
		return x.ApplyDoctorName
	}
	return ""
}

func (x *HycDualReferralApply) GetApplyHospitalId() string {
	if x != nil {
		return x.ApplyHospitalId
	}
	return ""
}

func (x *HycDualReferralApply) GetApplyHospitalName() string {
	if x != nil {
		return x.ApplyHospitalName
	}
	return ""
}

func (x *HycDualReferralApply) GetArrangeintoDate() string {
	if x != nil {
		return x.ArrangeintoDate
	}
	return ""
}

func (x *HycDualReferralApply) GetAttachments() []*Attachments {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *HycDualReferralApply) GetBackHospitalFlag() int32 {
	if x != nil {
		return x.BackHospitalFlag
	}
	return 0
}

func (x *HycDualReferralApply) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *HycDualReferralApply) GetCancelDate() string {
	if x != nil {
		return x.CancelDate
	}
	return ""
}

func (x *HycDualReferralApply) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *HycDualReferralApply) GetComDocDepart() string {
	if x != nil {
		return x.ComDocDepart
	}
	return ""
}

func (x *HycDualReferralApply) GetComDocDepartId() string {
	if x != nil {
		return x.ComDocDepartId
	}
	return ""
}

func (x *HycDualReferralApply) GetComDoctorPhone() string {
	if x != nil {
		return x.ComDoctorPhone
	}
	return ""
}

func (x *HycDualReferralApply) GetCompetentDoctorName() string {
	if x != nil {
		return x.CompetentDoctorName
	}
	return ""
}

func (x *HycDualReferralApply) GetCounty() string {
	if x != nil {
		return x.County
	}
	return ""
}

func (x *HycDualReferralApply) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *HycDualReferralApply) GetCreatedDate() string {
	if x != nil {
		return x.CreatedDate
	}
	return ""
}

func (x *HycDualReferralApply) GetDependentsName() string {
	if x != nil {
		return x.DependentsName
	}
	return ""
}

func (x *HycDualReferralApply) GetDependentsPhone() string {
	if x != nil {
		return x.DependentsPhone
	}
	return ""
}

func (x *HycDualReferralApply) GetDiagnosis() string {
	if x != nil {
		return x.Diagnosis
	}
	return ""
}

func (x *HycDualReferralApply) GetDraftDate() string {
	if x != nil {
		return x.DraftDate
	}
	return ""
}

func (x *HycDualReferralApply) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *HycDualReferralApply) GetFamilyIllHistory() string {
	if x != nil {
		return x.FamilyIllHistory
	}
	return ""
}

func (x *HycDualReferralApply) GetFirstImpression() string {
	if x != nil {
		return x.FirstImpression
	}
	return ""
}

func (x *HycDualReferralApply) GetFromType() string {
	if x != nil {
		return x.FromType
	}
	return ""
}

func (x *HycDualReferralApply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HycDualReferralApply) GetInHospitalNum() string {
	if x != nil {
		return x.InHospitalNum
	}
	return ""
}

func (x *HycDualReferralApply) GetIntoHospitalId() string {
	if x != nil {
		return x.IntoHospitalId
	}
	return ""
}

func (x *HycDualReferralApply) GetIntoHospitalName() string {
	if x != nil {
		return x.IntoHospitalName
	}
	return ""
}

func (x *HycDualReferralApply) GetIntodoctorId() string {
	if x != nil {
		return x.IntodoctorId
	}
	return ""
}

func (x *HycDualReferralApply) GetIntodoctorName() string {
	if x != nil {
		return x.IntodoctorName
	}
	return ""
}

func (x *HycDualReferralApply) GetIntodoctordepartName() string {
	if x != nil {
		return x.IntodoctordepartName
	}
	return ""
}

func (x *HycDualReferralApply) GetMainCheckResult() string {
	if x != nil {
		return x.MainCheckResult
	}
	return ""
}

func (x *HycDualReferralApply) GetMedicalHistory() string {
	if x != nil {
		return x.MedicalHistory
	}
	return ""
}

func (x *HycDualReferralApply) GetNowMedicalHistory() string {
	if x != nil {
		return x.NowMedicalHistory
	}
	return ""
}

func (x *HycDualReferralApply) GetPatientAge() string {
	if x != nil {
		return x.PatientAge
	}
	return ""
}

func (x *HycDualReferralApply) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *HycDualReferralApply) GetPatientIdCard() string {
	if x != nil {
		return x.PatientIdCard
	}
	return ""
}

func (x *HycDualReferralApply) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *HycDualReferralApply) GetPatientPhone() string {
	if x != nil {
		return x.PatientPhone
	}
	return ""
}

func (x *HycDualReferralApply) GetPatientSex() string {
	if x != nil {
		return x.PatientSex
	}
	return ""
}

func (x *HycDualReferralApply) GetPatientreportDate() string {
	if x != nil {
		return x.PatientreportDate
	}
	return ""
}

func (x *HycDualReferralApply) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *HycDualReferralApply) GetReferralNumber() string {
	if x != nil {
		return x.ReferralNumber
	}
	return ""
}

func (x *HycDualReferralApply) GetRefuseReason() string {
	if x != nil {
		return x.RefuseReason
	}
	return ""
}

func (x *HycDualReferralApply) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *HycDualReferralApply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HycDualReferralApply) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *HycDualReferralApply) GetTreatmentProcedure() string {
	if x != nil {
		return x.TreatmentProcedure
	}
	return ""
}

func (x *HycDualReferralApply) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *HycDualReferralApply) GetUpdatedDate() string {
	if x != nil {
		return x.UpdatedDate
	}
	return ""
}

type TsDoctorsVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreasOfExpertise string `protobuf:"bytes,1,opt,name=areasOfExpertise,proto3" json:"areasOfExpertise,omitempty"`
	ContactPhone     string `protobuf:"bytes,2,opt,name=contactPhone,proto3" json:"contactPhone,omitempty"`
	CreatedBy        string `protobuf:"bytes,3,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	DoctorLevel      string `protobuf:"bytes,4,opt,name=doctorLevel,proto3" json:"doctorLevel,omitempty"`
	DoctorTitle      string `protobuf:"bytes,5,opt,name=doctorTitle,proto3" json:"doctorTitle,omitempty"`
	HospitalDeptId   string `protobuf:"bytes,6,opt,name=hospitalDeptId,proto3" json:"hospitalDeptId,omitempty"`
	HospitalDeptName string `protobuf:"bytes,7,opt,name=hospitalDeptName,proto3" json:"hospitalDeptName,omitempty"`
	HospitalId       string `protobuf:"bytes,8,opt,name=hospitalId,proto3" json:"hospitalId,omitempty"`
	HospitalName     string `protobuf:"bytes,9,opt,name=hospitalName,proto3" json:"hospitalName,omitempty"`
	Id               string `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	JobNumber        string `protobuf:"bytes,11,opt,name=jobNumber,proto3" json:"jobNumber,omitempty"`
	Name             string `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	SelfIntroduction string `protobuf:"bytes,13,opt,name=selfIntroduction,proto3" json:"selfIntroduction,omitempty"`
	TelePhone        string `protobuf:"bytes,14,opt,name=telePhone,proto3" json:"telePhone,omitempty"`
}

func (x *TsDoctorsVo) Reset() {
	*x = TsDoctorsVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TsDoctorsVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TsDoctorsVo) ProtoMessage() {}

func (x *TsDoctorsVo) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TsDoctorsVo.ProtoReflect.Descriptor instead.
func (*TsDoctorsVo) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{15}
}

func (x *TsDoctorsVo) GetAreasOfExpertise() string {
	if x != nil {
		return x.AreasOfExpertise
	}
	return ""
}

func (x *TsDoctorsVo) GetContactPhone() string {
	if x != nil {
		return x.ContactPhone
	}
	return ""
}

func (x *TsDoctorsVo) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *TsDoctorsVo) GetDoctorLevel() string {
	if x != nil {
		return x.DoctorLevel
	}
	return ""
}

func (x *TsDoctorsVo) GetDoctorTitle() string {
	if x != nil {
		return x.DoctorTitle
	}
	return ""
}

func (x *TsDoctorsVo) GetHospitalDeptId() string {
	if x != nil {
		return x.HospitalDeptId
	}
	return ""
}

func (x *TsDoctorsVo) GetHospitalDeptName() string {
	if x != nil {
		return x.HospitalDeptName
	}
	return ""
}

func (x *TsDoctorsVo) GetHospitalId() string {
	if x != nil {
		return x.HospitalId
	}
	return ""
}

func (x *TsDoctorsVo) GetHospitalName() string {
	if x != nil {
		return x.HospitalName
	}
	return ""
}

func (x *TsDoctorsVo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TsDoctorsVo) GetJobNumber() string {
	if x != nil {
		return x.JobNumber
	}
	return ""
}

func (x *TsDoctorsVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TsDoctorsVo) GetSelfIntroduction() string {
	if x != nil {
		return x.SelfIntroduction
	}
	return ""
}

func (x *TsDoctorsVo) GetTelePhone() string {
	if x != nil {
		return x.TelePhone
	}
	return ""
}

type AddSystemUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CitizenNo   string `protobuf:"bytes,1,opt,name=citizenNo,proto3" json:"citizenNo,omitempty"`
	CreateBy    string `protobuf:"bytes,2,opt,name=createBy,proto3" json:"createBy,omitempty"`
	CreateName  string `protobuf:"bytes,3,opt,name=createName,proto3" json:"createName,omitempty"`
	Email       string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	EmpNo       string `protobuf:"bytes,5,opt,name=empNo,proto3" json:"empNo,omitempty"`
	Id          string `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	Mobilephone string `protobuf:"bytes,7,opt,name=mobilephone,proto3" json:"mobilephone,omitempty"`
	OfficePhone string `protobuf:"bytes,8,opt,name=officePhone,proto3" json:"officePhone,omitempty"`
	OrgId       string `protobuf:"bytes,9,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Password    string `protobuf:"bytes,10,opt,name=password,proto3" json:"password,omitempty"`
	Profile     string `protobuf:"bytes,11,opt,name=profile,proto3" json:"profile,omitempty"`
	Realname    string `protobuf:"bytes,12,opt,name=realname,proto3" json:"realname,omitempty"`
	Sex         string `protobuf:"bytes,13,opt,name=sex,proto3" json:"sex,omitempty"`
	WeChat      string `protobuf:"bytes,14,opt,name=weChat,proto3" json:"weChat,omitempty"`
}

func (x *AddSystemUser) Reset() {
	*x = AddSystemUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSystemUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSystemUser) ProtoMessage() {}

func (x *AddSystemUser) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSystemUser.ProtoReflect.Descriptor instead.
func (*AddSystemUser) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{16}
}

func (x *AddSystemUser) GetCitizenNo() string {
	if x != nil {
		return x.CitizenNo
	}
	return ""
}

func (x *AddSystemUser) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *AddSystemUser) GetCreateName() string {
	if x != nil {
		return x.CreateName
	}
	return ""
}

func (x *AddSystemUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AddSystemUser) GetEmpNo() string {
	if x != nil {
		return x.EmpNo
	}
	return ""
}

func (x *AddSystemUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddSystemUser) GetMobilephone() string {
	if x != nil {
		return x.Mobilephone
	}
	return ""
}

func (x *AddSystemUser) GetOfficePhone() string {
	if x != nil {
		return x.OfficePhone
	}
	return ""
}

func (x *AddSystemUser) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *AddSystemUser) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddSystemUser) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *AddSystemUser) GetRealname() string {
	if x != nil {
		return x.Realname
	}
	return ""
}

func (x *AddSystemUser) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *AddSystemUser) GetWeChat() string {
	if x != nil {
		return x.WeChat
	}
	return ""
}

type HycOutpatientApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccompanyingDoctor          string         `protobuf:"bytes,1,opt,name=accompanyingDoctor,proto3" json:"accompanyingDoctor,omitempty"`                    //陪诊医生
	Age                         int32          `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`                                                 //年龄
	ApplyDate                   string         `protobuf:"bytes,3,opt,name=applyDate,proto3" json:"applyDate,omitempty"`                                      //申请日期
	ApplyDoctorDepartName       string         `protobuf:"bytes,4,opt,name=applyDoctorDepartName,proto3" json:"applyDoctorDepartName,omitempty"`              //基层门诊预约医生科室
	ApplyDoctorHospitalName     string         `protobuf:"bytes,5,opt,name=applyDoctorHospitalName,proto3" json:"applyDoctorHospitalName,omitempty"`          //基层门诊预约医生医院
	ApplyDoctorId               string         `protobuf:"bytes,6,opt,name=applyDoctorId,proto3" json:"applyDoctorId,omitempty"`                              //基层门诊预约医生ID（关联t_s_user表主键）
	ApplyDoctorName             string         `protobuf:"bytes,7,opt,name=applyDoctorName,proto3" json:"applyDoctorName,omitempty"`                          //基层门诊预约医生名称
	Applyarray                  int32          `protobuf:"varint,8,opt,name=applyarray,proto3" json:"applyarray,omitempty"`                                   //报到队列排序
	ArrangeDoctorDepartmentId   string         `protobuf:"bytes,9,opt,name=arrangeDoctorDepartmentId,proto3" json:"arrangeDoctorDepartmentId,omitempty"`      //门诊医生科室id
	ArrangeDoctorDepartmentName string         `protobuf:"bytes,10,opt,name=arrangeDoctorDepartmentName,proto3" json:"arrangeDoctorDepartmentName,omitempty"` //门诊医生科室名称
	ArrangeDoctorId             string         `protobuf:"bytes,11,opt,name=arrangeDoctorId,proto3" json:"arrangeDoctorId,omitempty"`                         //门诊医生id
	ArrangeDoctorName           string         `protobuf:"bytes,12,opt,name=arrangeDoctorName,proto3" json:"arrangeDoctorName,omitempty"`                     //门诊医生姓名
	ArrangeTimeEnd              string         `protobuf:"bytes,13,opt,name=arrangeTimeEnd,proto3" json:"arrangeTimeEnd,omitempty"`                           //门诊结束时间
	ArrangeTimeStart            string         `protobuf:"bytes,14,opt,name=arrangeTimeStart,proto3" json:"arrangeTimeStart,omitempty"`                       //门诊开始时间
	ArrangeType                 string         `protobuf:"bytes,15,opt,name=arrangeType,proto3" json:"arrangeType,omitempty"`                                 //门诊时间段
	AttachmentPath              string         `protobuf:"bytes,16,opt,name=attachmentPath,proto3" json:"attachmentPath,omitempty"`                           //附件地址
	Attachments                 []*Attachments `protobuf:"bytes,17,rep,name=attachments,proto3" json:"attachments,omitempty"`                                 //附件列表
	BirthDate                   string         `protobuf:"bytes,18,opt,name=birthDate,proto3" json:"birthDate,omitempty"`                                     //出生日期
	ChiefComplaint              string         `protobuf:"bytes,19,opt,name=chiefComplaint,proto3" json:"chiefComplaint,omitempty"`                           //主诉
	CreateName                  string         `protobuf:"bytes,20,opt,name=createName,proto3" json:"createName,omitempty"`                                   //创建人名称
	CreatedBy                   string         `protobuf:"bytes,21,opt,name=createdBy,proto3" json:"createdBy,omitempty"`                                     //创建人ID（关联t_s_user表主键）
	CreatedDate                 string         `protobuf:"bytes,22,opt,name=createdDate,proto3" json:"createdDate,omitempty"`                                 //创建日期
	Diagnosis                   string         `protobuf:"bytes,23,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`                                     //诊断
	DiagnosisCode               string         `protobuf:"bytes,24,opt,name=diagnosisCode,proto3" json:"diagnosisCode,omitempty"`                             //诊断代码
	DoctorPhone                 string         `protobuf:"bytes,25,opt,name=doctorPhone,proto3" json:"doctorPhone,omitempty"`                                 //医生电话
	ExamineSuggestion           string         `protobuf:"bytes,26,opt,name=examineSuggestion,proto3" json:"examineSuggestion,omitempty"`                     //检查建议
	FamilyPhone                 string         `protobuf:"bytes,27,opt,name=familyPhone,proto3" json:"familyPhone,omitempty"`                                 //家属电话
	FirstVisit                  int32          `protobuf:"varint,28,opt,name=firstVisit,proto3" json:"firstVisit,omitempty"`                                  //初复诊（1 初诊、2 复诊）
	FkHospitalId                string         `protobuf:"bytes,29,opt,name=fkHospitalId,proto3" json:"fkHospitalId,omitempty"`                               //医院ID（关联t_s_depart表主键）
	Gender                      int32          `protobuf:"varint,30,opt,name=gender,proto3" json:"gender,omitempty"`                                          //性别（0 男、1 女 2其他）
	HospitalName                string         `protobuf:"bytes,31,opt,name=hospitalName,proto3" json:"hospitalName,omitempty"`                               //医院名称
	Id                          string         `protobuf:"bytes,32,opt,name=id,proto3" json:"id,omitempty"`
	IdNumber                    string         `protobuf:"bytes,33,opt,name=idNumber,proto3" json:"idNumber,omitempty"`                         //身份证号
	InspectionSuggestion        string         `protobuf:"bytes,34,opt,name=inspectionSuggestion,proto3" json:"inspectionSuggestion,omitempty"` //检验建议
	MedicalHistory              string         `protobuf:"bytes,35,opt,name=medicalHistory,proto3" json:"medicalHistory,omitempty"`             //病史
	MedicationAdvice            string         `protobuf:"bytes,36,opt,name=medicationAdvice,proto3" json:"medicationAdvice,omitempty"`         //用药建议
	OtherSuggestion             string         `protobuf:"bytes,37,opt,name=otherSuggestion,proto3" json:"otherSuggestion,omitempty"`           //其他建议
	OutpatientExpenses          float32        `protobuf:"fixed32,38,opt,name=outpatientExpenses,proto3" json:"outpatientExpenses,omitempty"`   //门诊费用
	PatientId                   string         `protobuf:"bytes,39,opt,name=patientId,proto3" json:"patientId,omitempty"`                       //病人号
	PatientName                 string         `protobuf:"bytes,40,opt,name=patientName,proto3" json:"patientName,omitempty"`                   //姓名
	PatientPhone                string         `protobuf:"bytes,41,opt,name=patientPhone,proto3" json:"patientPhone,omitempty"`                 //患者电话
	QueryEndDate                string         `protobuf:"bytes,42,opt,name=queryEndDate,proto3" json:"queryEndDate,omitempty"`                 //远程门诊日期查询终点
	QueryStartDate              string         `protobuf:"bytes,43,opt,name=queryStartDate,proto3" json:"queryStartDate,omitempty"`             //远程门诊日期查询起点
	RemoteInspection            string         `protobuf:"bytes,44,opt,name=remoteInspection,proto3" json:"remoteInspection,omitempty"`         //远程查体
	ReservationNumber           string         `protobuf:"bytes,45,opt,name=reservationNumber,proto3" json:"reservationNumber,omitempty"`       //门诊预约号
	SerialNumber                string         `protobuf:"bytes,46,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`                 //门诊编号
	StartDate                   string         `protobuf:"bytes,47,opt,name=startDate,proto3" json:"startDate,omitempty"`                       //门诊开始日期
	Status                      int32          `protobuf:"varint,48,opt,name=status,proto3" json:"status,omitempty"`                            //状态（0 草稿、1 已取消、2 已确认（已预约）、3 已报到、4
	// 已叫号、5 已结论、6 已过期、7 开始随访、8 随访中、9
	// 已完成）
	Time int32 `protobuf:"varint,49,opt,name=time,proto3" json:"time,omitempty"` //安排时间（1 上午、2 下午）
}

func (x *HycOutpatientApply) Reset() {
	*x = HycOutpatientApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HycOutpatientApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HycOutpatientApply) ProtoMessage() {}

func (x *HycOutpatientApply) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HycOutpatientApply.ProtoReflect.Descriptor instead.
func (*HycOutpatientApply) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{17}
}

func (x *HycOutpatientApply) GetAccompanyingDoctor() string {
	if x != nil {
		return x.AccompanyingDoctor
	}
	return ""
}

func (x *HycOutpatientApply) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *HycOutpatientApply) GetApplyDate() string {
	if x != nil {
		return x.ApplyDate
	}
	return ""
}

func (x *HycOutpatientApply) GetApplyDoctorDepartName() string {
	if x != nil {
		return x.ApplyDoctorDepartName
	}
	return ""
}

func (x *HycOutpatientApply) GetApplyDoctorHospitalName() string {
	if x != nil {
		return x.ApplyDoctorHospitalName
	}
	return ""
}

func (x *HycOutpatientApply) GetApplyDoctorId() string {
	if x != nil {
		return x.ApplyDoctorId
	}
	return ""
}

func (x *HycOutpatientApply) GetApplyDoctorName() string {
	if x != nil {
		return x.ApplyDoctorName
	}
	return ""
}

func (x *HycOutpatientApply) GetApplyarray() int32 {
	if x != nil {
		return x.Applyarray
	}
	return 0
}

func (x *HycOutpatientApply) GetArrangeDoctorDepartmentId() string {
	if x != nil {
		return x.ArrangeDoctorDepartmentId
	}
	return ""
}

func (x *HycOutpatientApply) GetArrangeDoctorDepartmentName() string {
	if x != nil {
		return x.ArrangeDoctorDepartmentName
	}
	return ""
}

func (x *HycOutpatientApply) GetArrangeDoctorId() string {
	if x != nil {
		return x.ArrangeDoctorId
	}
	return ""
}

func (x *HycOutpatientApply) GetArrangeDoctorName() string {
	if x != nil {
		return x.ArrangeDoctorName
	}
	return ""
}

func (x *HycOutpatientApply) GetArrangeTimeEnd() string {
	if x != nil {
		return x.ArrangeTimeEnd
	}
	return ""
}

func (x *HycOutpatientApply) GetArrangeTimeStart() string {
	if x != nil {
		return x.ArrangeTimeStart
	}
	return ""
}

func (x *HycOutpatientApply) GetArrangeType() string {
	if x != nil {
		return x.ArrangeType
	}
	return ""
}

func (x *HycOutpatientApply) GetAttachmentPath() string {
	if x != nil {
		return x.AttachmentPath
	}
	return ""
}

func (x *HycOutpatientApply) GetAttachments() []*Attachments {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *HycOutpatientApply) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *HycOutpatientApply) GetChiefComplaint() string {
	if x != nil {
		return x.ChiefComplaint
	}
	return ""
}

func (x *HycOutpatientApply) GetCreateName() string {
	if x != nil {
		return x.CreateName
	}
	return ""
}

func (x *HycOutpatientApply) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *HycOutpatientApply) GetCreatedDate() string {
	if x != nil {
		return x.CreatedDate
	}
	return ""
}

func (x *HycOutpatientApply) GetDiagnosis() string {
	if x != nil {
		return x.Diagnosis
	}
	return ""
}

func (x *HycOutpatientApply) GetDiagnosisCode() string {
	if x != nil {
		return x.DiagnosisCode
	}
	return ""
}

func (x *HycOutpatientApply) GetDoctorPhone() string {
	if x != nil {
		return x.DoctorPhone
	}
	return ""
}

func (x *HycOutpatientApply) GetExamineSuggestion() string {
	if x != nil {
		return x.ExamineSuggestion
	}
	return ""
}

func (x *HycOutpatientApply) GetFamilyPhone() string {
	if x != nil {
		return x.FamilyPhone
	}
	return ""
}

func (x *HycOutpatientApply) GetFirstVisit() int32 {
	if x != nil {
		return x.FirstVisit
	}
	return 0
}

func (x *HycOutpatientApply) GetFkHospitalId() string {
	if x != nil {
		return x.FkHospitalId
	}
	return ""
}

func (x *HycOutpatientApply) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *HycOutpatientApply) GetHospitalName() string {
	if x != nil {
		return x.HospitalName
	}
	return ""
}

func (x *HycOutpatientApply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HycOutpatientApply) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *HycOutpatientApply) GetInspectionSuggestion() string {
	if x != nil {
		return x.InspectionSuggestion
	}
	return ""
}

func (x *HycOutpatientApply) GetMedicalHistory() string {
	if x != nil {
		return x.MedicalHistory
	}
	return ""
}

func (x *HycOutpatientApply) GetMedicationAdvice() string {
	if x != nil {
		return x.MedicationAdvice
	}
	return ""
}

func (x *HycOutpatientApply) GetOtherSuggestion() string {
	if x != nil {
		return x.OtherSuggestion
	}
	return ""
}

func (x *HycOutpatientApply) GetOutpatientExpenses() float32 {
	if x != nil {
		return x.OutpatientExpenses
	}
	return 0
}

func (x *HycOutpatientApply) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *HycOutpatientApply) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *HycOutpatientApply) GetPatientPhone() string {
	if x != nil {
		return x.PatientPhone
	}
	return ""
}

func (x *HycOutpatientApply) GetQueryEndDate() string {
	if x != nil {
		return x.QueryEndDate
	}
	return ""
}

func (x *HycOutpatientApply) GetQueryStartDate() string {
	if x != nil {
		return x.QueryStartDate
	}
	return ""
}

func (x *HycOutpatientApply) GetRemoteInspection() string {
	if x != nil {
		return x.RemoteInspection
	}
	return ""
}

func (x *HycOutpatientApply) GetReservationNumber() string {
	if x != nil {
		return x.ReservationNumber
	}
	return ""
}

func (x *HycOutpatientApply) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *HycOutpatientApply) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *HycOutpatientApply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HycOutpatientApply) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type HycOutpatientApplysReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime     string `protobuf:"bytes,1,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Number      string `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	PatientId   string `protobuf:"bytes,3,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientName string `protobuf:"bytes,4,opt,name=patientName,proto3" json:"patientName,omitempty"`
	StartTime   string `protobuf:"bytes,5,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *HycOutpatientApplysReq) Reset() {
	*x = HycOutpatientApplysReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HycOutpatientApplysReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HycOutpatientApplysReq) ProtoMessage() {}

func (x *HycOutpatientApplysReq) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HycOutpatientApplysReq.ProtoReflect.Descriptor instead.
func (*HycOutpatientApplysReq) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{18}
}

func (x *HycOutpatientApplysReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *HycOutpatientApplysReq) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *HycOutpatientApplysReq) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *HycOutpatientApplysReq) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *HycOutpatientApplysReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch bool             `protobuf:"varint,2,opt,name=switch,proto3" json:"switch,omitempty"`
	Jobs   []*Job_JobConfig `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{19}
}

func (x *Job) GetSwitch() bool {
	if x != nil {
		return x.Switch
	}
	return false
}

func (x *Job) GetJobs() []*Job_JobConfig {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type HycConsultationConclusions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationDoctorDepartment string `protobuf:"bytes,1,opt,name=applicationDoctorDepartment,proto3" json:"applicationDoctorDepartment,omitempty"`
	ApplicationDoctorId         string `protobuf:"bytes,2,opt,name=applicationDoctorId,proto3" json:"applicationDoctorId,omitempty"`
	ApplicationDoctorName       string `protobuf:"bytes,3,opt,name=applicationDoctorName,proto3" json:"applicationDoctorName,omitempty"`
	ApplicationId               string `protobuf:"bytes,4,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	Conclusion                  string `protobuf:"bytes,5,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	ConclusionButtonFlag        string `protobuf:"bytes,6,opt,name=conclusionButtonFlag,proto3" json:"conclusionButtonFlag,omitempty"`
	CreatedBy                   string `protobuf:"bytes,7,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedDate                 string `protobuf:"bytes,8,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	DelFlag                     int32  `protobuf:"varint,9,opt,name=delFlag,proto3" json:"delFlag,omitempty"`
	GroupTag                    int32  `protobuf:"varint,10,opt,name=groupTag,proto3" json:"groupTag,omitempty"`
	Id                          string `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	IsTransfer                  int32  `protobuf:"varint,12,opt,name=isTransfer,proto3" json:"isTransfer,omitempty"`
	Suggestion                  string `protobuf:"bytes,13,opt,name=suggestion,proto3" json:"suggestion,omitempty"`
	SysCompanyCode              string `protobuf:"bytes,14,opt,name=sysCompanyCode,proto3" json:"sysCompanyCode,omitempty"`
	SysOrgCode                  string `protobuf:"bytes,15,opt,name=sysOrgCode,proto3" json:"sysOrgCode,omitempty"`
}

func (x *HycConsultationConclusions) Reset() {
	*x = HycConsultationConclusions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HycConsultationConclusions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HycConsultationConclusions) ProtoMessage() {}

func (x *HycConsultationConclusions) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HycConsultationConclusions.ProtoReflect.Descriptor instead.
func (*HycConsultationConclusions) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{20}
}

func (x *HycConsultationConclusions) GetApplicationDoctorDepartment() string {
	if x != nil {
		return x.ApplicationDoctorDepartment
	}
	return ""
}

func (x *HycConsultationConclusions) GetApplicationDoctorId() string {
	if x != nil {
		return x.ApplicationDoctorId
	}
	return ""
}

func (x *HycConsultationConclusions) GetApplicationDoctorName() string {
	if x != nil {
		return x.ApplicationDoctorName
	}
	return ""
}

func (x *HycConsultationConclusions) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *HycConsultationConclusions) GetConclusion() string {
	if x != nil {
		return x.Conclusion
	}
	return ""
}

func (x *HycConsultationConclusions) GetConclusionButtonFlag() string {
	if x != nil {
		return x.ConclusionButtonFlag
	}
	return ""
}

func (x *HycConsultationConclusions) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *HycConsultationConclusions) GetCreatedDate() string {
	if x != nil {
		return x.CreatedDate
	}
	return ""
}

func (x *HycConsultationConclusions) GetDelFlag() int32 {
	if x != nil {
		return x.DelFlag
	}
	return 0
}

func (x *HycConsultationConclusions) GetGroupTag() int32 {
	if x != nil {
		return x.GroupTag
	}
	return 0
}

func (x *HycConsultationConclusions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HycConsultationConclusions) GetIsTransfer() int32 {
	if x != nil {
		return x.IsTransfer
	}
	return 0
}

func (x *HycConsultationConclusions) GetSuggestion() string {
	if x != nil {
		return x.Suggestion
	}
	return ""
}

func (x *HycConsultationConclusions) GetSysCompanyCode() string {
	if x != nil {
		return x.SysCompanyCode
	}
	return ""
}

func (x *HycConsultationConclusions) GetSysOrgCode() string {
	if x != nil {
		return x.SysOrgCode
	}
	return ""
}

type Server_HTTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string               `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr    string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *Server_HTTP) Reset() {
	*x = Server_HTTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server_HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_HTTP) ProtoMessage() {}

func (x *Server_HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_HTTP.ProtoReflect.Descriptor instead.
func (*Server_HTTP) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Server_HTTP) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_HTTP) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_HTTP) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type Server_GRPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string               `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr    string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *Server_GRPC) Reset() {
	*x = Server_GRPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server_GRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_GRPC) ProtoMessage() {}

func (x *Server_GRPC) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_GRPC.ProtoReflect.Descriptor instead.
func (*Server_GRPC) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Server_GRPC) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_GRPC) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_GRPC) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type Server_JWT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Server_JWT) Reset() {
	*x = Server_JWT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server_JWT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_JWT) ProtoMessage() {}

func (x *Server_JWT) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_JWT.ProtoReflect.Descriptor instead.
func (*Server_JWT) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Server_JWT) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type Data_Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Driver string `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *Data_Database) Reset() {
	*x = Data_Database{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data_Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Database) ProtoMessage() {}

func (x *Data_Database) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Database.ProtoReflect.Descriptor instead.
func (*Data_Database) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Data_Database) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Data_Database) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type Data_Redis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network      string               `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr         string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	ReadTimeout  *durationpb.Duration `protobuf:"bytes,3,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`
	WriteTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`
}

func (x *Data_Redis) Reset() {
	*x = Data_Redis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data_Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Redis) ProtoMessage() {}

func (x *Data_Redis) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Redis.ProtoReflect.Descriptor instead.
func (*Data_Redis) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Data_Redis) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Data_Redis) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Data_Redis) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Data_Redis) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

type Data_FileService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnZipPath string `protobuf:"bytes,1,opt,name=unZipPath,proto3" json:"unZipPath,omitempty"`
}

func (x *Data_FileService) Reset() {
	*x = Data_FileService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data_FileService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_FileService) ProtoMessage() {}

func (x *Data_FileService) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_FileService.ProtoReflect.Descriptor instead.
func (*Data_FileService) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Data_FileService) GetUnZipPath() string {
	if x != nil {
		return x.UnZipPath
	}
	return ""
}

type Job_JobConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Schedule string `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Switch   bool   `protobuf:"varint,3,opt,name=switch,proto3" json:"switch,omitempty"`
}

func (x *Job_JobConfig) Reset() {
	*x = Job_JobConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_conf_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_JobConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_JobConfig) ProtoMessage() {}

func (x *Job_JobConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_JobConfig.ProtoReflect.Descriptor instead.
func (*Job_JobConfig) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{19, 0}
}

func (x *Job_JobConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job_JobConfig) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *Job_JobConfig) GetSwitch() bool {
	if x != nil {
		return x.Switch
	}
	return false
}

var File_conf_conf_proto protoreflect.FileDescriptor

var file_conf_conf_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a,
	0x09, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x72, 0x61,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb8, 0x01, 0x0a,
	0x06, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x53, 0x53,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x53, 0x53, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x73, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x73, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xae, 0x03, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12,
	0x2b, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12, 0x28, 0x0a, 0x03,
	0x6a, 0x77, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x72, 0x61, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x57,
	0x54, 0x52, 0x03, 0x6a, 0x77, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x68, 0x75, 0x69, 0x79, 0x69, 0x6b,
	0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x72, 0x61, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x59, 0x4b, 0x52, 0x09, 0x68, 0x75, 0x69, 0x79,
	0x69, 0x6b, 0x61, 0x6e, 0x67, 0x1a, 0x69, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x1a, 0x69, 0x0a, 0x04, 0x47, 0x52, 0x50, 0x43, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x1b, 0x0a, 0x03, 0x4a,
	0x57, 0x54, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x89, 0x05, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52,
	0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4a, 0x57, 0x54, 0x52, 0x03, 0x6a, 0x77, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x69, 0x6e,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x72, 0x61, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x72, 0x61, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x72, 0x61, 0x63, 0x68, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x72, 0x61,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x3a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x1a, 0xb3, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x2b, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x5a, 0x69, 0x70, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x5a, 0x69, 0x70,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x1d, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x22, 0x2c, 0x0a, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x2c, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x61, 0x63, 0x68, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x74, 0x68, 0x22,
	0xc8, 0x01, 0x0a, 0x03, 0x48, 0x59, 0x4b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xe5, 0x17, 0x0a, 0x19, 0x48,
	0x79, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x74, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x69, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x69,
	0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x1b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x17,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x40, 0x0a, 0x1b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x72,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x38, 0x0a, 0x17, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x72,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x72,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x40, 0x0a, 0x1b,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x49, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6c, 0x6c, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x70, 0x69, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x70, 0x69, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6c, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x6c, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x55, 0x72, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x72, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x49,
	0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6d, 0x68, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6d,
	0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75,
	0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x22, 0xf2, 0x02, 0x0a, 0x18, 0x48, 0x79, 0x6b, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x73,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x61, 0x78, 0x12, 0x22, 0x0a,
	0x0c, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x11, 0x54, 0x73, 0x68, 0x6f,
	0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x64, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x68,
	0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x68,
	0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x48,
	0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x75, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x48, 0x6f, 0x73,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0xf9, 0x18, 0x0a, 0x14, 0x68, 0x79, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x69, 0x63, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x69, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x1b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x1b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x1b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x30,
	0x0a, 0x13, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x72, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72,
	0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49,
	0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x6f, 0x73, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x70, 0x69,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68,
	0x70, 0x69, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6c, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x6c, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x55, 0x72, 0x67, 0x65, 0x6e,
	0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x72, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x6c, 0x6c, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6d, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6d, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x34, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x66, 0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x49, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65,
	0x78, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74,
	0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x79, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x79, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xf5, 0x03, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x6d, 0x6e, 0x74, 0x74, 0x79, 0x70,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x6d, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x73, 0x6b, 0x65,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x77, 0x66, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x77, 0x66, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0xb7, 0x0e, 0x0a, 0x15, 0x48, 0x79, 0x63, 0x44,
	0x75, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x69, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x69, 0x63, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x6f, 0x73,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x72, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x69, 0x6e, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x69, 0x6e, 0x74, 0x6f, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x62,
	0x61, 0x63, 0x6b, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x73, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x44, 0x6f, 0x63, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x49, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x61, 0x66,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49,
	0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x48, 0x6f, 0x73,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x6f, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x6f, 0x48, 0x6f, 0x73, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x6f, 0x48, 0x6f, 0x73,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x69, 0x6e, 0x74, 0x6f, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x6f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x6f, 0x64, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x6f, 0x64, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x6e, 0x74, 0x6f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x69, 0x6e, 0x74, 0x6f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x74,
	0x6f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6e, 0x6f, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x78, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74,
	0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x22, 0xc1, 0x0f, 0x0a, 0x14, 0x48, 0x79, 0x63, 0x44, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x69, 0x63, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x69, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x6f, 0x73,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x69, 0x6e, 0x74,
	0x6f, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x69, 0x6e, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x48,
	0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x44, 0x6f, 0x63, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x44, 0x6f, 0x63, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x44, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6c, 0x6c,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x69, 0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x6f, 0x48, 0x6f, 0x73, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x6f, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x6f, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x6f, 0x48, 0x6f, 0x73, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x6f, 0x64,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x6f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x6f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x6f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x6f, 0x64, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x6f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x77,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x6f, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x41, 0x67, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x78, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x78, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x73,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0xe3, 0x03, 0x0a, 0x0b, 0x54, 0x73, 0x44, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x56, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x72, 0x65, 0x61, 0x73, 0x4f, 0x66,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x72, 0x65, 0x61, 0x73, 0x4f, 0x66, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x6f, 0x73, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68,
	0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x68,
	0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6c,
	0x66, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x65, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xfb, 0x02, 0x0a, 0x0d,
	0x41, 0x64, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x70, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x70, 0x4e, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x43, 0x68, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x77, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22, 0xe7, 0x0e, 0x0a, 0x12, 0x48, 0x79,
	0x63, 0x4f, 0x75, 0x74, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x12, 0x2e, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x69, 0x6e, 0x67,
	0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x3c, 0x0a, 0x19, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x1b, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x72,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x72, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72,
	0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e,
	0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x6b, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6b, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f, 0x73,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x6f,
	0x75, 0x74, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x16, 0x48, 0x79, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa1,
	0x01, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x2d,
	0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b,
	0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x1a, 0x53, 0x0a,
	0x09, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x22, 0xce, 0x04, 0x0a, 0x1a, 0x48, 0x79, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x40, 0x0a, 0x1b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x79, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x4f, 0x72, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x1d, 0x5a, 0x1b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x75, 0x70, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x3b, 0x63, 0x6f,
	0x6e, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_conf_conf_proto_rawDescOnce sync.Once
	file_conf_conf_proto_rawDescData = file_conf_conf_proto_rawDesc
)

func file_conf_conf_proto_rawDescGZIP() []byte {
	file_conf_conf_proto_rawDescOnce.Do(func() {
		file_conf_conf_proto_rawDescData = protoimpl.X.CompressGZIP(file_conf_conf_proto_rawDescData)
	})
	return file_conf_conf_proto_rawDescData
}

var file_conf_conf_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_conf_conf_proto_goTypes = []interface{}{
	(*Bootstrap)(nil),                  // 0: kratos.api.Bootstrap
	(*Minion)(nil),                     // 1: kratos.api.Minion
	(*Server)(nil),                     // 2: kratos.api.Server
	(*Data)(nil),                       // 3: kratos.api.Data
	(*JWT)(nil),                        // 4: kratos.api.JWT
	(*BucketName)(nil),                 // 5: kratos.api.BucketName
	(*SerachPath)(nil),                 // 6: kratos.api.SerachPath
	(*HYK)(nil),                        // 7: kratos.api.HYK
	(*HycConsultationApplysList)(nil),  // 8: kratos.api.HycConsultationApplysList
	(*HykAddHospitalServiceReq)(nil),   // 9: kratos.api.HykAddHospitalServiceReq
	(*TshospitaldeptReq)(nil),          // 10: kratos.api.TshospitaldeptReq
	(*HycConsultationApply)(nil),       // 11: kratos.api.hycConsultationApply
	(*Attachments)(nil),                // 12: kratos.api.Attachments
	(*HycDualReferralApplys)(nil),      // 13: kratos.api.HycDualReferralApplys
	(*HycDualReferralApply)(nil),       // 14: kratos.api.HycDualReferralApply
	(*TsDoctorsVo)(nil),                // 15: kratos.api.TsDoctorsVo
	(*AddSystemUser)(nil),              // 16: kratos.api.AddSystemUser
	(*HycOutpatientApply)(nil),         // 17: kratos.api.HycOutpatientApply
	(*HycOutpatientApplysReq)(nil),     // 18: kratos.api.HycOutpatientApplysReq
	(*Job)(nil),                        // 19: kratos.api.Job
	(*HycConsultationConclusions)(nil), // 20: kratos.api.HycConsultationConclusions
	(*Server_HTTP)(nil),                // 21: kratos.api.Server.HTTP
	(*Server_GRPC)(nil),                // 22: kratos.api.Server.GRPC
	(*Server_JWT)(nil),                 // 23: kratos.api.Server.JWT
	(*Data_Database)(nil),              // 24: kratos.api.Data.Database
	(*Data_Redis)(nil),                 // 25: kratos.api.Data.Redis
	(*Data_FileService)(nil),           // 26: kratos.api.Data.FileService
	(*Job_JobConfig)(nil),              // 27: kratos.api.Job.JobConfig
	(*durationpb.Duration)(nil),        // 28: google.protobuf.Duration
}
var file_conf_conf_proto_depIdxs = []int32{
	2,  // 0: kratos.api.Bootstrap.server:type_name -> kratos.api.Server
	3,  // 1: kratos.api.Bootstrap.data:type_name -> kratos.api.Data
	21, // 2: kratos.api.Server.http:type_name -> kratos.api.Server.HTTP
	22, // 3: kratos.api.Server.grpc:type_name -> kratos.api.Server.GRPC
	23, // 4: kratos.api.Server.jwt:type_name -> kratos.api.Server.JWT
	7,  // 5: kratos.api.Server.huiyikang:type_name -> kratos.api.HYK
	24, // 6: kratos.api.Data.database:type_name -> kratos.api.Data.Database
	25, // 7: kratos.api.Data.redis:type_name -> kratos.api.Data.Redis
	4,  // 8: kratos.api.Data.jwt:type_name -> kratos.api.JWT
	1,  // 9: kratos.api.Data.minion:type_name -> kratos.api.Minion
	5,  // 10: kratos.api.Data.bucketName:type_name -> kratos.api.BucketName
	6,  // 11: kratos.api.Data.searchPath:type_name -> kratos.api.SerachPath
	26, // 12: kratos.api.Data.fileService:type_name -> kratos.api.Data.FileService
	28, // 13: kratos.api.HYK.timeout:type_name -> google.protobuf.Duration
	12, // 14: kratos.api.hycConsultationApply.attachments:type_name -> kratos.api.Attachments
	12, // 15: kratos.api.HycDualReferralApply.attachments:type_name -> kratos.api.Attachments
	12, // 16: kratos.api.HycOutpatientApply.attachments:type_name -> kratos.api.Attachments
	27, // 17: kratos.api.Job.jobs:type_name -> kratos.api.Job.JobConfig
	28, // 18: kratos.api.Server.HTTP.timeout:type_name -> google.protobuf.Duration
	28, // 19: kratos.api.Server.GRPC.timeout:type_name -> google.protobuf.Duration
	28, // 20: kratos.api.Data.Redis.read_timeout:type_name -> google.protobuf.Duration
	28, // 21: kratos.api.Data.Redis.write_timeout:type_name -> google.protobuf.Duration
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_conf_conf_proto_init() }
func file_conf_conf_proto_init() {
	if File_conf_conf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_conf_conf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bootstrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Minion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerachPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HYK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HycConsultationApplysList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HykAddHospitalServiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TshospitaldeptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HycConsultationApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HycDualReferralApplys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HycDualReferralApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsDoctorsVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSystemUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HycOutpatientApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HycOutpatientApplysReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HycConsultationConclusions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server_HTTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server_GRPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server_JWT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data_Database); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data_Redis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data_FileService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_conf_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_JobConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_conf_conf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_conf_conf_proto_goTypes,
		DependencyIndexes: file_conf_conf_proto_depIdxs,
		MessageInfos:      file_conf_conf_proto_msgTypes,
	}.Build()
	File_conf_conf_proto = out.File
	file_conf_conf_proto_rawDesc = nil
	file_conf_conf_proto_goTypes = nil
	file_conf_conf_proto_depIdxs = nil
}
