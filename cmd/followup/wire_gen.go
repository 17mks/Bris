// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"followup/internal/biz"
	"followup/internal/conf"
	"followup/internal/data"
	"followup/internal/server"
	"followup/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db, err := data.NewGormDB(confData)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(logger, db)
	if err != nil {
		return nil, nil, err
	}
	planRepo := data.NewPlanRepo(dataData, logger)
	planUsecase := biz.NewPlanUsecase(planRepo, logger)
	diseaseRepo := data.NewDiseaseRepo(dataData, logger)
	diseaseUseCase := biz.NewDiseaseUseCase(diseaseRepo, logger)
	disFunctionRepo := data.NewDisFunctionRepo(dataData, logger)
	disFunctionUseCase := biz.NewDisFunctionUseCase(disFunctionRepo, logger)
	workItemRepo := data.NewWorkItemRepo(dataData, logger)
	workItemUsecase := biz.NewWorkItemUsecase(workItemRepo, logger)
	planService := service.NewPlanService(planUsecase, diseaseUseCase, disFunctionUseCase, workItemUsecase, logger)
	authRepo := data.NewAuthRepo(dataData, logger)
	authUsecase := biz.NewAuthUsecase(authRepo, confData, logger)
	authTokenService := service.NewAuthTokenService(authUsecase, logger)
	diseaseService := service.NewDiseaseService(diseaseUseCase, logger)
	client := data.NewMinio(confData)
	dataRepo := data.NewFileData(logger, db, client)
	articleRepo := data.NewArticleRepo(dataData, logger)
	articleUsecase := biz.NewArticleUsecase(articleRepo, logger)
	articleService := service.NewArticleService(articleUsecase, logger)
	disFunctionService := service.NewDisFunctionService(disFunctionUseCase, logger)
	formRepo := data.NewFormRepo(dataData, logger)
	formUseCase := biz.NewFormUseCase(formRepo, dataRepo, logger)
	filesRepo := data.NewFilesRepo(dataData, logger)
	filesUsecase := biz.NewFilesUsecase(filesRepo, logger)
	formCssRepo := data.NewFormCssRepo(dataData, logger)
	formCssUsecase := biz.NewFormCssUsecase(formCssRepo, logger)
	formService := service.NewFormService(formUseCase, filesUsecase, formCssUsecase, logger, confData)
	followupRepo := data.NewFollowupRepo(dataData, logger)
	followupUseCase := biz.NewFollowupUseCase(followupRepo, logger)
	userRepo := data.NewUserRepo(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepo, logger)
	followupService := service.NewFollowupService(followupUseCase, userUsecase, planUsecase, workItemUsecase, logger)
	fileService := service.NewFileService(dataRepo, logger)
	formRowRepo := data.NewFormRowRepo(dataData, logger)
	formRowUseCase := biz.NewFormRowUseCase(formRowRepo, logger)
	memberRepo := data.NewMemberRepo(dataData, logger)
	memberUseCase := biz.NewMemberUseCase(memberRepo, logger)
	formRowService := service.NewFormRowService(formRowUseCase, formUseCase, workItemUsecase, memberUseCase, logger)
	httpServer := server.NewHTTPServer(confServer, confData, planService, authTokenService, diseaseService, dataRepo, articleService, disFunctionService, formService, followupService, fileService, formRowService, logger)
	grpcServer := server.NewGRPCServer(confServer, planService, authTokenService, diseaseService, articleService, confData, logger, disFunctionService, followupService, formService, formRowService)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
