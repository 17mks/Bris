// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: formcolumn.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationForm_ColumnForm_ColumnCreate = "/api.Form_Column/Form_ColumnCreate"
const OperationForm_ColumnForm_ColumnDelete = "/api.Form_Column/Form_ColumnDelete"
const OperationForm_ColumnForm_ColumnDetail = "/api.Form_Column/Form_ColumnDetail"
const OperationForm_ColumnForm_ColumnFilter = "/api.Form_Column/Form_ColumnFilter"
const OperationForm_ColumnForm_ColumnUpdate = "/api.Form_Column/Form_ColumnUpdate"

type Form_ColumnHTTPServer interface {
	Form_ColumnCreate(context.Context, *Form_ColumnCreateRequest) (*Form_ColumnCreateResponse, error)
	Form_ColumnDelete(context.Context, *Form_ColumnDeleteRequest) (*Form_ColumnDeleteResponse, error)
	Form_ColumnDetail(context.Context, *Form_ColumnDetailRequest) (*Form_ColumnDetailResponse, error)
	Form_ColumnFilter(context.Context, *Form_ColumnFilterRequest) (*Form_ColumnFilterResponse, error)
	Form_ColumnUpdate(context.Context, *Form_ColumnUpdateRequest) (*Form_ColumnUpdateResponse, error)
}

func RegisterForm_ColumnHTTPServer(s *http.Server, srv Form_ColumnHTTPServer) {
	r := s.Route("/")
	r.POST("/form_column", _Form_Column_Form_ColumnCreate0_HTTP_Handler(srv))
	r.DELETE("/form_column/{id}", _Form_Column_Form_ColumnDelete0_HTTP_Handler(srv))
	r.PUT("/form_column", _Form_Column_Form_ColumnUpdate0_HTTP_Handler(srv))
	r.GET("/form_column/{id}", _Form_Column_Form_ColumnDetail0_HTTP_Handler(srv))
	r.POST("/form_column/filter", _Form_Column_Form_ColumnFilter0_HTTP_Handler(srv))
}

func _Form_Column_Form_ColumnCreate0_HTTP_Handler(srv Form_ColumnHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Form_ColumnCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationForm_ColumnForm_ColumnCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Form_ColumnCreate(ctx, req.(*Form_ColumnCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Form_ColumnCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _Form_Column_Form_ColumnDelete0_HTTP_Handler(srv Form_ColumnHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Form_ColumnDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationForm_ColumnForm_ColumnDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Form_ColumnDelete(ctx, req.(*Form_ColumnDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Form_ColumnDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _Form_Column_Form_ColumnUpdate0_HTTP_Handler(srv Form_ColumnHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Form_ColumnUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationForm_ColumnForm_ColumnUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Form_ColumnUpdate(ctx, req.(*Form_ColumnUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Form_ColumnUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _Form_Column_Form_ColumnDetail0_HTTP_Handler(srv Form_ColumnHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Form_ColumnDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationForm_ColumnForm_ColumnDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Form_ColumnDetail(ctx, req.(*Form_ColumnDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Form_ColumnDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Form_Column_Form_ColumnFilter0_HTTP_Handler(srv Form_ColumnHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Form_ColumnFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationForm_ColumnForm_ColumnFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Form_ColumnFilter(ctx, req.(*Form_ColumnFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Form_ColumnFilterResponse)
		return ctx.Result(200, reply)
	}
}

type Form_ColumnHTTPClient interface {
	Form_ColumnCreate(ctx context.Context, req *Form_ColumnCreateRequest, opts ...http.CallOption) (rsp *Form_ColumnCreateResponse, err error)
	Form_ColumnDelete(ctx context.Context, req *Form_ColumnDeleteRequest, opts ...http.CallOption) (rsp *Form_ColumnDeleteResponse, err error)
	Form_ColumnDetail(ctx context.Context, req *Form_ColumnDetailRequest, opts ...http.CallOption) (rsp *Form_ColumnDetailResponse, err error)
	Form_ColumnFilter(ctx context.Context, req *Form_ColumnFilterRequest, opts ...http.CallOption) (rsp *Form_ColumnFilterResponse, err error)
	Form_ColumnUpdate(ctx context.Context, req *Form_ColumnUpdateRequest, opts ...http.CallOption) (rsp *Form_ColumnUpdateResponse, err error)
}

type Form_ColumnHTTPClientImpl struct {
	cc *http.Client
}

func NewForm_ColumnHTTPClient(client *http.Client) Form_ColumnHTTPClient {
	return &Form_ColumnHTTPClientImpl{client}
}

func (c *Form_ColumnHTTPClientImpl) Form_ColumnCreate(ctx context.Context, in *Form_ColumnCreateRequest, opts ...http.CallOption) (*Form_ColumnCreateResponse, error) {
	var out Form_ColumnCreateResponse
	pattern := "/form_column"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationForm_ColumnForm_ColumnCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *Form_ColumnHTTPClientImpl) Form_ColumnDelete(ctx context.Context, in *Form_ColumnDeleteRequest, opts ...http.CallOption) (*Form_ColumnDeleteResponse, error) {
	var out Form_ColumnDeleteResponse
	pattern := "/form_column/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationForm_ColumnForm_ColumnDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *Form_ColumnHTTPClientImpl) Form_ColumnDetail(ctx context.Context, in *Form_ColumnDetailRequest, opts ...http.CallOption) (*Form_ColumnDetailResponse, error) {
	var out Form_ColumnDetailResponse
	pattern := "/form_column/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationForm_ColumnForm_ColumnDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *Form_ColumnHTTPClientImpl) Form_ColumnFilter(ctx context.Context, in *Form_ColumnFilterRequest, opts ...http.CallOption) (*Form_ColumnFilterResponse, error) {
	var out Form_ColumnFilterResponse
	pattern := "/form_column/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationForm_ColumnForm_ColumnFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *Form_ColumnHTTPClientImpl) Form_ColumnUpdate(ctx context.Context, in *Form_ColumnUpdateRequest, opts ...http.CallOption) (*Form_ColumnUpdateResponse, error) {
	var out Form_ColumnUpdateResponse
	pattern := "/form_column"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationForm_ColumnForm_ColumnUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
