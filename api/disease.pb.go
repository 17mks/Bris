// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.10
// source: disease.proto

package api

import (
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Diseases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	CreateTime  string `protobuf:"bytes,2,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Id          string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	NameJp      string `protobuf:"bytes,6,opt,name=nameJp,proto3" json:"nameJp,omitempty"`
	NameQp      string `protobuf:"bytes,7,opt,name=nameQp,proto3" json:"nameQp,omitempty"`
	Pid         string `protobuf:"bytes,8,opt,name=pid,proto3" json:"pid,omitempty"`
	Status      string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Tag         string `protobuf:"bytes,10,opt,name=tag,proto3" json:"tag,omitempty"`
	UpdateTime  string `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Version     string `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Diseases) Reset() {
	*x = Diseases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disease_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diseases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diseases) ProtoMessage() {}

func (x *Diseases) ProtoReflect() protoreflect.Message {
	mi := &file_disease_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diseases.ProtoReflect.Descriptor instead.
func (*Diseases) Descriptor() ([]byte, []int) {
	return file_disease_proto_rawDescGZIP(), []int{0}
}

func (x *Diseases) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Diseases) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Diseases) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Diseases) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Diseases) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Diseases) GetNameJp() string {
	if x != nil {
		return x.NameJp
	}
	return ""
}

func (x *Diseases) GetNameQp() string {
	if x != nil {
		return x.NameQp
	}
	return ""
}

func (x *Diseases) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *Diseases) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Diseases) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Diseases) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Diseases) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DiseaseCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NameJp      string `protobuf:"bytes,4,opt,name=nameJp,proto3" json:"nameJp,omitempty"`
	NameQp      string `protobuf:"bytes,5,opt,name=nameQp,proto3" json:"nameQp,omitempty"`
	Pid         string `protobuf:"bytes,6,opt,name=pid,proto3" json:"pid,omitempty"`
	Status      string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Tag         string `protobuf:"bytes,8,opt,name=tag,proto3" json:"tag,omitempty"`
	Version     string `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DiseaseCreateRequest) Reset() {
	*x = DiseaseCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disease_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiseaseCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiseaseCreateRequest) ProtoMessage() {}

func (x *DiseaseCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disease_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiseaseCreateRequest.ProtoReflect.Descriptor instead.
func (*DiseaseCreateRequest) Descriptor() ([]byte, []int) {
	return file_disease_proto_rawDescGZIP(), []int{1}
}

func (x *DiseaseCreateRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DiseaseCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DiseaseCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DiseaseCreateRequest) GetNameJp() string {
	if x != nil {
		return x.NameJp
	}
	return ""
}

func (x *DiseaseCreateRequest) GetNameQp() string {
	if x != nil {
		return x.NameQp
	}
	return ""
}

func (x *DiseaseCreateRequest) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *DiseaseCreateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DiseaseCreateRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *DiseaseCreateRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DiseaseCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DiseaseCreateResponse) Reset() {
	*x = DiseaseCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disease_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiseaseCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiseaseCreateResponse) ProtoMessage() {}

func (x *DiseaseCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_disease_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiseaseCreateResponse.ProtoReflect.Descriptor instead.
func (*DiseaseCreateResponse) Descriptor() ([]byte, []int) {
	return file_disease_proto_rawDescGZIP(), []int{2}
}

func (x *DiseaseCreateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DiseaseDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DiseaseDeleteRequest) Reset() {
	*x = DiseaseDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disease_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiseaseDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiseaseDeleteRequest) ProtoMessage() {}

func (x *DiseaseDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disease_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiseaseDeleteRequest.ProtoReflect.Descriptor instead.
func (*DiseaseDeleteRequest) Descriptor() ([]byte, []int) {
	return file_disease_proto_rawDescGZIP(), []int{3}
}

func (x *DiseaseDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DiseaseDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DiseaseDeleteResponse) Reset() {
	*x = DiseaseDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disease_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiseaseDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiseaseDeleteResponse) ProtoMessage() {}

func (x *DiseaseDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_disease_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiseaseDeleteResponse.ProtoReflect.Descriptor instead.
func (*DiseaseDeleteResponse) Descriptor() ([]byte, []int) {
	return file_disease_proto_rawDescGZIP(), []int{4}
}

func (x *DiseaseDeleteResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DiseaseUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Body *DiseaseUpdateRequestBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *DiseaseUpdateRequest) Reset() {
	*x = DiseaseUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disease_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiseaseUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiseaseUpdateRequest) ProtoMessage() {}

func (x *DiseaseUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disease_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiseaseUpdateRequest.ProtoReflect.Descriptor instead.
func (*DiseaseUpdateRequest) Descriptor() ([]byte, []int) {
	return file_disease_proto_rawDescGZIP(), []int{5}
}

func (x *DiseaseUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DiseaseUpdateRequest) GetBody() *DiseaseUpdateRequestBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type DiseaseUpdateRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NameJp      string `protobuf:"bytes,4,opt,name=nameJp,proto3" json:"nameJp,omitempty"`
	NameQp      string `protobuf:"bytes,5,opt,name=nameQp,proto3" json:"nameQp,omitempty"`
	Pid         string `protobuf:"bytes,6,opt,name=pid,proto3" json:"pid,omitempty"`
	Status      string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Tag         string `protobuf:"bytes,8,opt,name=tag,proto3" json:"tag,omitempty"`
	Version     string `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DiseaseUpdateRequestBody) Reset() {
	*x = DiseaseUpdateRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disease_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiseaseUpdateRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiseaseUpdateRequestBody) ProtoMessage() {}

func (x *DiseaseUpdateRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_disease_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiseaseUpdateRequestBody.ProtoReflect.Descriptor instead.
func (*DiseaseUpdateRequestBody) Descriptor() ([]byte, []int) {
	return file_disease_proto_rawDescGZIP(), []int{6}
}

func (x *DiseaseUpdateRequestBody) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DiseaseUpdateRequestBody) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DiseaseUpdateRequestBody) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DiseaseUpdateRequestBody) GetNameJp() string {
	if x != nil {
		return x.NameJp
	}
	return ""
}

func (x *DiseaseUpdateRequestBody) GetNameQp() string {
	if x != nil {
		return x.NameQp
	}
	return ""
}

func (x *DiseaseUpdateRequestBody) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *DiseaseUpdateRequestBody) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DiseaseUpdateRequestBody) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *DiseaseUpdateRequestBody) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DiseaseUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	CreateTime  string `protobuf:"bytes,2,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Id          string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	NameJp      string `protobuf:"bytes,6,opt,name=nameJp,proto3" json:"nameJp,omitempty"`
	NameQp      string `protobuf:"bytes,7,opt,name=nameQp,proto3" json:"nameQp,omitempty"`
	Pid         string `protobuf:"bytes,8,opt,name=pid,proto3" json:"pid,omitempty"`
	Status      string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Tag         string `protobuf:"bytes,10,opt,name=tag,proto3" json:"tag,omitempty"`
	UpdateTime  string `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Version     string `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DiseaseUpdateResponse) Reset() {
	*x = DiseaseUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disease_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiseaseUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiseaseUpdateResponse) ProtoMessage() {}

func (x *DiseaseUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_disease_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiseaseUpdateResponse.ProtoReflect.Descriptor instead.
func (*DiseaseUpdateResponse) Descriptor() ([]byte, []int) {
	return file_disease_proto_rawDescGZIP(), []int{7}
}

func (x *DiseaseUpdateResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DiseaseUpdateResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DiseaseUpdateResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DiseaseUpdateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DiseaseUpdateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DiseaseUpdateResponse) GetNameJp() string {
	if x != nil {
		return x.NameJp
	}
	return ""
}

func (x *DiseaseUpdateResponse) GetNameQp() string {
	if x != nil {
		return x.NameQp
	}
	return ""
}

func (x *DiseaseUpdateResponse) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *DiseaseUpdateResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DiseaseUpdateResponse) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *DiseaseUpdateResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DiseaseUpdateResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DiseaseDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DiseaseDetailRequest) Reset() {
	*x = DiseaseDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disease_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiseaseDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiseaseDetailRequest) ProtoMessage() {}

func (x *DiseaseDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disease_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiseaseDetailRequest.ProtoReflect.Descriptor instead.
func (*DiseaseDetailRequest) Descriptor() ([]byte, []int) {
	return file_disease_proto_rawDescGZIP(), []int{8}
}

func (x *DiseaseDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DiseaseDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	CreateTime  string `protobuf:"bytes,2,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Id          string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	NameJp      string `protobuf:"bytes,6,opt,name=nameJp,proto3" json:"nameJp,omitempty"`
	NameQp      string `protobuf:"bytes,7,opt,name=nameQp,proto3" json:"nameQp,omitempty"`
	Pid         string `protobuf:"bytes,8,opt,name=pid,proto3" json:"pid,omitempty"`
	Status      string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Tag         string `protobuf:"bytes,10,opt,name=tag,proto3" json:"tag,omitempty"`
	UpdateTime  string `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Version     string `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DiseaseDetailResponse) Reset() {
	*x = DiseaseDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disease_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiseaseDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiseaseDetailResponse) ProtoMessage() {}

func (x *DiseaseDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_disease_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiseaseDetailResponse.ProtoReflect.Descriptor instead.
func (*DiseaseDetailResponse) Descriptor() ([]byte, []int) {
	return file_disease_proto_rawDescGZIP(), []int{9}
}

func (x *DiseaseDetailResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DiseaseDetailResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DiseaseDetailResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DiseaseDetailResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DiseaseDetailResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DiseaseDetailResponse) GetNameJp() string {
	if x != nil {
		return x.NameJp
	}
	return ""
}

func (x *DiseaseDetailResponse) GetNameQp() string {
	if x != nil {
		return x.NameQp
	}
	return ""
}

func (x *DiseaseDetailResponse) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *DiseaseDetailResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DiseaseDetailResponse) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *DiseaseDetailResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DiseaseDetailResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DiseaseFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter  *DiseaseFilterRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Page    int32                        `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int32                        `protobuf:"varint,3,opt,name=perPage,proto3" json:"perPage,omitempty"`
}

func (x *DiseaseFilterRequest) Reset() {
	*x = DiseaseFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disease_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiseaseFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiseaseFilterRequest) ProtoMessage() {}

func (x *DiseaseFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disease_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiseaseFilterRequest.ProtoReflect.Descriptor instead.
func (*DiseaseFilterRequest) Descriptor() ([]byte, []int) {
	return file_disease_proto_rawDescGZIP(), []int{10}
}

func (x *DiseaseFilterRequest) GetFilter() *DiseaseFilterRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DiseaseFilterRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DiseaseFilterRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type DiseaseFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int32       `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int32       `protobuf:"varint,2,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Results []*Diseases `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Total   int64       `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DiseaseFilterResponse) Reset() {
	*x = DiseaseFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disease_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiseaseFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiseaseFilterResponse) ProtoMessage() {}

func (x *DiseaseFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_disease_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiseaseFilterResponse.ProtoReflect.Descriptor instead.
func (*DiseaseFilterResponse) Descriptor() ([]byte, []int) {
	return file_disease_proto_rawDescGZIP(), []int{11}
}

func (x *DiseaseFilterResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DiseaseFilterResponse) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *DiseaseFilterResponse) GetResults() []*Diseases {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *DiseaseFilterResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DiseaseFilterRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids    []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Key    string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Status string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DiseaseFilterRequest_Filter) Reset() {
	*x = DiseaseFilterRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disease_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiseaseFilterRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiseaseFilterRequest_Filter) ProtoMessage() {}

func (x *DiseaseFilterRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_disease_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiseaseFilterRequest_Filter.ProtoReflect.Descriptor instead.
func (*DiseaseFilterRequest_Filter) Descriptor() ([]byte, []int) {
	return file_disease_proto_rawDescGZIP(), []int{10, 0}
}

func (x *DiseaseFilterRequest_Filter) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DiseaseFilterRequest_Filter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DiseaseFilterRequest_Filter) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_disease_proto protoreflect.FileDescriptor

var file_disease_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb1, 0x05, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xba, 0x47, 0x1d, 0xba, 0x01, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x02, 0x0c, 0xe7, 0x96, 0xbe,
	0xe7, 0x97, 0x85, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x12, 0xe7,
	0x97, 0x85, 0xe7, 0xa7, 0x8d, 0xe4, 0xb8, 0xbb, 0xe9, 0x94, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0,
	0x81, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x47, 0x16, 0xba, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x92,
	0x02, 0x0c, 0xe7, 0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xba, 0x47, 0x27, 0xba, 0x01, 0x06, 0x6e, 0x61, 0x6d, 0x65,
	0x4a, 0x70, 0x92, 0x02, 0x1b, 0xe7, 0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0xe9, 0xa6, 0x96, 0xe5, 0xad, 0x97, 0xe6, 0xaf, 0x8d, 0xe6, 0x8b, 0xbc, 0xe9, 0x9f, 0xb3,
	0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x70, 0x12, 0x3f, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65,
	0x51, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xba, 0x47, 0x24, 0xba, 0x01, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x51, 0x70, 0x92, 0x02, 0x18, 0xe7, 0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe6, 0x8b, 0xbc, 0xe9, 0x9f, 0xb3, 0xe5, 0x85, 0xa8, 0xe6, 0x8b,
	0xbc, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x51, 0x70, 0x12, 0x2a, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0xba, 0x01, 0x03, 0x70, 0x69,
	0x64, 0x92, 0x02, 0x0c, 0xe7, 0x88, 0xb6, 0xe7, 0xba, 0xa7, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81,
	0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xba, 0x47, 0x37, 0xba, 0x01, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x92, 0x02, 0x2b, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0x27, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x20, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x27, 0x2c, 0x20, 0x27,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x20, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x27,
	0x29, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0xba, 0x01, 0x03, 0x74, 0x61,
	0x67, 0x92, 0x02, 0x0c, 0xe5, 0xa4, 0x87, 0xe7, 0x94, 0xa8, 0xe6, 0xa0, 0x87, 0xe8, 0xae, 0xb0,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0xba, 0x01,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xba, 0x47, 0x21, 0xba, 0x01, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x92, 0x02, 0x14, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x28, 0x65, 0x2e,
	0x67, 0x2e, 0x20, 0x27, 0x49, 0x43, 0x44, 0x31, 0x30, 0x27, 0x29, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x04, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c,
	0xba, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x92, 0x02, 0x12, 0xe7, 0x97, 0x85, 0xe7, 0xa7, 0x8d,
	0xe4, 0xb8, 0xbb, 0xe9, 0x94, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xba, 0x47, 0x1d, 0xba, 0x01, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x02, 0x0c, 0xe7, 0x96, 0xbe,
	0xe7, 0x97, 0x85, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x47, 0x16, 0xba, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x92, 0x02, 0x0c, 0xe7, 0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xba, 0x47, 0x27, 0xba, 0x01, 0x06, 0x6e, 0x61, 0x6d,
	0x65, 0x4a, 0x70, 0x92, 0x02, 0x1b, 0xe7, 0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0xe9, 0xa6, 0x96, 0xe5, 0xad, 0x97, 0xe6, 0xaf, 0x8d, 0xe6, 0x8b, 0xbc, 0xe9, 0x9f,
	0xb3, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x70, 0x12, 0x39, 0x0a, 0x06, 0x6e, 0x61, 0x6d,
	0x65, 0x51, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xba, 0x47, 0x1e, 0xba, 0x01,
	0x06, 0x6e, 0x61, 0x6d, 0x65, 0x51, 0x70, 0x92, 0x02, 0x12, 0xe7, 0x96, 0xbe, 0xe7, 0x97, 0x85,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x85, 0xa8, 0xe6, 0x8b, 0xbc, 0x52, 0x06, 0x6e, 0x61,
	0x6d, 0x65, 0x51, 0x70, 0x12, 0x2a, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0xba, 0x01, 0x03, 0x70, 0x69, 0x64, 0x92, 0x02, 0x0c, 0xe7,
	0x88, 0xb6, 0xe7, 0xba, 0xa7, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3a, 0xba, 0x47, 0x37, 0xba, 0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x92, 0x02,
	0x2b, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0x27, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x20, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x27, 0x2c, 0x20, 0x27, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x20, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x27, 0x29, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0xba, 0x01, 0x03, 0x74, 0x61, 0x67, 0x92, 0x02, 0x0c, 0xe5,
	0xa4, 0x87, 0xe7, 0x94, 0xa8, 0xe6, 0xa0, 0x87, 0xe8, 0xae, 0xb0, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0xba, 0x47, 0x13, 0xba, 0x01, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x92, 0x02, 0x06, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0xba, 0x01, 0x02, 0x69,
	0x64, 0x92, 0x02, 0x12, 0xe7, 0x97, 0x85, 0xe7, 0xa7, 0x8d, 0xe4, 0xb8, 0xbb, 0xe9, 0x94, 0xae,
	0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x14, 0x44, 0x69,
	0x73, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0xba, 0x47, 0x1a, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x12, 0xe7, 0x97, 0x85, 0xe7, 0xa7,
	0x8d, 0xe4, 0xb8, 0xbb, 0xe9, 0x94, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x46, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0xba, 0x01, 0x02, 0x69, 0x64,
	0x92, 0x02, 0x12, 0xe7, 0x97, 0x85, 0xe7, 0xa7, 0x8d, 0xe4, 0xb8, 0xbb, 0xe9, 0x94, 0xae, 0xe7,
	0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x14, 0x44, 0x69, 0x73,
	0x65, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0xb1, 0x04, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x41, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2d, 0xba, 0x47, 0x2a, 0xba, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x92, 0x02, 0x20, 0xe7, 0x96,
	0xbe, 0xe7, 0x97, 0x85, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20,
	0x41, 0x30, 0x30, 0x2d, 0x42, 0x39, 0x39, 0x20, 0x43, 0x30, 0x30, 0x2e, 0x31, 0x29, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xba, 0x47, 0x1d, 0xba, 0x01,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x02, 0x0c, 0xe7,
	0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x47, 0x16, 0xba, 0x01, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe7, 0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x4a,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xba, 0x47, 0x27, 0xba, 0x01, 0x06, 0x6e,
	0x61, 0x6d, 0x65, 0x4a, 0x70, 0x92, 0x02, 0x1b, 0xe7, 0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0xe9, 0xa6, 0x96, 0xe5, 0xad, 0x97, 0xe6, 0xaf, 0x8d, 0xe6, 0x8b, 0xbc,
	0xe9, 0x9f, 0xb3, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x70, 0x12, 0x3f, 0x0a, 0x06, 0x6e,
	0x61, 0x6d, 0x65, 0x51, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xba, 0x47, 0x24,
	0xba, 0x01, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x51, 0x70, 0x92, 0x02, 0x18, 0xe7, 0x96, 0xbe, 0xe7,
	0x97, 0x85, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe6, 0x8b, 0xbc, 0xe9, 0x9f, 0xb3, 0xe5, 0x85,
	0xa8, 0xe6, 0x8b, 0xbc, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x51, 0x70, 0x12, 0x2a, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0xba, 0x01,
	0x03, 0x70, 0x69, 0x64, 0x92, 0x02, 0x0c, 0xe7, 0x88, 0xb6, 0xe7, 0xba, 0xa7, 0xe7, 0xbc, 0x96,
	0xe7, 0xa0, 0x81, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xba, 0x47, 0x35, 0xba, 0x01, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x92, 0x02, 0x29, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28,
	0x27, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x20, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x27,
	0x2c, 0x20, 0x27, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x20, 0xe7, 0xa6, 0x81, 0xe7,
	0x94, 0xa8, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0xba, 0x01, 0x03, 0x74,
	0x61, 0x67, 0x92, 0x02, 0x0c, 0xe5, 0xa4, 0x87, 0xe7, 0x94, 0xa8, 0xe6, 0xa0, 0x87, 0xe8, 0xae,
	0xb0, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xba, 0x47, 0x13, 0xba, 0x01, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x92, 0x02, 0x06, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xdf, 0x05, 0x0a, 0x15, 0x44, 0x69, 0x73,
	0x65, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0xba, 0x47, 0x2a, 0xba, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x92, 0x02, 0x20, 0xe7,
	0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0x65, 0x2e, 0x67, 0x2e,
	0x20, 0x41, 0x30, 0x30, 0x2d, 0x42, 0x39, 0x39, 0x20, 0x43, 0x30, 0x30, 0x2e, 0x31, 0x29, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xba, 0x47, 0x1d,
	0xba, 0x01, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x02,
	0x0c, 0xe7, 0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0xba, 0x01, 0x02, 0x69, 0x64,
	0x92, 0x02, 0x12, 0xe7, 0x97, 0x85, 0xe7, 0xa7, 0x8d, 0xe4, 0xb8, 0xbb, 0xe9, 0x94, 0xae, 0xe7,
	0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x47, 0x16, 0xba, 0x01, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe7, 0x97, 0x85, 0xe7, 0xa7, 0x8d, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65,
	0x4a, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xba, 0x47, 0x27, 0xba, 0x01, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x70, 0x92, 0x02, 0x1b, 0xe7, 0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe9, 0xa6, 0x96, 0xe5, 0xad, 0x97, 0xe6, 0xaf, 0x8d, 0xe6, 0x8b,
	0xbc, 0xe9, 0x9f, 0xb3, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x70, 0x12, 0x3f, 0x0a, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x51, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xba, 0x47,
	0x24, 0xba, 0x01, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x51, 0x70, 0x92, 0x02, 0x18, 0xe7, 0x96, 0xbe,
	0xe7, 0x97, 0x85, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe6, 0x8b, 0xbc, 0xe9, 0x9f, 0xb3, 0xe5,
	0x85, 0xa8, 0xe6, 0x8b, 0xbc, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x51, 0x70, 0x12, 0x2a, 0x0a,
	0x03, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0xba,
	0x01, 0x03, 0x70, 0x69, 0x64, 0x92, 0x02, 0x0c, 0xe7, 0x88, 0xb6, 0xe7, 0xba, 0xa7, 0xe7, 0xbc,
	0x96, 0xe7, 0xa0, 0x81, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xba, 0x47, 0x35, 0xba, 0x01,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x92, 0x02, 0x29, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x28, 0x27, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x20, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8,
	0x27, 0x2c, 0x20, 0x27, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x20, 0xe7, 0xa6, 0x81,
	0xe7, 0x94, 0xa8, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0xba, 0x01, 0x03,
	0x74, 0x61, 0x67, 0x92, 0x02, 0x0c, 0xe5, 0xa4, 0x87, 0xe7, 0x94, 0xa8, 0xe6, 0xa0, 0x87, 0xe8,
	0xae, 0xb0, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c,
	0xba, 0x01, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xba, 0x47, 0x13, 0xba, 0x01,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x92, 0x02, 0x06, 0xe7, 0x89, 0x88, 0xe6, 0x9c,
	0xac, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x14, 0x44, 0x69,
	0x73, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0xba, 0x47, 0x1a, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x12, 0xe7, 0x97, 0x85, 0xe7, 0xa7,
	0x8d, 0xe4, 0xb8, 0xbb, 0xe9, 0x94, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xdf, 0x05, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xba, 0x47, 0x2a, 0xba, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x92, 0x02, 0x20, 0xe7, 0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe7, 0xbc,
	0x96, 0xe7, 0xa0, 0x81, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x41, 0x30, 0x30, 0x2d, 0x42, 0x39,
	0x39, 0x20, 0x43, 0x30, 0x30, 0x2e, 0x31, 0x29, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3f,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xba, 0x47, 0x1d, 0xba, 0x01, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x02, 0x0c, 0xe7, 0x96, 0xbe, 0xe7, 0x97, 0x85,
	0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0xba, 0x47, 0x1a, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x12, 0xe7, 0x97, 0x85, 0xe7,
	0xa7, 0x8d, 0xe4, 0xb8, 0xbb, 0xe9, 0x94, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x19, 0xba, 0x47, 0x16, 0xba, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe7,
	0x97, 0x85, 0xe7, 0xa7, 0x8d, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0xba, 0x47, 0x27, 0xba, 0x01, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x70, 0x92,
	0x02, 0x1b, 0xe7, 0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe9, 0xa6,
	0x96, 0xe5, 0xad, 0x97, 0xe6, 0xaf, 0x8d, 0xe6, 0x8b, 0xbc, 0xe9, 0x9f, 0xb3, 0x52, 0x06, 0x6e,
	0x61, 0x6d, 0x65, 0x4a, 0x70, 0x12, 0x3f, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x51, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xba, 0x47, 0x24, 0xba, 0x01, 0x06, 0x6e, 0x61, 0x6d,
	0x65, 0x51, 0x70, 0x92, 0x02, 0x18, 0xe7, 0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0xe6, 0x8b, 0xbc, 0xe9, 0x9f, 0xb3, 0xe5, 0x85, 0xa8, 0xe6, 0x8b, 0xbc, 0x52, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x51, 0x70, 0x12, 0x2a, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0xba, 0x01, 0x03, 0x70, 0x69, 0x64, 0x92, 0x02,
	0x0c, 0xe7, 0x88, 0xb6, 0xe7, 0xba, 0xa7, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x38, 0xba, 0x47, 0x35, 0xba, 0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x92, 0x02, 0x29, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0x27, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x20, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x27, 0x2c, 0x20, 0x27, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x20, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0xba, 0x01, 0x03, 0x74, 0x61, 0x67, 0x92, 0x02, 0x0c, 0xe5,
	0xa4, 0x87, 0xe7, 0x94, 0xa8, 0xe6, 0xa0, 0x87, 0xe8, 0xae, 0xb0, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0xba, 0x47, 0x13, 0xba, 0x01, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x92, 0x02, 0x06, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x1a, 0x44, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x44,
	0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x32, 0xed, 0x04, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x12, 0x75, 0x0a,
	0x0d, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f,
	0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0xba, 0x47, 0x17, 0x12, 0x15, 0xe7,
	0x97, 0x85, 0xe7, 0xa7, 0x8d, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0xb7,
	0xbb, 0xe5, 0x8a, 0xa0, 0x12, 0x72, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0a, 0x2a, 0x08, 0x2f, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0xba, 0x47,
	0x17, 0x12, 0x15, 0xe7, 0x97, 0x85, 0xe7, 0xa7, 0x8d, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x12, 0x78, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x65,
	0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x65, 0x61,
	0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x1a, 0x08, 0x2f, 0x64, 0x69, 0x73, 0x65, 0x61,
	0x73, 0x65, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0xba, 0x47, 0x17, 0x12, 0x15, 0xe7, 0x97, 0x85,
	0xe7, 0xa7, 0x8d, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0x12, 0x78, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0a, 0x12, 0x08, 0x2f, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0xba, 0x47, 0x1d, 0x12,
	0x1b, 0xe7, 0x97, 0x85, 0xe7, 0xa7, 0x8d, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x12, 0x82, 0x01, 0x0a,
	0x0d, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f,
	0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x01,
	0x2a, 0xba, 0x47, 0x1d, 0x12, 0x1b, 0xe7, 0x97, 0x85, 0xe7, 0xa7, 0x8d, 0xe8, 0xa1, 0xa8, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x42, 0x0e, 0x5a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x75, 0x70, 0x2f, 0x61, 0x70,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_disease_proto_rawDescOnce sync.Once
	file_disease_proto_rawDescData = file_disease_proto_rawDesc
)

func file_disease_proto_rawDescGZIP() []byte {
	file_disease_proto_rawDescOnce.Do(func() {
		file_disease_proto_rawDescData = protoimpl.X.CompressGZIP(file_disease_proto_rawDescData)
	})
	return file_disease_proto_rawDescData
}

var file_disease_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_disease_proto_goTypes = []interface{}{
	(*Diseases)(nil),                    // 0: api.Diseases
	(*DiseaseCreateRequest)(nil),        // 1: api.DiseaseCreateRequest
	(*DiseaseCreateResponse)(nil),       // 2: api.DiseaseCreateResponse
	(*DiseaseDeleteRequest)(nil),        // 3: api.DiseaseDeleteRequest
	(*DiseaseDeleteResponse)(nil),       // 4: api.DiseaseDeleteResponse
	(*DiseaseUpdateRequest)(nil),        // 5: api.DiseaseUpdateRequest
	(*DiseaseUpdateRequestBody)(nil),    // 6: api.DiseaseUpdateRequestBody
	(*DiseaseUpdateResponse)(nil),       // 7: api.DiseaseUpdateResponse
	(*DiseaseDetailRequest)(nil),        // 8: api.DiseaseDetailRequest
	(*DiseaseDetailResponse)(nil),       // 9: api.DiseaseDetailResponse
	(*DiseaseFilterRequest)(nil),        // 10: api.DiseaseFilterRequest
	(*DiseaseFilterResponse)(nil),       // 11: api.DiseaseFilterResponse
	(*DiseaseFilterRequest_Filter)(nil), // 12: api.DiseaseFilterRequest.Filter
}
var file_disease_proto_depIdxs = []int32{
	6,  // 0: api.DiseaseUpdateRequest.body:type_name -> api.DiseaseUpdateRequestBody
	12, // 1: api.DiseaseFilterRequest.filter:type_name -> api.DiseaseFilterRequest.Filter
	0,  // 2: api.DiseaseFilterResponse.results:type_name -> api.Diseases
	1,  // 3: api.Disease.DiseaseCreate:input_type -> api.DiseaseCreateRequest
	3,  // 4: api.Disease.DiseaseDelete:input_type -> api.DiseaseDeleteRequest
	5,  // 5: api.Disease.DiseaseUpdate:input_type -> api.DiseaseUpdateRequest
	8,  // 6: api.Disease.DiseaseDetail:input_type -> api.DiseaseDetailRequest
	10, // 7: api.Disease.DiseaseFilter:input_type -> api.DiseaseFilterRequest
	2,  // 8: api.Disease.DiseaseCreate:output_type -> api.DiseaseCreateResponse
	4,  // 9: api.Disease.DiseaseDelete:output_type -> api.DiseaseDeleteResponse
	7,  // 10: api.Disease.DiseaseUpdate:output_type -> api.DiseaseUpdateResponse
	9,  // 11: api.Disease.DiseaseDetail:output_type -> api.DiseaseDetailResponse
	11, // 12: api.Disease.DiseaseFilter:output_type -> api.DiseaseFilterResponse
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_disease_proto_init() }
func file_disease_proto_init() {
	if File_disease_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_disease_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diseases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disease_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiseaseCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disease_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiseaseCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disease_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiseaseDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disease_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiseaseDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disease_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiseaseUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disease_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiseaseUpdateRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disease_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiseaseUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disease_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiseaseDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disease_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiseaseDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disease_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiseaseFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disease_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiseaseFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disease_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiseaseFilterRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_disease_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_disease_proto_goTypes,
		DependencyIndexes: file_disease_proto_depIdxs,
		MessageInfos:      file_disease_proto_msgTypes,
	}.Build()
	File_disease_proto = out.File
	file_disease_proto_rawDesc = nil
	file_disease_proto_goTypes = nil
	file_disease_proto_depIdxs = nil
}
