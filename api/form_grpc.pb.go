// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: form.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FormClient is the client API for Form service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FormClient interface {
	// 表单模板数据添加
	FormCreate(ctx context.Context, in *FormCreateRequest, opts ...grpc.CallOption) (*FormCreateResponse, error)
	// 表单模板数据删除
	FormDelete(ctx context.Context, in *FormDeleteRequest, opts ...grpc.CallOption) (*FormDeleteResponse, error)
	// 表单模板数据更新
	FormUpdate(ctx context.Context, in *FormUpdateRequest, opts ...grpc.CallOption) (*FormUpdateResponse, error)
	// 表单模板数据详情查询
	FormDetail(ctx context.Context, in *FormDetailRequest, opts ...grpc.CallOption) (*FormDetailResponse, error)
	// 表单模板数据过滤查询
	FormFilter(ctx context.Context, in *FormFilterRequest, opts ...grpc.CallOption) (*FormFilterResponse, error)
	// 表单模板导入
	FormImport(ctx context.Context, in *FormImportRequest, opts ...grpc.CallOption) (*FormImportResponse, error)
	// 表单模板导出
	FormExport(ctx context.Context, in *FormExportRequest, opts ...grpc.CallOption) (*FormExportResponse, error)
	// 表单模板静态文件上传
	FormModelUpload(ctx context.Context, in *FormModelUploadRequest, opts ...grpc.CallOption) (*FormModelUploadResponse, error)
}

type formClient struct {
	cc grpc.ClientConnInterface
}

func NewFormClient(cc grpc.ClientConnInterface) FormClient {
	return &formClient{cc}
}

func (c *formClient) FormCreate(ctx context.Context, in *FormCreateRequest, opts ...grpc.CallOption) (*FormCreateResponse, error) {
	out := new(FormCreateResponse)
	err := c.cc.Invoke(ctx, "/api.Form/FormCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formClient) FormDelete(ctx context.Context, in *FormDeleteRequest, opts ...grpc.CallOption) (*FormDeleteResponse, error) {
	out := new(FormDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.Form/FormDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formClient) FormUpdate(ctx context.Context, in *FormUpdateRequest, opts ...grpc.CallOption) (*FormUpdateResponse, error) {
	out := new(FormUpdateResponse)
	err := c.cc.Invoke(ctx, "/api.Form/FormUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formClient) FormDetail(ctx context.Context, in *FormDetailRequest, opts ...grpc.CallOption) (*FormDetailResponse, error) {
	out := new(FormDetailResponse)
	err := c.cc.Invoke(ctx, "/api.Form/FormDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formClient) FormFilter(ctx context.Context, in *FormFilterRequest, opts ...grpc.CallOption) (*FormFilterResponse, error) {
	out := new(FormFilterResponse)
	err := c.cc.Invoke(ctx, "/api.Form/FormFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formClient) FormImport(ctx context.Context, in *FormImportRequest, opts ...grpc.CallOption) (*FormImportResponse, error) {
	out := new(FormImportResponse)
	err := c.cc.Invoke(ctx, "/api.Form/FormImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formClient) FormExport(ctx context.Context, in *FormExportRequest, opts ...grpc.CallOption) (*FormExportResponse, error) {
	out := new(FormExportResponse)
	err := c.cc.Invoke(ctx, "/api.Form/FormExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formClient) FormModelUpload(ctx context.Context, in *FormModelUploadRequest, opts ...grpc.CallOption) (*FormModelUploadResponse, error) {
	out := new(FormModelUploadResponse)
	err := c.cc.Invoke(ctx, "/api.Form/FormModelUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormServer is the server API for Form service.
// All implementations must embed UnimplementedFormServer
// for forward compatibility
type FormServer interface {
	// 表单模板数据添加
	FormCreate(context.Context, *FormCreateRequest) (*FormCreateResponse, error)
	// 表单模板数据删除
	FormDelete(context.Context, *FormDeleteRequest) (*FormDeleteResponse, error)
	// 表单模板数据更新
	FormUpdate(context.Context, *FormUpdateRequest) (*FormUpdateResponse, error)
	// 表单模板数据详情查询
	FormDetail(context.Context, *FormDetailRequest) (*FormDetailResponse, error)
	// 表单模板数据过滤查询
	FormFilter(context.Context, *FormFilterRequest) (*FormFilterResponse, error)
	// 表单模板导入
	FormImport(context.Context, *FormImportRequest) (*FormImportResponse, error)
	// 表单模板导出
	FormExport(context.Context, *FormExportRequest) (*FormExportResponse, error)
	// 表单模板静态文件上传
	FormModelUpload(context.Context, *FormModelUploadRequest) (*FormModelUploadResponse, error)
	mustEmbedUnimplementedFormServer()
}

// UnimplementedFormServer must be embedded to have forward compatible implementations.
type UnimplementedFormServer struct {
}

func (UnimplementedFormServer) FormCreate(context.Context, *FormCreateRequest) (*FormCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormCreate not implemented")
}
func (UnimplementedFormServer) FormDelete(context.Context, *FormDeleteRequest) (*FormDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormDelete not implemented")
}
func (UnimplementedFormServer) FormUpdate(context.Context, *FormUpdateRequest) (*FormUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormUpdate not implemented")
}
func (UnimplementedFormServer) FormDetail(context.Context, *FormDetailRequest) (*FormDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormDetail not implemented")
}
func (UnimplementedFormServer) FormFilter(context.Context, *FormFilterRequest) (*FormFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormFilter not implemented")
}
func (UnimplementedFormServer) FormImport(context.Context, *FormImportRequest) (*FormImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormImport not implemented")
}
func (UnimplementedFormServer) FormExport(context.Context, *FormExportRequest) (*FormExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormExport not implemented")
}
func (UnimplementedFormServer) FormModelUpload(context.Context, *FormModelUploadRequest) (*FormModelUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormModelUpload not implemented")
}
func (UnimplementedFormServer) mustEmbedUnimplementedFormServer() {}

// UnsafeFormServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FormServer will
// result in compilation errors.
type UnsafeFormServer interface {
	mustEmbedUnimplementedFormServer()
}

func RegisterFormServer(s grpc.ServiceRegistrar, srv FormServer) {
	s.RegisterService(&Form_ServiceDesc, srv)
}

func _Form_FormCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServer).FormCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Form/FormCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServer).FormCreate(ctx, req.(*FormCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Form_FormDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServer).FormDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Form/FormDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServer).FormDelete(ctx, req.(*FormDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Form_FormUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServer).FormUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Form/FormUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServer).FormUpdate(ctx, req.(*FormUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Form_FormDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServer).FormDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Form/FormDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServer).FormDetail(ctx, req.(*FormDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Form_FormFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServer).FormFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Form/FormFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServer).FormFilter(ctx, req.(*FormFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Form_FormImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServer).FormImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Form/FormImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServer).FormImport(ctx, req.(*FormImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Form_FormExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServer).FormExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Form/FormExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServer).FormExport(ctx, req.(*FormExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Form_FormModelUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormModelUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServer).FormModelUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Form/FormModelUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServer).FormModelUpload(ctx, req.(*FormModelUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Form_ServiceDesc is the grpc.ServiceDesc for Form service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Form_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Form",
	HandlerType: (*FormServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FormCreate",
			Handler:    _Form_FormCreate_Handler,
		},
		{
			MethodName: "FormDelete",
			Handler:    _Form_FormDelete_Handler,
		},
		{
			MethodName: "FormUpdate",
			Handler:    _Form_FormUpdate_Handler,
		},
		{
			MethodName: "FormDetail",
			Handler:    _Form_FormDetail_Handler,
		},
		{
			MethodName: "FormFilter",
			Handler:    _Form_FormFilter_Handler,
		},
		{
			MethodName: "FormImport",
			Handler:    _Form_FormImport_Handler,
		},
		{
			MethodName: "FormExport",
			Handler:    _Form_FormExport_Handler,
		},
		{
			MethodName: "FormModelUpload",
			Handler:    _Form_FormModelUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "form.proto",
}
