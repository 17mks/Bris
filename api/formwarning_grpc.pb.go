// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: formwarning.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FormWarningClient is the client API for FormWarning service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FormWarningClient interface {
	// 表单预警数据过滤查询
	FormWarningFilter(ctx context.Context, in *FormWarningFilterRequest, opts ...grpc.CallOption) (*FormWarningFilterResponse, error)
	// 预警信息条件查询（App首页查询表单预警，按表单维度查询：一次提交一条数据）
	FormWarningXfilter(ctx context.Context, in *FormWarningXfilterRequest, opts ...grpc.CallOption) (*FormWarningXfilterResponse, error)
}

type formWarningClient struct {
	cc grpc.ClientConnInterface
}

func NewFormWarningClient(cc grpc.ClientConnInterface) FormWarningClient {
	return &formWarningClient{cc}
}

func (c *formWarningClient) FormWarningFilter(ctx context.Context, in *FormWarningFilterRequest, opts ...grpc.CallOption) (*FormWarningFilterResponse, error) {
	out := new(FormWarningFilterResponse)
	err := c.cc.Invoke(ctx, "/api.FormWarning/FormWarningFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formWarningClient) FormWarningXfilter(ctx context.Context, in *FormWarningXfilterRequest, opts ...grpc.CallOption) (*FormWarningXfilterResponse, error) {
	out := new(FormWarningXfilterResponse)
	err := c.cc.Invoke(ctx, "/api.FormWarning/FormWarningXfilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormWarningServer is the server API for FormWarning service.
// All implementations must embed UnimplementedFormWarningServer
// for forward compatibility
type FormWarningServer interface {
	// 表单预警数据过滤查询
	FormWarningFilter(context.Context, *FormWarningFilterRequest) (*FormWarningFilterResponse, error)
	// 预警信息条件查询（App首页查询表单预警，按表单维度查询：一次提交一条数据）
	FormWarningXfilter(context.Context, *FormWarningXfilterRequest) (*FormWarningXfilterResponse, error)
	mustEmbedUnimplementedFormWarningServer()
}

// UnimplementedFormWarningServer must be embedded to have forward compatible implementations.
type UnimplementedFormWarningServer struct {
}

func (UnimplementedFormWarningServer) FormWarningFilter(context.Context, *FormWarningFilterRequest) (*FormWarningFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormWarningFilter not implemented")
}
func (UnimplementedFormWarningServer) FormWarningXfilter(context.Context, *FormWarningXfilterRequest) (*FormWarningXfilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormWarningXfilter not implemented")
}
func (UnimplementedFormWarningServer) mustEmbedUnimplementedFormWarningServer() {}

// UnsafeFormWarningServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FormWarningServer will
// result in compilation errors.
type UnsafeFormWarningServer interface {
	mustEmbedUnimplementedFormWarningServer()
}

func RegisterFormWarningServer(s grpc.ServiceRegistrar, srv FormWarningServer) {
	s.RegisterService(&FormWarning_ServiceDesc, srv)
}

func _FormWarning_FormWarningFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormWarningFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormWarningServer).FormWarningFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FormWarning/FormWarningFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormWarningServer).FormWarningFilter(ctx, req.(*FormWarningFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormWarning_FormWarningXfilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormWarningXfilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormWarningServer).FormWarningXfilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FormWarning/FormWarningXfilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormWarningServer).FormWarningXfilter(ctx, req.(*FormWarningXfilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FormWarning_ServiceDesc is the grpc.ServiceDesc for FormWarning service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FormWarning_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.FormWarning",
	HandlerType: (*FormWarningServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FormWarningFilter",
			Handler:    _FormWarning_FormWarningFilter_Handler,
		},
		{
			MethodName: "FormWarningXfilter",
			Handler:    _FormWarning_FormWarningXfilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "formwarning.proto",
}
