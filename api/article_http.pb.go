// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: article.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationArticleArticleCreate = "/api.Article/ArticleCreate"
const OperationArticleArticleDelete = "/api.Article/ArticleDelete"
const OperationArticleArticleDetail = "/api.Article/ArticleDetail"
const OperationArticleArticleFilter = "/api.Article/ArticleFilter"
const OperationArticleArticleUpdate = "/api.Article/ArticleUpdate"

type ArticleHTTPServer interface {
	ArticleCreate(context.Context, *ArticleCreateRequest) (*ArticleCreateResponse, error)
	ArticleDelete(context.Context, *ArticleDeleteRequest) (*ArticleDeleteResponse, error)
	ArticleDetail(context.Context, *ArticleDetailRequest) (*ArticleDetailResponse, error)
	ArticleFilter(context.Context, *ArticleFilterRequest) (*ArticleFilterResponse, error)
	ArticleUpdate(context.Context, *ArticleUpdateRequest) (*ArticleUpdateResponse, error)
}

func RegisterArticleHTTPServer(s *http.Server, srv ArticleHTTPServer) {
	r := s.Route("/")
	r.POST("/article", _Article_ArticleCreate0_HTTP_Handler(srv))
	r.DELETE("/article", _Article_ArticleDelete0_HTTP_Handler(srv))
	r.PUT("/article", _Article_ArticleUpdate0_HTTP_Handler(srv))
	r.GET("/article", _Article_ArticleDetail0_HTTP_Handler(srv))
	r.POST("/article/filter", _Article_ArticleFilter0_HTTP_Handler(srv))
}

func _Article_ArticleCreate0_HTTP_Handler(srv ArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArticleArticleCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleCreate(ctx, req.(*ArticleCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _Article_ArticleDelete0_HTTP_Handler(srv ArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArticleArticleDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleDelete(ctx, req.(*ArticleDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _Article_ArticleUpdate0_HTTP_Handler(srv ArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleUpdateRequest
		if err := ctx.Bind(&in.Body); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArticleArticleUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleUpdate(ctx, req.(*ArticleUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _Article_ArticleDetail0_HTTP_Handler(srv ArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArticleArticleDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleDetail(ctx, req.(*ArticleDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Article_ArticleFilter0_HTTP_Handler(srv ArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArticleArticleFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleFilter(ctx, req.(*ArticleFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleFilterResponse)
		return ctx.Result(200, reply)
	}
}

type ArticleHTTPClient interface {
	ArticleCreate(ctx context.Context, req *ArticleCreateRequest, opts ...http.CallOption) (rsp *ArticleCreateResponse, err error)
	ArticleDelete(ctx context.Context, req *ArticleDeleteRequest, opts ...http.CallOption) (rsp *ArticleDeleteResponse, err error)
	ArticleDetail(ctx context.Context, req *ArticleDetailRequest, opts ...http.CallOption) (rsp *ArticleDetailResponse, err error)
	ArticleFilter(ctx context.Context, req *ArticleFilterRequest, opts ...http.CallOption) (rsp *ArticleFilterResponse, err error)
	ArticleUpdate(ctx context.Context, req *ArticleUpdateRequest, opts ...http.CallOption) (rsp *ArticleUpdateResponse, err error)
}

type ArticleHTTPClientImpl struct {
	cc *http.Client
}

func NewArticleHTTPClient(client *http.Client) ArticleHTTPClient {
	return &ArticleHTTPClientImpl{client}
}

func (c *ArticleHTTPClientImpl) ArticleCreate(ctx context.Context, in *ArticleCreateRequest, opts ...http.CallOption) (*ArticleCreateResponse, error) {
	var out ArticleCreateResponse
	pattern := "/article"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationArticleArticleCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArticleHTTPClientImpl) ArticleDelete(ctx context.Context, in *ArticleDeleteRequest, opts ...http.CallOption) (*ArticleDeleteResponse, error) {
	var out ArticleDeleteResponse
	pattern := "/article"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationArticleArticleDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArticleHTTPClientImpl) ArticleDetail(ctx context.Context, in *ArticleDetailRequest, opts ...http.CallOption) (*ArticleDetailResponse, error) {
	var out ArticleDetailResponse
	pattern := "/article"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationArticleArticleDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArticleHTTPClientImpl) ArticleFilter(ctx context.Context, in *ArticleFilterRequest, opts ...http.CallOption) (*ArticleFilterResponse, error) {
	var out ArticleFilterResponse
	pattern := "/article/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationArticleArticleFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArticleHTTPClientImpl) ArticleUpdate(ctx context.Context, in *ArticleUpdateRequest, opts ...http.CallOption) (*ArticleUpdateResponse, error) {
	var out ArticleUpdateResponse
	pattern := "/article"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationArticleArticleUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Body, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
