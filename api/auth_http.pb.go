// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: auth.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthTokenCreateAuthToken = "/api.AuthToken/CreateAuthToken"

type AuthTokenHTTPServer interface {
	CreateAuthToken(context.Context, *CreateAuthTokenRequest) (*CreateAuthTokenResponse, error)
}

func RegisterAuthTokenHTTPServer(s *http.Server, srv AuthTokenHTTPServer) {
	r := s.Route("/")
	r.POST("/auth/token", _AuthToken_CreateAuthToken0_HTTP_Handler(srv))
}

func _AuthToken_CreateAuthToken0_HTTP_Handler(srv AuthTokenHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAuthTokenRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthTokenCreateAuthToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAuthToken(ctx, req.(*CreateAuthTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAuthTokenResponse)
		return ctx.Result(200, reply)
	}
}

type AuthTokenHTTPClient interface {
	CreateAuthToken(ctx context.Context, req *CreateAuthTokenRequest, opts ...http.CallOption) (rsp *CreateAuthTokenResponse, err error)
}

type AuthTokenHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthTokenHTTPClient(client *http.Client) AuthTokenHTTPClient {
	return &AuthTokenHTTPClientImpl{client}
}

func (c *AuthTokenHTTPClientImpl) CreateAuthToken(ctx context.Context, in *CreateAuthTokenRequest, opts ...http.CallOption) (*CreateAuthTokenResponse, error) {
	var out CreateAuthTokenResponse
	pattern := "/auth/token"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthTokenCreateAuthToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
