// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: formcolumn.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Form_ColumnClient is the client API for Form_Column service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Form_ColumnClient interface {
	// 表单列数据添加
	Form_ColumnCreate(ctx context.Context, in *Form_ColumnCreateRequest, opts ...grpc.CallOption) (*Form_ColumnCreateResponse, error)
	// 表单列数据删除
	Form_ColumnDelete(ctx context.Context, in *Form_ColumnDeleteRequest, opts ...grpc.CallOption) (*Form_ColumnDeleteResponse, error)
	// 表单列数据更新
	Form_ColumnUpdate(ctx context.Context, in *Form_ColumnUpdateRequest, opts ...grpc.CallOption) (*Form_ColumnUpdateResponse, error)
	// 表单列数据详情查询
	Form_ColumnDetail(ctx context.Context, in *Form_ColumnDetailRequest, opts ...grpc.CallOption) (*Form_ColumnDetailResponse, error)
	// 表单列数据过滤查询
	Form_ColumnFilter(ctx context.Context, in *Form_ColumnFilterRequest, opts ...grpc.CallOption) (*Form_ColumnFilterResponse, error)
}

type form_ColumnClient struct {
	cc grpc.ClientConnInterface
}

func NewForm_ColumnClient(cc grpc.ClientConnInterface) Form_ColumnClient {
	return &form_ColumnClient{cc}
}

func (c *form_ColumnClient) Form_ColumnCreate(ctx context.Context, in *Form_ColumnCreateRequest, opts ...grpc.CallOption) (*Form_ColumnCreateResponse, error) {
	out := new(Form_ColumnCreateResponse)
	err := c.cc.Invoke(ctx, "/api.Form_Column/Form_ColumnCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *form_ColumnClient) Form_ColumnDelete(ctx context.Context, in *Form_ColumnDeleteRequest, opts ...grpc.CallOption) (*Form_ColumnDeleteResponse, error) {
	out := new(Form_ColumnDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.Form_Column/Form_ColumnDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *form_ColumnClient) Form_ColumnUpdate(ctx context.Context, in *Form_ColumnUpdateRequest, opts ...grpc.CallOption) (*Form_ColumnUpdateResponse, error) {
	out := new(Form_ColumnUpdateResponse)
	err := c.cc.Invoke(ctx, "/api.Form_Column/Form_ColumnUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *form_ColumnClient) Form_ColumnDetail(ctx context.Context, in *Form_ColumnDetailRequest, opts ...grpc.CallOption) (*Form_ColumnDetailResponse, error) {
	out := new(Form_ColumnDetailResponse)
	err := c.cc.Invoke(ctx, "/api.Form_Column/Form_ColumnDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *form_ColumnClient) Form_ColumnFilter(ctx context.Context, in *Form_ColumnFilterRequest, opts ...grpc.CallOption) (*Form_ColumnFilterResponse, error) {
	out := new(Form_ColumnFilterResponse)
	err := c.cc.Invoke(ctx, "/api.Form_Column/Form_ColumnFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Form_ColumnServer is the server API for Form_Column service.
// All implementations must embed UnimplementedForm_ColumnServer
// for forward compatibility
type Form_ColumnServer interface {
	// 表单列数据添加
	Form_ColumnCreate(context.Context, *Form_ColumnCreateRequest) (*Form_ColumnCreateResponse, error)
	// 表单列数据删除
	Form_ColumnDelete(context.Context, *Form_ColumnDeleteRequest) (*Form_ColumnDeleteResponse, error)
	// 表单列数据更新
	Form_ColumnUpdate(context.Context, *Form_ColumnUpdateRequest) (*Form_ColumnUpdateResponse, error)
	// 表单列数据详情查询
	Form_ColumnDetail(context.Context, *Form_ColumnDetailRequest) (*Form_ColumnDetailResponse, error)
	// 表单列数据过滤查询
	Form_ColumnFilter(context.Context, *Form_ColumnFilterRequest) (*Form_ColumnFilterResponse, error)
	mustEmbedUnimplementedForm_ColumnServer()
}

// UnimplementedForm_ColumnServer must be embedded to have forward compatible implementations.
type UnimplementedForm_ColumnServer struct {
}

func (UnimplementedForm_ColumnServer) Form_ColumnCreate(context.Context, *Form_ColumnCreateRequest) (*Form_ColumnCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Form_ColumnCreate not implemented")
}
func (UnimplementedForm_ColumnServer) Form_ColumnDelete(context.Context, *Form_ColumnDeleteRequest) (*Form_ColumnDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Form_ColumnDelete not implemented")
}
func (UnimplementedForm_ColumnServer) Form_ColumnUpdate(context.Context, *Form_ColumnUpdateRequest) (*Form_ColumnUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Form_ColumnUpdate not implemented")
}
func (UnimplementedForm_ColumnServer) Form_ColumnDetail(context.Context, *Form_ColumnDetailRequest) (*Form_ColumnDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Form_ColumnDetail not implemented")
}
func (UnimplementedForm_ColumnServer) Form_ColumnFilter(context.Context, *Form_ColumnFilterRequest) (*Form_ColumnFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Form_ColumnFilter not implemented")
}
func (UnimplementedForm_ColumnServer) mustEmbedUnimplementedForm_ColumnServer() {}

// UnsafeForm_ColumnServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Form_ColumnServer will
// result in compilation errors.
type UnsafeForm_ColumnServer interface {
	mustEmbedUnimplementedForm_ColumnServer()
}

func RegisterForm_ColumnServer(s grpc.ServiceRegistrar, srv Form_ColumnServer) {
	s.RegisterService(&Form_Column_ServiceDesc, srv)
}

func _Form_Column_Form_ColumnCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Form_ColumnCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Form_ColumnServer).Form_ColumnCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Form_Column/Form_ColumnCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Form_ColumnServer).Form_ColumnCreate(ctx, req.(*Form_ColumnCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Form_Column_Form_ColumnDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Form_ColumnDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Form_ColumnServer).Form_ColumnDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Form_Column/Form_ColumnDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Form_ColumnServer).Form_ColumnDelete(ctx, req.(*Form_ColumnDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Form_Column_Form_ColumnUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Form_ColumnUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Form_ColumnServer).Form_ColumnUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Form_Column/Form_ColumnUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Form_ColumnServer).Form_ColumnUpdate(ctx, req.(*Form_ColumnUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Form_Column_Form_ColumnDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Form_ColumnDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Form_ColumnServer).Form_ColumnDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Form_Column/Form_ColumnDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Form_ColumnServer).Form_ColumnDetail(ctx, req.(*Form_ColumnDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Form_Column_Form_ColumnFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Form_ColumnFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Form_ColumnServer).Form_ColumnFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Form_Column/Form_ColumnFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Form_ColumnServer).Form_ColumnFilter(ctx, req.(*Form_ColumnFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Form_Column_ServiceDesc is the grpc.ServiceDesc for Form_Column service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Form_Column_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Form_Column",
	HandlerType: (*Form_ColumnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Form_ColumnCreate",
			Handler:    _Form_Column_Form_ColumnCreate_Handler,
		},
		{
			MethodName: "Form_ColumnDelete",
			Handler:    _Form_Column_Form_ColumnDelete_Handler,
		},
		{
			MethodName: "Form_ColumnUpdate",
			Handler:    _Form_Column_Form_ColumnUpdate_Handler,
		},
		{
			MethodName: "Form_ColumnDetail",
			Handler:    _Form_Column_Form_ColumnDetail_Handler,
		},
		{
			MethodName: "Form_ColumnFilter",
			Handler:    _Form_Column_Form_ColumnFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "formcolumn.proto",
}
