// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: workitem.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWorkItemWorkItemCreate = "/api.WorkItem/WorkItemCreate"
const OperationWorkItemWorkItemDelete = "/api.WorkItem/WorkItemDelete"
const OperationWorkItemWorkItemDetail = "/api.WorkItem/WorkItemDetail"
const OperationWorkItemWorkItemFilter = "/api.WorkItem/WorkItemFilter"
const OperationWorkItemWorkItemUpdate = "/api.WorkItem/WorkItemUpdate"

type WorkItemHTTPServer interface {
	WorkItemCreate(context.Context, *WorkItemCreateRequest) (*WorkItemCreateResponse, error)
	WorkItemDelete(context.Context, *WorkItemDeleteRequest) (*WorkItemDeleteResponse, error)
	WorkItemDetail(context.Context, *WorkItemDetailRequest) (*WorkItemDetailResponse, error)
	WorkItemFilter(context.Context, *WorkItemFilterRequest) (*WorkItemFilterResponse, error)
	WorkItemUpdate(context.Context, *WorkItemUpdateRequest) (*WorkItemUpdateResponse, error)
}

func RegisterWorkItemHTTPServer(s *http.Server, srv WorkItemHTTPServer) {
	r := s.Route("/")
	r.POST("/workitem", _WorkItem_WorkItemCreate0_HTTP_Handler(srv))
	r.DELETE("/workitem/{id}", _WorkItem_WorkItemDelete0_HTTP_Handler(srv))
	r.PUT("/workitem", _WorkItem_WorkItemUpdate0_HTTP_Handler(srv))
	r.GET("/workitem/{id}", _WorkItem_WorkItemDetail0_HTTP_Handler(srv))
	r.POST("/workitem/filter", _WorkItem_WorkItemFilter0_HTTP_Handler(srv))
}

func _WorkItem_WorkItemCreate0_HTTP_Handler(srv WorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WorkItemCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkItemWorkItemCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WorkItemCreate(ctx, req.(*WorkItemCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WorkItemCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _WorkItem_WorkItemDelete0_HTTP_Handler(srv WorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WorkItemDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkItemWorkItemDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WorkItemDelete(ctx, req.(*WorkItemDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WorkItemDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _WorkItem_WorkItemUpdate0_HTTP_Handler(srv WorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WorkItemUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkItemWorkItemUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WorkItemUpdate(ctx, req.(*WorkItemUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WorkItemUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _WorkItem_WorkItemDetail0_HTTP_Handler(srv WorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WorkItemDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkItemWorkItemDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WorkItemDetail(ctx, req.(*WorkItemDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WorkItemDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _WorkItem_WorkItemFilter0_HTTP_Handler(srv WorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WorkItemFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkItemWorkItemFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WorkItemFilter(ctx, req.(*WorkItemFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WorkItemFilterResponse)
		return ctx.Result(200, reply)
	}
}

type WorkItemHTTPClient interface {
	WorkItemCreate(ctx context.Context, req *WorkItemCreateRequest, opts ...http.CallOption) (rsp *WorkItemCreateResponse, err error)
	WorkItemDelete(ctx context.Context, req *WorkItemDeleteRequest, opts ...http.CallOption) (rsp *WorkItemDeleteResponse, err error)
	WorkItemDetail(ctx context.Context, req *WorkItemDetailRequest, opts ...http.CallOption) (rsp *WorkItemDetailResponse, err error)
	WorkItemFilter(ctx context.Context, req *WorkItemFilterRequest, opts ...http.CallOption) (rsp *WorkItemFilterResponse, err error)
	WorkItemUpdate(ctx context.Context, req *WorkItemUpdateRequest, opts ...http.CallOption) (rsp *WorkItemUpdateResponse, err error)
}

type WorkItemHTTPClientImpl struct {
	cc *http.Client
}

func NewWorkItemHTTPClient(client *http.Client) WorkItemHTTPClient {
	return &WorkItemHTTPClientImpl{client}
}

func (c *WorkItemHTTPClientImpl) WorkItemCreate(ctx context.Context, in *WorkItemCreateRequest, opts ...http.CallOption) (*WorkItemCreateResponse, error) {
	var out WorkItemCreateResponse
	pattern := "/workitem"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkItemWorkItemCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkItemHTTPClientImpl) WorkItemDelete(ctx context.Context, in *WorkItemDeleteRequest, opts ...http.CallOption) (*WorkItemDeleteResponse, error) {
	var out WorkItemDeleteResponse
	pattern := "/workitem/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWorkItemWorkItemDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkItemHTTPClientImpl) WorkItemDetail(ctx context.Context, in *WorkItemDetailRequest, opts ...http.CallOption) (*WorkItemDetailResponse, error) {
	var out WorkItemDetailResponse
	pattern := "/workitem/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWorkItemWorkItemDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkItemHTTPClientImpl) WorkItemFilter(ctx context.Context, in *WorkItemFilterRequest, opts ...http.CallOption) (*WorkItemFilterResponse, error) {
	var out WorkItemFilterResponse
	pattern := "/workitem/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkItemWorkItemFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkItemHTTPClientImpl) WorkItemUpdate(ctx context.Context, in *WorkItemUpdateRequest, opts ...http.CallOption) (*WorkItemUpdateResponse, error) {
	var out WorkItemUpdateResponse
	pattern := "/workitem"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkItemWorkItemUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
