// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: relate.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelateClient is the client API for Relate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelateClient interface {
	// 工作项关联表数据添加
	RelateCreate(ctx context.Context, in *RelateCreateRequest, opts ...grpc.CallOption) (*RelateCreateResponse, error)
	// 工作项关联表数据删除
	RelateDelete(ctx context.Context, in *RelateDeleteRequest, opts ...grpc.CallOption) (*RelateDeleteResponse, error)
	// 工作项关联表数据更新
	RelateUpdate(ctx context.Context, in *RelateUpdateRequest, opts ...grpc.CallOption) (*RelateUpdateResponse, error)
	// 工作项关联表数据详情查询
	RelateDetail(ctx context.Context, in *RelateDetailRequest, opts ...grpc.CallOption) (*RelateDetailResponse, error)
	// 工作项关联表数据过滤查询
	RelateFilter(ctx context.Context, in *RelateFilterRequest, opts ...grpc.CallOption) (*RelateFilterResponse, error)
}

type relateClient struct {
	cc grpc.ClientConnInterface
}

func NewRelateClient(cc grpc.ClientConnInterface) RelateClient {
	return &relateClient{cc}
}

func (c *relateClient) RelateCreate(ctx context.Context, in *RelateCreateRequest, opts ...grpc.CallOption) (*RelateCreateResponse, error) {
	out := new(RelateCreateResponse)
	err := c.cc.Invoke(ctx, "/api.Relate/RelateCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relateClient) RelateDelete(ctx context.Context, in *RelateDeleteRequest, opts ...grpc.CallOption) (*RelateDeleteResponse, error) {
	out := new(RelateDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.Relate/RelateDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relateClient) RelateUpdate(ctx context.Context, in *RelateUpdateRequest, opts ...grpc.CallOption) (*RelateUpdateResponse, error) {
	out := new(RelateUpdateResponse)
	err := c.cc.Invoke(ctx, "/api.Relate/RelateUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relateClient) RelateDetail(ctx context.Context, in *RelateDetailRequest, opts ...grpc.CallOption) (*RelateDetailResponse, error) {
	out := new(RelateDetailResponse)
	err := c.cc.Invoke(ctx, "/api.Relate/RelateDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relateClient) RelateFilter(ctx context.Context, in *RelateFilterRequest, opts ...grpc.CallOption) (*RelateFilterResponse, error) {
	out := new(RelateFilterResponse)
	err := c.cc.Invoke(ctx, "/api.Relate/RelateFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelateServer is the server API for Relate service.
// All implementations must embed UnimplementedRelateServer
// for forward compatibility
type RelateServer interface {
	// 工作项关联表数据添加
	RelateCreate(context.Context, *RelateCreateRequest) (*RelateCreateResponse, error)
	// 工作项关联表数据删除
	RelateDelete(context.Context, *RelateDeleteRequest) (*RelateDeleteResponse, error)
	// 工作项关联表数据更新
	RelateUpdate(context.Context, *RelateUpdateRequest) (*RelateUpdateResponse, error)
	// 工作项关联表数据详情查询
	RelateDetail(context.Context, *RelateDetailRequest) (*RelateDetailResponse, error)
	// 工作项关联表数据过滤查询
	RelateFilter(context.Context, *RelateFilterRequest) (*RelateFilterResponse, error)
	mustEmbedUnimplementedRelateServer()
}

// UnimplementedRelateServer must be embedded to have forward compatible implementations.
type UnimplementedRelateServer struct {
}

func (UnimplementedRelateServer) RelateCreate(context.Context, *RelateCreateRequest) (*RelateCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelateCreate not implemented")
}
func (UnimplementedRelateServer) RelateDelete(context.Context, *RelateDeleteRequest) (*RelateDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelateDelete not implemented")
}
func (UnimplementedRelateServer) RelateUpdate(context.Context, *RelateUpdateRequest) (*RelateUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelateUpdate not implemented")
}
func (UnimplementedRelateServer) RelateDetail(context.Context, *RelateDetailRequest) (*RelateDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelateDetail not implemented")
}
func (UnimplementedRelateServer) RelateFilter(context.Context, *RelateFilterRequest) (*RelateFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelateFilter not implemented")
}
func (UnimplementedRelateServer) mustEmbedUnimplementedRelateServer() {}

// UnsafeRelateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelateServer will
// result in compilation errors.
type UnsafeRelateServer interface {
	mustEmbedUnimplementedRelateServer()
}

func RegisterRelateServer(s grpc.ServiceRegistrar, srv RelateServer) {
	s.RegisterService(&Relate_ServiceDesc, srv)
}

func _Relate_RelateCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelateCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelateServer).RelateCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relate/RelateCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelateServer).RelateCreate(ctx, req.(*RelateCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relate_RelateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelateDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelateServer).RelateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relate/RelateDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelateServer).RelateDelete(ctx, req.(*RelateDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relate_RelateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelateServer).RelateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relate/RelateUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelateServer).RelateUpdate(ctx, req.(*RelateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relate_RelateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelateDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelateServer).RelateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relate/RelateDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelateServer).RelateDetail(ctx, req.(*RelateDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relate_RelateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelateFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelateServer).RelateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relate/RelateFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelateServer).RelateFilter(ctx, req.(*RelateFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Relate_ServiceDesc is the grpc.ServiceDesc for Relate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Relate",
	HandlerType: (*RelateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelateCreate",
			Handler:    _Relate_RelateCreate_Handler,
		},
		{
			MethodName: "RelateDelete",
			Handler:    _Relate_RelateDelete_Handler,
		},
		{
			MethodName: "RelateUpdate",
			Handler:    _Relate_RelateUpdate_Handler,
		},
		{
			MethodName: "RelateDetail",
			Handler:    _Relate_RelateDetail_Handler,
		},
		{
			MethodName: "RelateFilter",
			Handler:    _Relate_RelateFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relate.proto",
}
