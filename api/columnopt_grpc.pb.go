// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: columnopt.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ColumnOptClient is the client API for ColumnOpt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ColumnOptClient interface {
	// 表单字段可选值选项数据添加
	ColumnOptCreate(ctx context.Context, in *ColumnOptCreateRequest, opts ...grpc.CallOption) (*ColumnOptCreateResponse, error)
	// 表单字段可选值选项数据删除
	ColumnOptDelete(ctx context.Context, in *ColumnOptDeleteRequest, opts ...grpc.CallOption) (*ColumnOptDeleteResponse, error)
	// 表单字段可选值选项数据更新
	ColumnOptUpdate(ctx context.Context, in *ColumnOptUpdateRequest, opts ...grpc.CallOption) (*ColumnOptUpdateResponse, error)
	// 表单字段可选值选项数据详情查询
	ColumnOptDetail(ctx context.Context, in *ColumnOptDetailRequest, opts ...grpc.CallOption) (*ColumnOptDetailResponse, error)
	// 表单字段可选值选项数据过滤查询
	ColumnOptFilter(ctx context.Context, in *ColumnOptFilterRequest, opts ...grpc.CallOption) (*ColumnOptFilterResponse, error)
}

type columnOptClient struct {
	cc grpc.ClientConnInterface
}

func NewColumnOptClient(cc grpc.ClientConnInterface) ColumnOptClient {
	return &columnOptClient{cc}
}

func (c *columnOptClient) ColumnOptCreate(ctx context.Context, in *ColumnOptCreateRequest, opts ...grpc.CallOption) (*ColumnOptCreateResponse, error) {
	out := new(ColumnOptCreateResponse)
	err := c.cc.Invoke(ctx, "/api.ColumnOpt/ColumnOptCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnOptClient) ColumnOptDelete(ctx context.Context, in *ColumnOptDeleteRequest, opts ...grpc.CallOption) (*ColumnOptDeleteResponse, error) {
	out := new(ColumnOptDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.ColumnOpt/ColumnOptDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnOptClient) ColumnOptUpdate(ctx context.Context, in *ColumnOptUpdateRequest, opts ...grpc.CallOption) (*ColumnOptUpdateResponse, error) {
	out := new(ColumnOptUpdateResponse)
	err := c.cc.Invoke(ctx, "/api.ColumnOpt/ColumnOptUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnOptClient) ColumnOptDetail(ctx context.Context, in *ColumnOptDetailRequest, opts ...grpc.CallOption) (*ColumnOptDetailResponse, error) {
	out := new(ColumnOptDetailResponse)
	err := c.cc.Invoke(ctx, "/api.ColumnOpt/ColumnOptDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnOptClient) ColumnOptFilter(ctx context.Context, in *ColumnOptFilterRequest, opts ...grpc.CallOption) (*ColumnOptFilterResponse, error) {
	out := new(ColumnOptFilterResponse)
	err := c.cc.Invoke(ctx, "/api.ColumnOpt/ColumnOptFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColumnOptServer is the server API for ColumnOpt service.
// All implementations must embed UnimplementedColumnOptServer
// for forward compatibility
type ColumnOptServer interface {
	// 表单字段可选值选项数据添加
	ColumnOptCreate(context.Context, *ColumnOptCreateRequest) (*ColumnOptCreateResponse, error)
	// 表单字段可选值选项数据删除
	ColumnOptDelete(context.Context, *ColumnOptDeleteRequest) (*ColumnOptDeleteResponse, error)
	// 表单字段可选值选项数据更新
	ColumnOptUpdate(context.Context, *ColumnOptUpdateRequest) (*ColumnOptUpdateResponse, error)
	// 表单字段可选值选项数据详情查询
	ColumnOptDetail(context.Context, *ColumnOptDetailRequest) (*ColumnOptDetailResponse, error)
	// 表单字段可选值选项数据过滤查询
	ColumnOptFilter(context.Context, *ColumnOptFilterRequest) (*ColumnOptFilterResponse, error)
	mustEmbedUnimplementedColumnOptServer()
}

// UnimplementedColumnOptServer must be embedded to have forward compatible implementations.
type UnimplementedColumnOptServer struct {
}

func (UnimplementedColumnOptServer) ColumnOptCreate(context.Context, *ColumnOptCreateRequest) (*ColumnOptCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnOptCreate not implemented")
}
func (UnimplementedColumnOptServer) ColumnOptDelete(context.Context, *ColumnOptDeleteRequest) (*ColumnOptDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnOptDelete not implemented")
}
func (UnimplementedColumnOptServer) ColumnOptUpdate(context.Context, *ColumnOptUpdateRequest) (*ColumnOptUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnOptUpdate not implemented")
}
func (UnimplementedColumnOptServer) ColumnOptDetail(context.Context, *ColumnOptDetailRequest) (*ColumnOptDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnOptDetail not implemented")
}
func (UnimplementedColumnOptServer) ColumnOptFilter(context.Context, *ColumnOptFilterRequest) (*ColumnOptFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnOptFilter not implemented")
}
func (UnimplementedColumnOptServer) mustEmbedUnimplementedColumnOptServer() {}

// UnsafeColumnOptServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ColumnOptServer will
// result in compilation errors.
type UnsafeColumnOptServer interface {
	mustEmbedUnimplementedColumnOptServer()
}

func RegisterColumnOptServer(s grpc.ServiceRegistrar, srv ColumnOptServer) {
	s.RegisterService(&ColumnOpt_ServiceDesc, srv)
}

func _ColumnOpt_ColumnOptCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnOptCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColumnOptServer).ColumnOptCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ColumnOpt/ColumnOptCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColumnOptServer).ColumnOptCreate(ctx, req.(*ColumnOptCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColumnOpt_ColumnOptDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnOptDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColumnOptServer).ColumnOptDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ColumnOpt/ColumnOptDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColumnOptServer).ColumnOptDelete(ctx, req.(*ColumnOptDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColumnOpt_ColumnOptUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnOptUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColumnOptServer).ColumnOptUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ColumnOpt/ColumnOptUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColumnOptServer).ColumnOptUpdate(ctx, req.(*ColumnOptUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColumnOpt_ColumnOptDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnOptDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColumnOptServer).ColumnOptDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ColumnOpt/ColumnOptDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColumnOptServer).ColumnOptDetail(ctx, req.(*ColumnOptDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColumnOpt_ColumnOptFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnOptFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColumnOptServer).ColumnOptFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ColumnOpt/ColumnOptFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColumnOptServer).ColumnOptFilter(ctx, req.(*ColumnOptFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ColumnOpt_ServiceDesc is the grpc.ServiceDesc for ColumnOpt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ColumnOpt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ColumnOpt",
	HandlerType: (*ColumnOptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ColumnOptCreate",
			Handler:    _ColumnOpt_ColumnOptCreate_Handler,
		},
		{
			MethodName: "ColumnOptDelete",
			Handler:    _ColumnOpt_ColumnOptDelete_Handler,
		},
		{
			MethodName: "ColumnOptUpdate",
			Handler:    _ColumnOpt_ColumnOptUpdate_Handler,
		},
		{
			MethodName: "ColumnOptDetail",
			Handler:    _ColumnOpt_ColumnOptDetail_Handler,
		},
		{
			MethodName: "ColumnOptFilter",
			Handler:    _ColumnOpt_ColumnOptFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "columnopt.proto",
}
