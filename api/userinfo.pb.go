// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.10
// source: userinfo.proto

package api

import (
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserInfo1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Gender             string `protobuf:"bytes,3,opt,name=gender,proto3" json:"gender,omitempty"`
	Nation             string `protobuf:"bytes,4,opt,name=nation,proto3" json:"nation,omitempty"`
	DateOfBirth        string `protobuf:"bytes,5,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	IdNumber           string `protobuf:"bytes,6,opt,name=idNumber,proto3" json:"idNumber,omitempty"`
	Address            string `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	IssuingAuthority   string `protobuf:"bytes,8,opt,name=issuingAuthority,proto3" json:"issuingAuthority,omitempty"`
	EffectiveDate      string `protobuf:"bytes,9,opt,name=effectiveDate,proto3" json:"effectiveDate,omitempty"`
	ExpirationDate     string `protobuf:"bytes,10,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	ProfilePhoto       string `protobuf:"bytes,11,opt,name=profilePhoto,proto3" json:"profilePhoto,omitempty"`
	Certified          bool   `protobuf:"varint,12,opt,name=certified,proto3" json:"certified,omitempty"`
	CertifiedTime      string `protobuf:"bytes,13,opt,name=certifiedTime,proto3" json:"certifiedTime,omitempty"`
	Avatar             string `protobuf:"bytes,14,opt,name=avatar,proto3" json:"avatar,omitempty"`
	ResidentialAddr    string `protobuf:"bytes,15,opt,name=residentialAddr,proto3" json:"residentialAddr,omitempty"`
	FormerName         string `protobuf:"bytes,16,opt,name=formerName,proto3" json:"formerName,omitempty"`
	Nickname           string `protobuf:"bytes,17,opt,name=nickname,proto3" json:"nickname,omitempty"`
	MobileVerified     bool   `protobuf:"varint,18,opt,name=mobileVerified,proto3" json:"mobileVerified,omitempty"`
	MobileVerifiedTime string `protobuf:"bytes,19,opt,name=mobileVerifiedTime,proto3" json:"mobileVerifiedTime,omitempty"`
	EmailVerified      bool   `protobuf:"varint,20,opt,name=emailVerified,proto3" json:"emailVerified,omitempty"`
	EmailVerifiedTime  string `protobuf:"bytes,21,opt,name=emailVerifiedTime,proto3" json:"emailVerifiedTime,omitempty"`
	CreateTime         string `protobuf:"bytes,22,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime         string `protobuf:"bytes,23,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	TbUserId           string `protobuf:"bytes,24,opt,name=tbUserId,proto3" json:"tbUserId,omitempty"`
}

func (x *UserInfo1) Reset() {
	*x = UserInfo1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userinfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo1) ProtoMessage() {}

func (x *UserInfo1) ProtoReflect() protoreflect.Message {
	mi := &file_userinfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo1.ProtoReflect.Descriptor instead.
func (*UserInfo1) Descriptor() ([]byte, []int) {
	return file_userinfo_proto_rawDescGZIP(), []int{0}
}

func (x *UserInfo1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfo1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo1) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UserInfo1) GetNation() string {
	if x != nil {
		return x.Nation
	}
	return ""
}

func (x *UserInfo1) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *UserInfo1) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *UserInfo1) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserInfo1) GetIssuingAuthority() string {
	if x != nil {
		return x.IssuingAuthority
	}
	return ""
}

func (x *UserInfo1) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

func (x *UserInfo1) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *UserInfo1) GetProfilePhoto() string {
	if x != nil {
		return x.ProfilePhoto
	}
	return ""
}

func (x *UserInfo1) GetCertified() bool {
	if x != nil {
		return x.Certified
	}
	return false
}

func (x *UserInfo1) GetCertifiedTime() string {
	if x != nil {
		return x.CertifiedTime
	}
	return ""
}

func (x *UserInfo1) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfo1) GetResidentialAddr() string {
	if x != nil {
		return x.ResidentialAddr
	}
	return ""
}

func (x *UserInfo1) GetFormerName() string {
	if x != nil {
		return x.FormerName
	}
	return ""
}

func (x *UserInfo1) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfo1) GetMobileVerified() bool {
	if x != nil {
		return x.MobileVerified
	}
	return false
}

func (x *UserInfo1) GetMobileVerifiedTime() string {
	if x != nil {
		return x.MobileVerifiedTime
	}
	return ""
}

func (x *UserInfo1) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *UserInfo1) GetEmailVerifiedTime() string {
	if x != nil {
		return x.EmailVerifiedTime
	}
	return ""
}

func (x *UserInfo1) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UserInfo1) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *UserInfo1) GetTbUserId() string {
	if x != nil {
		return x.TbUserId
	}
	return ""
}

type UserInfoCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address            string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Avatar             string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Certified          bool   `protobuf:"varint,3,opt,name=certified,proto3" json:"certified,omitempty"`
	CertifiedTime      string `protobuf:"bytes,4,opt,name=certifiedTime,proto3" json:"certifiedTime,omitempty"`
	DateOfBirth        string `protobuf:"bytes,5,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	EffectiveDate      string `protobuf:"bytes,6,opt,name=effectiveDate,proto3" json:"effectiveDate,omitempty"`
	EmailVerified      bool   `protobuf:"varint,7,opt,name=emailVerified,proto3" json:"emailVerified,omitempty"`
	EmailVerifiedTime  string `protobuf:"bytes,8,opt,name=emailVerifiedTime,proto3" json:"emailVerifiedTime,omitempty"`
	ExpirationDate     string `protobuf:"bytes,9,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	FormerName         string `protobuf:"bytes,10,opt,name=formerName,proto3" json:"formerName,omitempty"`
	Gender             string `protobuf:"bytes,11,opt,name=gender,proto3" json:"gender,omitempty"`
	IdNumber           string `protobuf:"bytes,12,opt,name=idNumber,proto3" json:"idNumber,omitempty"`
	IssuingAuthority   string `protobuf:"bytes,13,opt,name=issuingAuthority,proto3" json:"issuingAuthority,omitempty"`
	MobileVerified     bool   `protobuf:"varint,14,opt,name=mobileVerified,proto3" json:"mobileVerified,omitempty"`
	MobileVerifiedTime string `protobuf:"bytes,15,opt,name=mobileVerifiedTime,proto3" json:"mobileVerifiedTime,omitempty"`
	Name               string `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`
	Nation             string `protobuf:"bytes,17,opt,name=nation,proto3" json:"nation,omitempty"`
	Nickname           string `protobuf:"bytes,18,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ProfilePhoto       string `protobuf:"bytes,19,opt,name=profilePhoto,proto3" json:"profilePhoto,omitempty"`
	ResidentialAddr    string `protobuf:"bytes,20,opt,name=residentialAddr,proto3" json:"residentialAddr,omitempty"`
	TbUserId           string `protobuf:"bytes,21,opt,name=tbUserId,proto3" json:"tbUserId,omitempty"`
}

func (x *UserInfoCreateRequest) Reset() {
	*x = UserInfoCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userinfo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoCreateRequest) ProtoMessage() {}

func (x *UserInfoCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userinfo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoCreateRequest.ProtoReflect.Descriptor instead.
func (*UserInfoCreateRequest) Descriptor() ([]byte, []int) {
	return file_userinfo_proto_rawDescGZIP(), []int{1}
}

func (x *UserInfoCreateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserInfoCreateRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfoCreateRequest) GetCertified() bool {
	if x != nil {
		return x.Certified
	}
	return false
}

func (x *UserInfoCreateRequest) GetCertifiedTime() string {
	if x != nil {
		return x.CertifiedTime
	}
	return ""
}

func (x *UserInfoCreateRequest) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *UserInfoCreateRequest) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

func (x *UserInfoCreateRequest) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *UserInfoCreateRequest) GetEmailVerifiedTime() string {
	if x != nil {
		return x.EmailVerifiedTime
	}
	return ""
}

func (x *UserInfoCreateRequest) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *UserInfoCreateRequest) GetFormerName() string {
	if x != nil {
		return x.FormerName
	}
	return ""
}

func (x *UserInfoCreateRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UserInfoCreateRequest) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *UserInfoCreateRequest) GetIssuingAuthority() string {
	if x != nil {
		return x.IssuingAuthority
	}
	return ""
}

func (x *UserInfoCreateRequest) GetMobileVerified() bool {
	if x != nil {
		return x.MobileVerified
	}
	return false
}

func (x *UserInfoCreateRequest) GetMobileVerifiedTime() string {
	if x != nil {
		return x.MobileVerifiedTime
	}
	return ""
}

func (x *UserInfoCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfoCreateRequest) GetNation() string {
	if x != nil {
		return x.Nation
	}
	return ""
}

func (x *UserInfoCreateRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfoCreateRequest) GetProfilePhoto() string {
	if x != nil {
		return x.ProfilePhoto
	}
	return ""
}

func (x *UserInfoCreateRequest) GetResidentialAddr() string {
	if x != nil {
		return x.ResidentialAddr
	}
	return ""
}

func (x *UserInfoCreateRequest) GetTbUserId() string {
	if x != nil {
		return x.TbUserId
	}
	return ""
}

type UserInfoCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserInfoCreateResponse) Reset() {
	*x = UserInfoCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userinfo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoCreateResponse) ProtoMessage() {}

func (x *UserInfoCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userinfo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoCreateResponse.ProtoReflect.Descriptor instead.
func (*UserInfoCreateResponse) Descriptor() ([]byte, []int) {
	return file_userinfo_proto_rawDescGZIP(), []int{2}
}

func (x *UserInfoCreateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UserInfoDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserInfoDeleteRequest) Reset() {
	*x = UserInfoDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userinfo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoDeleteRequest) ProtoMessage() {}

func (x *UserInfoDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userinfo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoDeleteRequest.ProtoReflect.Descriptor instead.
func (*UserInfoDeleteRequest) Descriptor() ([]byte, []int) {
	return file_userinfo_proto_rawDescGZIP(), []int{3}
}

func (x *UserInfoDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UserInfoDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserInfoDeleteResponse) Reset() {
	*x = UserInfoDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userinfo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoDeleteResponse) ProtoMessage() {}

func (x *UserInfoDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userinfo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoDeleteResponse.ProtoReflect.Descriptor instead.
func (*UserInfoDeleteResponse) Descriptor() ([]byte, []int) {
	return file_userinfo_proto_rawDescGZIP(), []int{4}
}

func (x *UserInfoDeleteResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UserInfoUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address            string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Avatar             string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Certified          bool   `protobuf:"varint,3,opt,name=certified,proto3" json:"certified,omitempty"`
	CertifiedTime      string `protobuf:"bytes,4,opt,name=certifiedTime,proto3" json:"certifiedTime,omitempty"`
	DateOfBirth        string `protobuf:"bytes,5,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	EffectiveDate      string `protobuf:"bytes,6,opt,name=effectiveDate,proto3" json:"effectiveDate,omitempty"`
	EmailVerified      bool   `protobuf:"varint,7,opt,name=emailVerified,proto3" json:"emailVerified,omitempty"`
	EmailVerifiedTime  string `protobuf:"bytes,8,opt,name=emailVerifiedTime,proto3" json:"emailVerifiedTime,omitempty"`
	ExpirationDate     string `protobuf:"bytes,9,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	FormerName         string `protobuf:"bytes,10,opt,name=formerName,proto3" json:"formerName,omitempty"`
	Gender             string `protobuf:"bytes,11,opt,name=gender,proto3" json:"gender,omitempty"`
	IdNumber           string `protobuf:"bytes,12,opt,name=idNumber,proto3" json:"idNumber,omitempty"`
	IssuingAuthority   string `protobuf:"bytes,13,opt,name=issuingAuthority,proto3" json:"issuingAuthority,omitempty"`
	MobileVerified     bool   `protobuf:"varint,14,opt,name=mobileVerified,proto3" json:"mobileVerified,omitempty"`
	MobileVerifiedTime string `protobuf:"bytes,15,opt,name=mobileVerifiedTime,proto3" json:"mobileVerifiedTime,omitempty"`
	Name               string `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`
	Nation             string `protobuf:"bytes,17,opt,name=nation,proto3" json:"nation,omitempty"`
	Nickname           string `protobuf:"bytes,18,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ProfilePhoto       string `protobuf:"bytes,19,opt,name=profilePhoto,proto3" json:"profilePhoto,omitempty"`
	ResidentialAddr    string `protobuf:"bytes,20,opt,name=residentialAddr,proto3" json:"residentialAddr,omitempty"`
	TbUserId           string `protobuf:"bytes,21,opt,name=tbUserId,proto3" json:"tbUserId,omitempty"`
}

func (x *UserInfoUpdateRequest) Reset() {
	*x = UserInfoUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userinfo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoUpdateRequest) ProtoMessage() {}

func (x *UserInfoUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userinfo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoUpdateRequest.ProtoReflect.Descriptor instead.
func (*UserInfoUpdateRequest) Descriptor() ([]byte, []int) {
	return file_userinfo_proto_rawDescGZIP(), []int{5}
}

func (x *UserInfoUpdateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetCertified() bool {
	if x != nil {
		return x.Certified
	}
	return false
}

func (x *UserInfoUpdateRequest) GetCertifiedTime() string {
	if x != nil {
		return x.CertifiedTime
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *UserInfoUpdateRequest) GetEmailVerifiedTime() string {
	if x != nil {
		return x.EmailVerifiedTime
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetFormerName() string {
	if x != nil {
		return x.FormerName
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetIssuingAuthority() string {
	if x != nil {
		return x.IssuingAuthority
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetMobileVerified() bool {
	if x != nil {
		return x.MobileVerified
	}
	return false
}

func (x *UserInfoUpdateRequest) GetMobileVerifiedTime() string {
	if x != nil {
		return x.MobileVerifiedTime
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetNation() string {
	if x != nil {
		return x.Nation
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetProfilePhoto() string {
	if x != nil {
		return x.ProfilePhoto
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetResidentialAddr() string {
	if x != nil {
		return x.ResidentialAddr
	}
	return ""
}

func (x *UserInfoUpdateRequest) GetTbUserId() string {
	if x != nil {
		return x.TbUserId
	}
	return ""
}

type UserInfoUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address            string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Avatar             string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Certified          bool   `protobuf:"varint,3,opt,name=certified,proto3" json:"certified,omitempty"`
	CertifiedTime      string `protobuf:"bytes,4,opt,name=certifiedTime,proto3" json:"certifiedTime,omitempty"`
	CreateTime         string `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	DateOfBirth        string `protobuf:"bytes,6,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	EffectiveDate      string `protobuf:"bytes,7,opt,name=effectiveDate,proto3" json:"effectiveDate,omitempty"`
	EmailVerified      bool   `protobuf:"varint,8,opt,name=emailVerified,proto3" json:"emailVerified,omitempty"`
	EmailVerifiedTime  string `protobuf:"bytes,9,opt,name=emailVerifiedTime,proto3" json:"emailVerifiedTime,omitempty"`
	ExpirationDate     string `protobuf:"bytes,10,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	FormerName         string `protobuf:"bytes,11,opt,name=formerName,proto3" json:"formerName,omitempty"`
	Gender             string `protobuf:"bytes,12,opt,name=gender,proto3" json:"gender,omitempty"`
	Id                 string `protobuf:"bytes,13,opt,name=id,proto3" json:"id,omitempty"`
	IdNumber           string `protobuf:"bytes,14,opt,name=idNumber,proto3" json:"idNumber,omitempty"`
	IssuingAuthority   string `protobuf:"bytes,15,opt,name=issuingAuthority,proto3" json:"issuingAuthority,omitempty"`
	MobileVerified     bool   `protobuf:"varint,16,opt,name=mobileVerified,proto3" json:"mobileVerified,omitempty"`
	MobileVerifiedTime string `protobuf:"bytes,17,opt,name=mobileVerifiedTime,proto3" json:"mobileVerifiedTime,omitempty"`
	Name               string `protobuf:"bytes,18,opt,name=name,proto3" json:"name,omitempty"`
	Nation             string `protobuf:"bytes,19,opt,name=nation,proto3" json:"nation,omitempty"`
	Nickname           string `protobuf:"bytes,20,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ProfilePhoto       string `protobuf:"bytes,21,opt,name=profilePhoto,proto3" json:"profilePhoto,omitempty"`
	ResidentialAddr    string `protobuf:"bytes,22,opt,name=residentialAddr,proto3" json:"residentialAddr,omitempty"`
	TbUserId           string `protobuf:"bytes,23,opt,name=tbUserId,proto3" json:"tbUserId,omitempty"`
	UpdateTime         string `protobuf:"bytes,24,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *UserInfoUpdateResponse) Reset() {
	*x = UserInfoUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userinfo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoUpdateResponse) ProtoMessage() {}

func (x *UserInfoUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userinfo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoUpdateResponse.ProtoReflect.Descriptor instead.
func (*UserInfoUpdateResponse) Descriptor() ([]byte, []int) {
	return file_userinfo_proto_rawDescGZIP(), []int{6}
}

func (x *UserInfoUpdateResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetCertified() bool {
	if x != nil {
		return x.Certified
	}
	return false
}

func (x *UserInfoUpdateResponse) GetCertifiedTime() string {
	if x != nil {
		return x.CertifiedTime
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *UserInfoUpdateResponse) GetEmailVerifiedTime() string {
	if x != nil {
		return x.EmailVerifiedTime
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetFormerName() string {
	if x != nil {
		return x.FormerName
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetIssuingAuthority() string {
	if x != nil {
		return x.IssuingAuthority
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetMobileVerified() bool {
	if x != nil {
		return x.MobileVerified
	}
	return false
}

func (x *UserInfoUpdateResponse) GetMobileVerifiedTime() string {
	if x != nil {
		return x.MobileVerifiedTime
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetNation() string {
	if x != nil {
		return x.Nation
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetProfilePhoto() string {
	if x != nil {
		return x.ProfilePhoto
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetResidentialAddr() string {
	if x != nil {
		return x.ResidentialAddr
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetTbUserId() string {
	if x != nil {
		return x.TbUserId
	}
	return ""
}

func (x *UserInfoUpdateResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type UserInfoDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserInfoDetailRequest) Reset() {
	*x = UserInfoDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userinfo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoDetailRequest) ProtoMessage() {}

func (x *UserInfoDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userinfo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoDetailRequest.ProtoReflect.Descriptor instead.
func (*UserInfoDetailRequest) Descriptor() ([]byte, []int) {
	return file_userinfo_proto_rawDescGZIP(), []int{7}
}

func (x *UserInfoDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UserInfoDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address            string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Avatar             string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Certified          bool   `protobuf:"varint,3,opt,name=certified,proto3" json:"certified,omitempty"`
	CertifiedTime      string `protobuf:"bytes,4,opt,name=certifiedTime,proto3" json:"certifiedTime,omitempty"`
	CreateTime         string `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	DateOfBirth        string `protobuf:"bytes,6,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	EffectiveDate      string `protobuf:"bytes,7,opt,name=effectiveDate,proto3" json:"effectiveDate,omitempty"`
	EmailVerified      bool   `protobuf:"varint,8,opt,name=emailVerified,proto3" json:"emailVerified,omitempty"`
	EmailVerifiedTime  string `protobuf:"bytes,9,opt,name=emailVerifiedTime,proto3" json:"emailVerifiedTime,omitempty"`
	ExpirationDate     string `protobuf:"bytes,10,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	FormerName         string `protobuf:"bytes,11,opt,name=formerName,proto3" json:"formerName,omitempty"`
	Gender             string `protobuf:"bytes,12,opt,name=gender,proto3" json:"gender,omitempty"`
	Id                 string `protobuf:"bytes,13,opt,name=id,proto3" json:"id,omitempty"`
	IdNumber           string `protobuf:"bytes,14,opt,name=idNumber,proto3" json:"idNumber,omitempty"`
	IssuingAuthority   string `protobuf:"bytes,15,opt,name=issuingAuthority,proto3" json:"issuingAuthority,omitempty"`
	MobileVerified     bool   `protobuf:"varint,16,opt,name=mobileVerified,proto3" json:"mobileVerified,omitempty"`
	MobileVerifiedTime string `protobuf:"bytes,17,opt,name=mobileVerifiedTime,proto3" json:"mobileVerifiedTime,omitempty"`
	Name               string `protobuf:"bytes,18,opt,name=name,proto3" json:"name,omitempty"`
	Nation             string `protobuf:"bytes,19,opt,name=nation,proto3" json:"nation,omitempty"`
	Nickname           string `protobuf:"bytes,20,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ProfilePhoto       string `protobuf:"bytes,21,opt,name=profilePhoto,proto3" json:"profilePhoto,omitempty"`
	ResidentialAddr    string `protobuf:"bytes,22,opt,name=residentialAddr,proto3" json:"residentialAddr,omitempty"`
	TbUserId           string `protobuf:"bytes,23,opt,name=tbUserId,proto3" json:"tbUserId,omitempty"`
	UpdateTime         string `protobuf:"bytes,24,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *UserInfoDetailResponse) Reset() {
	*x = UserInfoDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userinfo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoDetailResponse) ProtoMessage() {}

func (x *UserInfoDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userinfo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoDetailResponse.ProtoReflect.Descriptor instead.
func (*UserInfoDetailResponse) Descriptor() ([]byte, []int) {
	return file_userinfo_proto_rawDescGZIP(), []int{8}
}

func (x *UserInfoDetailResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserInfoDetailResponse) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfoDetailResponse) GetCertified() bool {
	if x != nil {
		return x.Certified
	}
	return false
}

func (x *UserInfoDetailResponse) GetCertifiedTime() string {
	if x != nil {
		return x.CertifiedTime
	}
	return ""
}

func (x *UserInfoDetailResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UserInfoDetailResponse) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *UserInfoDetailResponse) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

func (x *UserInfoDetailResponse) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *UserInfoDetailResponse) GetEmailVerifiedTime() string {
	if x != nil {
		return x.EmailVerifiedTime
	}
	return ""
}

func (x *UserInfoDetailResponse) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *UserInfoDetailResponse) GetFormerName() string {
	if x != nil {
		return x.FormerName
	}
	return ""
}

func (x *UserInfoDetailResponse) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UserInfoDetailResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfoDetailResponse) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *UserInfoDetailResponse) GetIssuingAuthority() string {
	if x != nil {
		return x.IssuingAuthority
	}
	return ""
}

func (x *UserInfoDetailResponse) GetMobileVerified() bool {
	if x != nil {
		return x.MobileVerified
	}
	return false
}

func (x *UserInfoDetailResponse) GetMobileVerifiedTime() string {
	if x != nil {
		return x.MobileVerifiedTime
	}
	return ""
}

func (x *UserInfoDetailResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfoDetailResponse) GetNation() string {
	if x != nil {
		return x.Nation
	}
	return ""
}

func (x *UserInfoDetailResponse) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfoDetailResponse) GetProfilePhoto() string {
	if x != nil {
		return x.ProfilePhoto
	}
	return ""
}

func (x *UserInfoDetailResponse) GetResidentialAddr() string {
	if x != nil {
		return x.ResidentialAddr
	}
	return ""
}

func (x *UserInfoDetailResponse) GetTbUserId() string {
	if x != nil {
		return x.TbUserId
	}
	return ""
}

func (x *UserInfoDetailResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type UserInfoFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter  *UserInfoFilterRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Page    uint32                        `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32                        `protobuf:"varint,3,opt,name=perPage,proto3" json:"perPage,omitempty"`
}

func (x *UserInfoFilterRequest) Reset() {
	*x = UserInfoFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userinfo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoFilterRequest) ProtoMessage() {}

func (x *UserInfoFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userinfo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoFilterRequest.ProtoReflect.Descriptor instead.
func (*UserInfoFilterRequest) Descriptor() ([]byte, []int) {
	return file_userinfo_proto_rawDescGZIP(), []int{9}
}

func (x *UserInfoFilterRequest) GetFilter() *UserInfoFilterRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *UserInfoFilterRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserInfoFilterRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type UserInfoFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    uint32                            `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32                            `protobuf:"varint,2,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Results []*UserInfoFilterResponse_Results `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Total   uint32                            `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *UserInfoFilterResponse) Reset() {
	*x = UserInfoFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userinfo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoFilterResponse) ProtoMessage() {}

func (x *UserInfoFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userinfo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoFilterResponse.ProtoReflect.Descriptor instead.
func (*UserInfoFilterResponse) Descriptor() ([]byte, []int) {
	return file_userinfo_proto_rawDescGZIP(), []int{10}
}

func (x *UserInfoFilterResponse) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserInfoFilterResponse) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *UserInfoFilterResponse) GetResults() []*UserInfoFilterResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *UserInfoFilterResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UserInfoFilterRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gender string   `protobuf:"bytes,1,opt,name=gender,proto3" json:"gender,omitempty"`
	Ids    []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	Key    string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *UserInfoFilterRequest_Filter) Reset() {
	*x = UserInfoFilterRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userinfo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoFilterRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoFilterRequest_Filter) ProtoMessage() {}

func (x *UserInfoFilterRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_userinfo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoFilterRequest_Filter.ProtoReflect.Descriptor instead.
func (*UserInfoFilterRequest_Filter) Descriptor() ([]byte, []int) {
	return file_userinfo_proto_rawDescGZIP(), []int{9, 0}
}

func (x *UserInfoFilterRequest_Filter) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UserInfoFilterRequest_Filter) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UserInfoFilterRequest_Filter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type UserInfoFilterResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address            string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Avatar             string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Certified          bool   `protobuf:"varint,3,opt,name=certified,proto3" json:"certified,omitempty"`
	CertifiedTime      string `protobuf:"bytes,4,opt,name=certifiedTime,proto3" json:"certifiedTime,omitempty"`
	CreateTime         string `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	DateOfBirth        string `protobuf:"bytes,6,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	EffectiveDate      string `protobuf:"bytes,7,opt,name=effectiveDate,proto3" json:"effectiveDate,omitempty"`
	EmailVerified      bool   `protobuf:"varint,8,opt,name=emailVerified,proto3" json:"emailVerified,omitempty"`
	EmailVerifiedTime  string `protobuf:"bytes,9,opt,name=emailVerifiedTime,proto3" json:"emailVerifiedTime,omitempty"`
	ExpirationDate     string `protobuf:"bytes,10,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	FormerName         string `protobuf:"bytes,11,opt,name=formerName,proto3" json:"formerName,omitempty"`
	Gender             string `protobuf:"bytes,12,opt,name=gender,proto3" json:"gender,omitempty"`
	Id                 string `protobuf:"bytes,13,opt,name=id,proto3" json:"id,omitempty"`
	IdNumber           string `protobuf:"bytes,14,opt,name=idNumber,proto3" json:"idNumber,omitempty"`
	IssuingAuthority   string `protobuf:"bytes,15,opt,name=issuingAuthority,proto3" json:"issuingAuthority,omitempty"`
	MobileVerified     bool   `protobuf:"varint,16,opt,name=mobileVerified,proto3" json:"mobileVerified,omitempty"`
	MobileVerifiedTime string `protobuf:"bytes,17,opt,name=mobileVerifiedTime,proto3" json:"mobileVerifiedTime,omitempty"`
	Name               string `protobuf:"bytes,18,opt,name=name,proto3" json:"name,omitempty"`
	Nation             string `protobuf:"bytes,19,opt,name=nation,proto3" json:"nation,omitempty"`
	Nickname           string `protobuf:"bytes,20,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ProfilePhoto       string `protobuf:"bytes,21,opt,name=profilePhoto,proto3" json:"profilePhoto,omitempty"`
	ResidentialAddr    string `protobuf:"bytes,22,opt,name=residentialAddr,proto3" json:"residentialAddr,omitempty"`
	TbUserId           string `protobuf:"bytes,23,opt,name=tbUserId,proto3" json:"tbUserId,omitempty"`
	UpdateTime         string `protobuf:"bytes,24,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *UserInfoFilterResponse_Results) Reset() {
	*x = UserInfoFilterResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userinfo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoFilterResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoFilterResponse_Results) ProtoMessage() {}

func (x *UserInfoFilterResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_userinfo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoFilterResponse_Results.ProtoReflect.Descriptor instead.
func (*UserInfoFilterResponse_Results) Descriptor() ([]byte, []int) {
	return file_userinfo_proto_rawDescGZIP(), []int{10, 0}
}

func (x *UserInfoFilterResponse_Results) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetCertified() bool {
	if x != nil {
		return x.Certified
	}
	return false
}

func (x *UserInfoFilterResponse_Results) GetCertifiedTime() string {
	if x != nil {
		return x.CertifiedTime
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *UserInfoFilterResponse_Results) GetEmailVerifiedTime() string {
	if x != nil {
		return x.EmailVerifiedTime
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetFormerName() string {
	if x != nil {
		return x.FormerName
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetIssuingAuthority() string {
	if x != nil {
		return x.IssuingAuthority
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetMobileVerified() bool {
	if x != nil {
		return x.MobileVerified
	}
	return false
}

func (x *UserInfoFilterResponse_Results) GetMobileVerifiedTime() string {
	if x != nil {
		return x.MobileVerifiedTime
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetNation() string {
	if x != nil {
		return x.Nation
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetProfilePhoto() string {
	if x != nil {
		return x.ProfilePhoto
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetResidentialAddr() string {
	if x != nil {
		return x.ResidentialAddr
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetTbUserId() string {
	if x != nil {
		return x.TbUserId
	}
	return ""
}

func (x *UserInfoFilterResponse_Results) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

var File_userinfo_proto protoreflect.FileDescriptor

var file_userinfo_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xff, 0x0d, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x31, 0x12,
	0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x47, 0x1a,
	0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xaf,
	0xa6, 0xe7, 0xbb, 0x86, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0x47,
	0x10, 0xba, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x06, 0xe5, 0xa7, 0x93, 0xe5, 0x90,
	0x8d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xba, 0x47, 0x35, 0xba, 0x01, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x92, 0x02, 0x29, 0xe6, 0x80, 0xa7, 0xe5, 0x88, 0xab, 0x28, 0x27,
	0x4d, 0x41, 0x4c, 0x45, 0x27, 0x2c, 0x20, 0x27, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x27, 0x2c,
	0x20, 0x27, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x27, 0x2c, 0x20, 0x27, 0x4e, 0x4f, 0x4e, 0x45, 0x27,
	0x29, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x47, 0x12, 0xba, 0x01,
	0x06, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x02, 0x06, 0xe6, 0xb0, 0x91, 0xe6, 0x97, 0x8f,
	0x52, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba,
	0x47, 0x29, 0xba, 0x01, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x92, 0x02, 0x18, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0x9f, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x28,
	0x79, 0x79, 0x79, 0x79, 0x2d, 0x4d, 0x4d, 0x2d, 0x44, 0x44, 0x29, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xba, 0x47, 0x1d, 0xba,
	0x01, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x92, 0x02, 0x0f, 0xe8, 0xba, 0xab,
	0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x52, 0x08, 0x69, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x92, 0x02, 0x0c, 0xe6, 0x88, 0xb7, 0xe7, 0xb1, 0x8d, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x6b,
	0x0a, 0x10, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0xba, 0x47, 0x3c, 0xba, 0x01, 0x10,
	0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x92, 0x02, 0x26, 0xe7, 0xad, 0xbe, 0xe5, 0x8f, 0x91, 0xe6, 0x9c, 0xba, 0xe5, 0x85, 0xb3, 0x28,
	0xe6, 0xb4, 0xbe, 0xe5, 0x87, 0xba, 0xe6, 0x89, 0x80, 0xe6, 0x88, 0x96, 0xe5, 0x8f, 0x91, 0xe8,
	0xaf, 0x81, 0xe6, 0x9c, 0xba, 0xe6, 0x9e, 0x84, 0x29, 0x52, 0x10, 0x69, 0x73, 0x73, 0x75, 0x69,
	0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x0d, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x28, 0xba, 0x47, 0x25, 0xba, 0x01, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x92, 0x02, 0x12, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6,
	0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x0d, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x29, 0xba, 0x47, 0x26, 0xba, 0x01, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x92, 0x02, 0x12, 0xe8, 0xaf, 0x81, 0xe4,
	0xbb, 0xb6, 0xe5, 0xa4, 0xb1, 0xe6, 0x95, 0x88, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x0e,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x45,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xba, 0x47, 0x1e, 0xba, 0x01, 0x0c, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x92, 0x02, 0x0c, 0xe8, 0xaf, 0x81, 0xe4, 0xbb,
	0xb6, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x65, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x47, 0xba, 0x47, 0x44, 0xba, 0x01, 0x09,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x92, 0x02, 0x35, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x28, 0xe8,
	0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x92, 0x8c, 0xe5, 0xa7, 0x93, 0xe5, 0x90,
	0x8d, 0xe4, 0xba, 0x8c, 0xe5, 0x85, 0x83, 0xe7, 0xb4, 0xa0, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81,
	0x29, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x6d, 0x0a, 0x0d,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x47, 0xba, 0x47, 0x44, 0xba, 0x01, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x92, 0x02, 0x35, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xae, 0x9e,
	0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x28, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd,
	0xe8, 0xaf, 0x81, 0xe5, 0x92, 0x8c, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0xe4, 0xba, 0x8c, 0xe5,
	0x85, 0x83, 0xe7, 0xb4, 0xa0, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x29, 0x52, 0x0d, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x47, 0x18,
	0xba, 0x01, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x92, 0x02, 0x0c, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xba, 0x47, 0x21, 0xba, 0x01,
	0x0f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x92, 0x02, 0x0c, 0xe5, 0xb1, 0x85, 0xe4, 0xbd, 0x8f, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x3c, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x0a, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x09, 0xe6, 0x9b, 0xbe, 0xe7, 0x94, 0xa8, 0xe5,
	0x90, 0x8d, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0xba, 0x47, 0x14, 0xba, 0x01, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x92, 0x02, 0x06, 0xe6, 0x98, 0xb5, 0xe7, 0xa7, 0xb0, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2c, 0xba, 0x47, 0x29,
	0xba, 0x01, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x92, 0x02, 0x15, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0x52, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x12, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x47, 0x2d, 0xba, 0x01, 0x12, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x92,
	0x02, 0x15, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe8, 0xae, 0xa4, 0xe8, 0xaf,
	0x81, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x12, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x2e, 0xba, 0x47, 0x2b, 0xba, 0x01, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x92, 0x02, 0x18, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0xaa, 0x8c, 0xe8,
	0xaf, 0x81, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x5a, 0x0a, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba, 0x47,
	0x29, 0xba, 0x01, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x12, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe8, 0xae,
	0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x11, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x42, 0x0a, 0x08, 0x74, 0x62, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x26, 0xba, 0x47, 0x23, 0xba, 0x01, 0x08, 0x74, 0x62, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x92, 0x02, 0x15, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xa1, 0xa8, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x08, 0x74, 0x62, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xda, 0x0c, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0xba, 0x47, 0x19, 0xba, 0x01, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x92, 0x02, 0x0c,
	0xe6, 0x88, 0xb7, 0xe7, 0xb1, 0x8d, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x47, 0x18, 0xba, 0x01, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x92, 0x02, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0xa4, 0xb4, 0xe5,
	0x83, 0x8f, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x65, 0x0a, 0x09, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x47, 0xba,
	0x47, 0x44, 0xba, 0x01, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x92, 0x02,
	0x35, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4,
	0xe8, 0xaf, 0x81, 0x28, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x92, 0x8c,
	0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0xe4, 0xba, 0x8c, 0xe5, 0x85, 0x83, 0xe7, 0xb4, 0xa0, 0xe8,
	0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x29, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x6d, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0xba, 0x47, 0x44, 0xba, 0x01, 0x09,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x92, 0x02, 0x35, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x28, 0xe8,
	0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x92, 0x8c, 0xe5, 0xa7, 0x93, 0xe5, 0x90,
	0x8d, 0xe4, 0xba, 0x8c, 0xe5, 0x85, 0x83, 0xe7, 0xb4, 0xa0, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81,
	0x29, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba, 0x47, 0x29, 0xba, 0x01, 0x0b, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x92, 0x02, 0x18, 0xe5, 0x87, 0xba, 0xe7, 0x94,
	0x9f, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x28, 0x79, 0x79, 0x79, 0x79, 0x2d, 0x4d, 0x4d, 0x2d,
	0x44, 0x44, 0x29, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x12, 0x4e, 0x0a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xba, 0x47, 0x25, 0xba, 0x01, 0x0d, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x92, 0x02, 0x12, 0xe8,
	0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe6, 0x97, 0xa5, 0xe6, 0x9c,
	0x9f, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x54, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2e, 0xba, 0x47, 0x2b, 0xba, 0x01, 0x0d, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x92, 0x02, 0x18, 0xe9,
	0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2c, 0xba, 0x47, 0x29, 0xba, 0x01, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x12, 0xe9, 0x82, 0xae,
	0xe7, 0xae, 0xb1, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xba, 0x47, 0x26, 0xba,
	0x01, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x92, 0x02, 0x12, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe5, 0xa4, 0xb1, 0xe6, 0x95, 0x88, 0xe6,
	0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01,
	0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x09, 0xe6, 0x9b,
	0xbe, 0xe7, 0x94, 0xa8, 0xe5, 0x90, 0x8d, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x38, 0xba, 0x47, 0x35, 0xba, 0x01, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x92, 0x02, 0x29, 0xe6, 0x80, 0xa7, 0xe5, 0x88, 0xab, 0x28, 0x27, 0x4d, 0x41, 0x4c, 0x45,
	0x27, 0x2c, 0x20, 0x27, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x27, 0x2c, 0x20, 0x27, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x27, 0x2c, 0x20, 0x27, 0x4e, 0x4f, 0x4e, 0x45, 0x27, 0x29, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xba, 0x47, 0x1d, 0xba, 0x01, 0x08, 0x69,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x92, 0x02, 0x0f, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd,
	0xe8, 0xaf, 0x81, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x10, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0xba,
	0x47, 0x3c, 0xba, 0x01, 0x10, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x92, 0x02, 0x26, 0xe7, 0xad, 0xbe, 0xe5, 0x8f, 0x91, 0xe6, 0x9c,
	0xba, 0xe5, 0x85, 0xb3, 0x28, 0xe6, 0xb4, 0xbe, 0xe5, 0x87, 0xba, 0xe6, 0x89, 0x80, 0xe6, 0x88,
	0x96, 0xe5, 0x8f, 0x91, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0xba, 0xe6, 0x9e, 0x84, 0x29, 0x52, 0x10,
	0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x54, 0x0a, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2c, 0xba, 0x47, 0x29, 0xba, 0x01, 0x0e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x92, 0x02,
	0x15, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0x52, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x12, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x30, 0xba, 0x47, 0x2d, 0xba, 0x01, 0x12, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x15, 0xe6,
	0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x12, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0x47, 0x10, 0xba, 0x01, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x92, 0x02, 0x06, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0xba, 0x47, 0x12, 0xba, 0x01, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x92,
	0x02, 0x06, 0xe6, 0xb0, 0x91, 0xe6, 0x97, 0x8f, 0x52, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0xba, 0x47, 0x14, 0xba, 0x01, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x92, 0x02, 0x06, 0xe6, 0x98, 0xb5, 0xe7, 0xa7, 0xb0, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xba, 0x47, 0x1e,
	0xba, 0x01, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x92,
	0x02, 0x0c, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xba, 0x47, 0x21, 0xba, 0x01, 0x0f, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x92, 0x02, 0x0c, 0xe5,
	0xb1, 0x85, 0xe4, 0xbd, 0x8f, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x42, 0x0a, 0x08,
	0x74, 0x62, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0xba, 0x47, 0x23, 0xba, 0x01, 0x08, 0x74, 0x62, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x92, 0x02,
	0x15, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xa1, 0xa8, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x08, 0x74, 0x62, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x47, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0xba, 0x01, 0x02, 0x69, 0x64,
	0x92, 0x02, 0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe7,
	0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x15, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0xba, 0x47, 0x1a, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x47, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0xba, 0x01, 0x02, 0x69,
	0x64, 0x92, 0x02, 0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86,
	0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf6, 0x0c, 0x0a, 0x15, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x92, 0x02, 0x0c, 0xe6, 0x88, 0xb7, 0xe7, 0xb1, 0x8d, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9d, 0x80, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x47,
	0x18, 0xba, 0x01, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x92, 0x02, 0x0c, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x65, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x47, 0xba, 0x47, 0x44, 0xba, 0x01, 0x09, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x92, 0x02, 0x35, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xae,
	0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x28, 0xe8, 0xba, 0xab, 0xe4, 0xbb,
	0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x92, 0x8c, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0xe4, 0xba, 0x8c,
	0xe5, 0x85, 0x83, 0xe7, 0xb4, 0xa0, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x29, 0x52, 0x09, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x6d, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x47, 0xba, 0x47, 0x44, 0xba, 0x01, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x92, 0x02, 0x35, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8,
	0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x28, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5,
	0x92, 0x8c, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0xe4, 0xba, 0x8c, 0xe5, 0x85, 0x83, 0xe7, 0xb4,
	0xa0, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x29, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba, 0x47,
	0x29, 0xba, 0x01, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x92,
	0x02, 0x18, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0x9f, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x28, 0x79,
	0x79, 0x79, 0x79, 0x2d, 0x4d, 0x4d, 0x2d, 0x44, 0x44, 0x29, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0xba, 0x47, 0x25, 0xba, 0x01, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x92, 0x02, 0x12, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe7, 0x94, 0x9f, 0xe6,
	0x95, 0x88, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2e,
	0xba, 0x47, 0x2b, 0xba, 0x01, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x92, 0x02, 0x18, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9d, 0x80, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0x52, 0x0d,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x5a, 0x0a,
	0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba, 0x47, 0x29, 0xba, 0x01, 0x11,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x92, 0x02, 0x12, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x29, 0xba, 0x47, 0x26, 0xba, 0x01, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x92, 0x02, 0x12, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6,
	0xe5, 0xa4, 0xb1, 0xe6, 0x95, 0x88, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0a,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x92, 0x02, 0x09, 0xe6, 0x9b, 0xbe, 0xe7, 0x94, 0xa8, 0xe5, 0x90, 0x8d, 0x52, 0x0a,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xba, 0x47, 0x35, 0xba,
	0x01, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x92, 0x02, 0x29, 0xe6, 0x80, 0xa7, 0xe5, 0x88,
	0xab, 0x28, 0x27, 0x4d, 0x41, 0x4c, 0x45, 0x27, 0x2c, 0x20, 0x27, 0x46, 0x45, 0x4d, 0x41, 0x4c,
	0x45, 0x27, 0x2c, 0x20, 0x27, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x27, 0x2c, 0x20, 0x27, 0x4e, 0x4f,
	0x4e, 0x45, 0x27, 0x29, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08,
	0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0xba, 0x47, 0x1d, 0xba, 0x01, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x92, 0x02,
	0x0f, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81,
	0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x10, 0x69, 0x73,
	0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xba, 0x47, 0x40, 0xba, 0x01, 0x10, 0x69, 0x73, 0x73, 0x75,
	0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x92, 0x02, 0x2a, 0xe7,
	0xad, 0xbe, 0xe5, 0x8f, 0x91, 0xe6, 0x9c, 0xba, 0xe5, 0x85, 0xb3, 0xef, 0xbc, 0x88, 0xe6, 0xb4,
	0xbe, 0xe5, 0x87, 0xba, 0xe6, 0x89, 0x80, 0xe6, 0x88, 0x96, 0xe5, 0x8f, 0x91, 0xe8, 0xaf, 0x81,
	0xe6, 0x9c, 0xba, 0xe5, 0x85, 0xb3, 0xef, 0xbc, 0x89, 0x52, 0x10, 0x69, 0x73, 0x73, 0x75, 0x69,
	0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x2c, 0xba, 0x47, 0x29, 0xba, 0x01, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x92, 0x02, 0x15, 0xe6, 0x89, 0x8b, 0xe6,
	0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf,
	0x81, 0x52, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x60, 0x0a, 0x12, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba,
	0x47, 0x2d, 0xba, 0x01, 0x12, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x15, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba,
	0xe5, 0x8f, 0xb7, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x12, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x13, 0xba, 0x47, 0x10, 0xba, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x06,
	0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x06,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x47,
	0x1b, 0xba, 0x01, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x02, 0x0f, 0xe8, 0xba, 0xab,
	0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x52, 0x06, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xba, 0x47, 0x1d, 0xba, 0x01, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x0f, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8,
	0xaf, 0x81, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xba, 0x47, 0x21, 0xba, 0x01, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x92, 0x02, 0x0f, 0xe8,
	0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xba, 0x47, 0x24, 0xba, 0x01, 0x0f, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x92, 0x02, 0x0f, 0xe8,
	0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x42, 0x0a, 0x08, 0x74, 0x62, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x26, 0xba, 0x47, 0x23, 0xba, 0x01, 0x08, 0x74, 0x62, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x92, 0x02, 0x15, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xa1, 0xa8, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x08, 0x74, 0x62, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xce, 0x0d, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x92, 0x02,
	0x0c, 0xe6, 0x88, 0xb7, 0xe7, 0xb1, 0x8d, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x47, 0x18, 0xba, 0x01, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x92, 0x02, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0xa4, 0xb4,
	0xe5, 0x83, 0x8f, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x65, 0x0a, 0x09, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x47,
	0xba, 0x47, 0x44, 0xba, 0x01, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x92,
	0x02, 0x35, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae,
	0xa4, 0xe8, 0xaf, 0x81, 0x28, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x92,
	0x8c, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0xe4, 0xba, 0x8c, 0xe5, 0x85, 0x83, 0xe7, 0xb4, 0xa0,
	0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x29, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x54, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xba, 0x47, 0x2b, 0xba, 0x01,
	0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02,
	0x18, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe8, 0xae, 0xa4,
	0xe8, 0xaf, 0x81, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47,
	0x1c, 0xba, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02,
	0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a,
	0xba, 0x47, 0x27, 0xba, 0x01, 0x09, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x92,
	0x02, 0x18, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0x9f, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x28, 0x79,
	0x79, 0x79, 0x79, 0x2d, 0x4d, 0x4d, 0x2d, 0x44, 0x44, 0x29, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0xba, 0x47, 0x25, 0xba, 0x01, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x92, 0x02, 0x12, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe7, 0x94, 0x9f, 0xe6,
	0x95, 0x88, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2e,
	0xba, 0x47, 0x2b, 0xba, 0x01, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x92, 0x02, 0x18, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9d, 0x80, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0x52, 0x0d,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x5a, 0x0a,
	0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba, 0x47, 0x29, 0xba, 0x01, 0x11,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x92, 0x02, 0x12, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x29, 0xba, 0x47, 0x26, 0xba, 0x01, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x92, 0x02, 0x12, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6,
	0xe5, 0xa4, 0xb1, 0xe6, 0x95, 0x88, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0a,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x92, 0x02, 0x09, 0xe6, 0x9b, 0xbe, 0xe7, 0x94, 0xa8, 0xe5, 0x90, 0x8d, 0x52, 0x0a,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x47, 0x12, 0xba,
	0x01, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x92, 0x02, 0x06, 0xe6, 0xb0, 0x91, 0xe6, 0x97,
	0x8f, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92,
	0x02, 0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe7, 0xbc,
	0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xba, 0x47, 0x1d, 0xba,
	0x01, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x92, 0x02, 0x0f, 0xe8, 0xba, 0xab,
	0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x52, 0x08, 0x69, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x10, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e,
	0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3f, 0xba, 0x47, 0x3c, 0xba, 0x01, 0x10, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x92, 0x02, 0x26, 0xe7, 0xad, 0xbe, 0xe5, 0x8f,
	0x91, 0xe6, 0x9c, 0xba, 0xe5, 0x85, 0xb3, 0x28, 0xe6, 0xb4, 0xbe, 0xe5, 0x87, 0xba, 0xe6, 0x89,
	0x80, 0xe6, 0x88, 0x96, 0xe5, 0x8f, 0x91, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0xba, 0xe6, 0x9e, 0x84,
	0x29, 0x52, 0x10, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2c, 0xba, 0x47, 0x29,
	0xba, 0x01, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x92, 0x02, 0x15, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0x52, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x12, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x47, 0x2d, 0xba, 0x01, 0x12, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x92,
	0x02, 0x15, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe8, 0xae, 0xa4, 0xe8, 0xaf,
	0x81, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x12, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0x47, 0x10, 0xba, 0x01,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x06, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x47, 0x12, 0xba, 0x01, 0x06, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x92, 0x02, 0x06, 0xe6, 0xb0, 0x91, 0xe6, 0x97, 0x8f, 0x52, 0x06, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x47, 0x14, 0xba, 0x01, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x06, 0xe6, 0x98, 0xb5, 0xe7, 0xa7, 0xb0, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0xba, 0x47, 0x1e, 0xba, 0x01, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x92, 0x02, 0x0c, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe5, 0xa4, 0xb4, 0xe5, 0x83,
	0x8f, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xba, 0x47, 0x21, 0xba, 0x01, 0x0f,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x92,
	0x02, 0x0c, 0xe5, 0xb1, 0x85, 0xe4, 0xbd, 0x8f, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x42, 0x0a, 0x08, 0x74, 0x62, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x26, 0xba, 0x47, 0x23, 0xba, 0x01, 0x08, 0x74, 0x62, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x92, 0x02, 0x15, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xa1, 0xa8, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x08, 0x74, 0x62, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0x92, 0x02,
	0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe7, 0xbc, 0x96,
	0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x22, 0xce, 0x0d, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x92, 0x02, 0x0c, 0xe6, 0x88, 0xb7, 0xe7, 0xb1, 0x8d, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d,
	0x80, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x47, 0x18, 0xba,
	0x01, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x92, 0x02, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x65, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x47, 0xba, 0x47, 0x44, 0xba, 0x01, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x92, 0x02, 0x35, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xae, 0x9e, 0xe5,
	0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x28, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8,
	0xaf, 0x81, 0xe5, 0x92, 0x8c, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0xe4, 0xba, 0x8c, 0xe5, 0x85,
	0x83, 0xe7, 0xb4, 0xa0, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x29, 0x52, 0x09, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xba,
	0x47, 0x2b, 0xba, 0x01, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x92, 0x02, 0x18, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf,
	0x81, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0xba, 0x47, 0x27, 0xba, 0x01, 0x09, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x92, 0x02, 0x18, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0x9f, 0xe6, 0x97, 0xa5, 0xe6,
	0x9c, 0x9f, 0x28, 0x79, 0x79, 0x79, 0x79, 0x2d, 0x4d, 0x4d, 0x2d, 0x44, 0x44, 0x29, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x0d, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x28, 0xba, 0x47, 0x25, 0xba, 0x01, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x92, 0x02, 0x12, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6,
	0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x0d, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x2e, 0xba, 0x47, 0x2b, 0xba, 0x01, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x92, 0x02, 0x18, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0xaa, 0x8c, 0xe8,
	0xaf, 0x81, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x5a, 0x0a, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba, 0x47,
	0x29, 0xba, 0x01, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x12, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe8, 0xae,
	0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x11, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a,
	0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xba, 0x47, 0x26, 0xba, 0x01, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x92, 0x02, 0x12, 0xe8, 0xaf,
	0x81, 0xe4, 0xbb, 0xb6, 0xe5, 0xa4, 0xb1, 0xe6, 0x95, 0x88, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x0a, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x09, 0xe6, 0x9b, 0xbe, 0xe7, 0x94, 0xa8, 0xe5,
	0x90, 0x8d, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0xba, 0x47, 0x12, 0xba, 0x01, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x92, 0x02, 0x06, 0xe6,
	0xb0, 0x91, 0xe6, 0x97, 0x8f, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0xba, 0x01,
	0x02, 0x69, 0x64, 0x92, 0x02, 0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xaf, 0xa6, 0xe7,
	0xbb, 0x86, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x08,
	0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0xba, 0x47, 0x1d, 0xba, 0x01, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x92, 0x02,
	0x0f, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81,
	0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x10, 0x69, 0x73,
	0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0xba, 0x47, 0x3c, 0xba, 0x01, 0x10, 0x69, 0x73, 0x73, 0x75,
	0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x92, 0x02, 0x26, 0xe7,
	0xad, 0xbe, 0xe5, 0x8f, 0x91, 0xe6, 0x9c, 0xba, 0xe5, 0x85, 0xb3, 0x28, 0xe6, 0xb4, 0xbe, 0xe5,
	0x87, 0xba, 0xe6, 0x89, 0x80, 0xe6, 0x88, 0x96, 0xe5, 0x8f, 0x91, 0xe8, 0xaf, 0x81, 0xe6, 0x9c,
	0xba, 0xe6, 0x9e, 0x84, 0x29, 0x52, 0x10, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x2c, 0xba, 0x47, 0x29, 0xba, 0x01, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x92, 0x02, 0x15, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f,
	0xb7, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0x52, 0x0e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x60, 0x0a,
	0x12, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x47, 0x2d, 0xba, 0x01,
	0x12, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x92, 0x02, 0x15, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe8,
	0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x12, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba,
	0x47, 0x10, 0xba, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x06, 0xe5, 0xa7, 0x93, 0xe5,
	0x90, 0x8d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x47, 0x12, 0xba, 0x01, 0x06,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x02, 0x06, 0xe6, 0xb0, 0x91, 0xe6, 0x97, 0x8f, 0x52,
	0x06, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x47, 0x14, 0xba, 0x01,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x06, 0xe6, 0x98, 0xb5, 0xe7,
	0xa7, 0xb0, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0xba, 0x47, 0x1e, 0xba, 0x01, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x92, 0x02, 0x0c, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe5,
	0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xba, 0x47,
	0x21, 0xba, 0x01, 0x0f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x92, 0x02, 0x0c, 0xe5, 0xb1, 0x85, 0xe4, 0xbd, 0x8f, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9d, 0x80, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x62, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xba, 0x47, 0x23, 0xba, 0x01, 0x08, 0x74, 0x62, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x92, 0x02, 0x15, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xa1,
	0xa8, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x08, 0x74,
	0x62, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c,
	0xba, 0x01, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x15, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x1a, 0x5b, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x47, 0x12, 0xba, 0x01, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x92, 0x02, 0x06, 0xe6, 0xb0, 0x91, 0xe6, 0x97, 0x8f, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xdd, 0x0e, 0x0a, 0x16, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xbf, 0x0d, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x92, 0x02, 0x0c, 0xe6, 0x88, 0xb7, 0xe7, 0xb1, 0x8d, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d,
	0x80, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x47, 0x18, 0xba,
	0x01, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x92, 0x02, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x65, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x47, 0xba, 0x47, 0x44, 0xba, 0x01, 0x09, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x92, 0x02, 0x35, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xae, 0x9e, 0xe5,
	0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x28, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8,
	0xaf, 0x81, 0xe5, 0x92, 0x8c, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0xe4, 0xba, 0x8c, 0xe5, 0x85,
	0x83, 0xe7, 0xb4, 0xa0, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x29, 0x52, 0x09, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xba,
	0x47, 0x2b, 0xba, 0x01, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x92, 0x02, 0x18, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf,
	0x81, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0xba, 0x47, 0x27, 0xba, 0x01, 0x09, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x92, 0x02, 0x18, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0x9f, 0xe6, 0x97, 0xa5, 0xe6,
	0x9c, 0x9f, 0x28, 0x79, 0x79, 0x79, 0x79, 0x2d, 0x4d, 0x4d, 0x2d, 0x44, 0x44, 0x29, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x0d, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x28, 0xba, 0x47, 0x25, 0xba, 0x01, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x92, 0x02, 0x12, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6,
	0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x0d, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x2e, 0xba, 0x47, 0x2b, 0xba, 0x01, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x92, 0x02, 0x18, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0xaa, 0x8c, 0xe8,
	0xaf, 0x81, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x5a, 0x0a, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba, 0x47,
	0x29, 0xba, 0x01, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x12, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe8, 0xae,
	0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x11, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a,
	0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xba, 0x47, 0x26, 0xba, 0x01, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x92, 0x02, 0x12, 0xe8, 0xaf,
	0x81, 0xe4, 0xbb, 0xb6, 0xe5, 0xa4, 0xb1, 0xe6, 0x95, 0x88, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x0a, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x09, 0xe6, 0x9b, 0xbe, 0xe7, 0x94, 0xa8, 0xe5,
	0x90, 0x8d, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0xba, 0x47, 0x12, 0xba, 0x01, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x92, 0x02, 0x06, 0xe6,
	0xb0, 0x91, 0xe6, 0x97, 0x8f, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0xba, 0x01,
	0x02, 0x69, 0x64, 0x92, 0x02, 0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xaf, 0xa6, 0xe7,
	0xbb, 0x86, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x08,
	0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0xba, 0x47, 0x1d, 0xba, 0x01, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x92, 0x02,
	0x0f, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81,
	0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x10, 0x69, 0x73,
	0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0xba, 0x47, 0x3c, 0xba, 0x01, 0x10, 0x69, 0x73, 0x73, 0x75,
	0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x92, 0x02, 0x26, 0xe7,
	0xad, 0xbe, 0xe5, 0x8f, 0x91, 0xe6, 0x9c, 0xba, 0xe5, 0x85, 0xb3, 0x28, 0xe6, 0xb4, 0xbe, 0xe5,
	0x87, 0xba, 0xe6, 0x89, 0x80, 0xe6, 0x88, 0x96, 0xe5, 0x8f, 0x91, 0xe8, 0xaf, 0x81, 0xe6, 0x9c,
	0xba, 0xe6, 0x9e, 0x84, 0x29, 0x52, 0x10, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x2c, 0xba, 0x47, 0x29, 0xba, 0x01, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x92, 0x02, 0x15, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f,
	0xb7, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0x52, 0x0e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x60, 0x0a,
	0x12, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x47, 0x2d, 0xba, 0x01,
	0x12, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x92, 0x02, 0x15, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe8,
	0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x12, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba,
	0x47, 0x10, 0xba, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x06, 0xe5, 0xa7, 0x93, 0xe5,
	0x90, 0x8d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x47, 0x12, 0xba, 0x01, 0x06,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x02, 0x06, 0xe6, 0xb0, 0x91, 0xe6, 0x97, 0x8f, 0x52,
	0x06, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x47, 0x14, 0xba, 0x01,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x06, 0xe6, 0x98, 0xb5, 0xe7,
	0xa7, 0xb0, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0xba, 0x47, 0x1e, 0xba, 0x01, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x92, 0x02, 0x0c, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe5,
	0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xba, 0x47,
	0x21, 0xba, 0x01, 0x0f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x92, 0x02, 0x0c, 0xe5, 0xb1, 0x85, 0xe4, 0xbd, 0x8f, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9d, 0x80, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x62, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xba, 0x47, 0x23, 0xba, 0x01, 0x08, 0x74, 0x62, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x92, 0x02, 0x15, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xa1,
	0xa8, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x08, 0x74,
	0x62, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c,
	0xba, 0x01, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xb1, 0x05, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0xba, 0x47, 0x23, 0x12, 0x21, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8,
	0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0x12, 0x83,
	0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x11, 0x2a, 0x0f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0xba, 0x47, 0x1e, 0x12, 0x1c, 0x2f, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0x12, 0x80, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x1a, 0x0a, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0xba, 0x47, 0x1d, 0x12, 0x1b, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xba, 0x47, 0x1d, 0x12,
	0x1b, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xa1, 0xa8,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x12, 0x8d, 0x01, 0x0a,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x22, 0x11, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0xba, 0x47, 0x23, 0x12, 0x21, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x42, 0x0e, 0x5a, 0x0c,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x75, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_userinfo_proto_rawDescOnce sync.Once
	file_userinfo_proto_rawDescData = file_userinfo_proto_rawDesc
)

func file_userinfo_proto_rawDescGZIP() []byte {
	file_userinfo_proto_rawDescOnce.Do(func() {
		file_userinfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_userinfo_proto_rawDescData)
	})
	return file_userinfo_proto_rawDescData
}

var file_userinfo_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_userinfo_proto_goTypes = []interface{}{
	(*UserInfo1)(nil),                      // 0: api.UserInfo1
	(*UserInfoCreateRequest)(nil),          // 1: api.UserInfoCreateRequest
	(*UserInfoCreateResponse)(nil),         // 2: api.UserInfoCreateResponse
	(*UserInfoDeleteRequest)(nil),          // 3: api.UserInfoDeleteRequest
	(*UserInfoDeleteResponse)(nil),         // 4: api.UserInfoDeleteResponse
	(*UserInfoUpdateRequest)(nil),          // 5: api.UserInfoUpdateRequest
	(*UserInfoUpdateResponse)(nil),         // 6: api.UserInfoUpdateResponse
	(*UserInfoDetailRequest)(nil),          // 7: api.UserInfoDetailRequest
	(*UserInfoDetailResponse)(nil),         // 8: api.UserInfoDetailResponse
	(*UserInfoFilterRequest)(nil),          // 9: api.UserInfoFilterRequest
	(*UserInfoFilterResponse)(nil),         // 10: api.UserInfoFilterResponse
	(*UserInfoFilterRequest_Filter)(nil),   // 11: api.UserInfoFilterRequest.Filter
	(*UserInfoFilterResponse_Results)(nil), // 12: api.UserInfoFilterResponse.Results
}
var file_userinfo_proto_depIdxs = []int32{
	11, // 0: api.UserInfoFilterRequest.filter:type_name -> api.UserInfoFilterRequest.Filter
	12, // 1: api.UserInfoFilterResponse.results:type_name -> api.UserInfoFilterResponse.Results
	1,  // 2: api.UserInfo.UserInfoCreate:input_type -> api.UserInfoCreateRequest
	3,  // 3: api.UserInfo.UserInfoDelete:input_type -> api.UserInfoDeleteRequest
	5,  // 4: api.UserInfo.UserInfoUpdate:input_type -> api.UserInfoUpdateRequest
	7,  // 5: api.UserInfo.UserInfoDetail:input_type -> api.UserInfoDetailRequest
	9,  // 6: api.UserInfo.UserInfoFilter:input_type -> api.UserInfoFilterRequest
	2,  // 7: api.UserInfo.UserInfoCreate:output_type -> api.UserInfoCreateResponse
	4,  // 8: api.UserInfo.UserInfoDelete:output_type -> api.UserInfoDeleteResponse
	6,  // 9: api.UserInfo.UserInfoUpdate:output_type -> api.UserInfoUpdateResponse
	8,  // 10: api.UserInfo.UserInfoDetail:output_type -> api.UserInfoDetailResponse
	10, // 11: api.UserInfo.UserInfoFilter:output_type -> api.UserInfoFilterResponse
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_userinfo_proto_init() }
func file_userinfo_proto_init() {
	if File_userinfo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_userinfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userinfo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userinfo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userinfo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userinfo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userinfo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userinfo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userinfo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userinfo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userinfo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userinfo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userinfo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoFilterRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userinfo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoFilterResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_userinfo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_userinfo_proto_goTypes,
		DependencyIndexes: file_userinfo_proto_depIdxs,
		MessageInfos:      file_userinfo_proto_msgTypes,
	}.Build()
	File_userinfo_proto = out.File
	file_userinfo_proto_rawDesc = nil
	file_userinfo_proto_goTypes = nil
	file_userinfo_proto_depIdxs = nil
}
