// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: followup.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FollowupClient is the client API for Followup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowupClient interface {
	// 随访工作项创建
	FollowupCreate(ctx context.Context, in *FollowupCreateRequest, opts ...grpc.CallOption) (*FollowupCreateResponse, error)
	// 随访工作项删除
	FollowupDelete(ctx context.Context, in *FollowupDeleteRequest, opts ...grpc.CallOption) (*FollowupDeleteResponse, error)
	// 随访工作项详情查询
	FollowupDetail(ctx context.Context, in *FollowupDetailRequest, opts ...grpc.CallOption) (*FollowupDetailResponse, error)
	// 随访工作项过滤查询
	FollowupFilter(ctx context.Context, in *FollowupFilterRequest, opts ...grpc.CallOption) (*FollowupFilterResponse, error)
}

type followupClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowupClient(cc grpc.ClientConnInterface) FollowupClient {
	return &followupClient{cc}
}

func (c *followupClient) FollowupCreate(ctx context.Context, in *FollowupCreateRequest, opts ...grpc.CallOption) (*FollowupCreateResponse, error) {
	out := new(FollowupCreateResponse)
	err := c.cc.Invoke(ctx, "/api.Followup/FollowupCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followupClient) FollowupDelete(ctx context.Context, in *FollowupDeleteRequest, opts ...grpc.CallOption) (*FollowupDeleteResponse, error) {
	out := new(FollowupDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.Followup/FollowupDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followupClient) FollowupDetail(ctx context.Context, in *FollowupDetailRequest, opts ...grpc.CallOption) (*FollowupDetailResponse, error) {
	out := new(FollowupDetailResponse)
	err := c.cc.Invoke(ctx, "/api.Followup/FollowupDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followupClient) FollowupFilter(ctx context.Context, in *FollowupFilterRequest, opts ...grpc.CallOption) (*FollowupFilterResponse, error) {
	out := new(FollowupFilterResponse)
	err := c.cc.Invoke(ctx, "/api.Followup/FollowupFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowupServer is the server API for Followup service.
// All implementations must embed UnimplementedFollowupServer
// for forward compatibility
type FollowupServer interface {
	// 随访工作项创建
	FollowupCreate(context.Context, *FollowupCreateRequest) (*FollowupCreateResponse, error)
	// 随访工作项删除
	FollowupDelete(context.Context, *FollowupDeleteRequest) (*FollowupDeleteResponse, error)
	// 随访工作项详情查询
	FollowupDetail(context.Context, *FollowupDetailRequest) (*FollowupDetailResponse, error)
	// 随访工作项过滤查询
	FollowupFilter(context.Context, *FollowupFilterRequest) (*FollowupFilterResponse, error)
	mustEmbedUnimplementedFollowupServer()
}

// UnimplementedFollowupServer must be embedded to have forward compatible implementations.
type UnimplementedFollowupServer struct {
}

func (UnimplementedFollowupServer) FollowupCreate(context.Context, *FollowupCreateRequest) (*FollowupCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowupCreate not implemented")
}
func (UnimplementedFollowupServer) FollowupDelete(context.Context, *FollowupDeleteRequest) (*FollowupDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowupDelete not implemented")
}
func (UnimplementedFollowupServer) FollowupDetail(context.Context, *FollowupDetailRequest) (*FollowupDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowupDetail not implemented")
}
func (UnimplementedFollowupServer) FollowupFilter(context.Context, *FollowupFilterRequest) (*FollowupFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowupFilter not implemented")
}
func (UnimplementedFollowupServer) mustEmbedUnimplementedFollowupServer() {}

// UnsafeFollowupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowupServer will
// result in compilation errors.
type UnsafeFollowupServer interface {
	mustEmbedUnimplementedFollowupServer()
}

func RegisterFollowupServer(s grpc.ServiceRegistrar, srv FollowupServer) {
	s.RegisterService(&Followup_ServiceDesc, srv)
}

func _Followup_FollowupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowupServer).FollowupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Followup/FollowupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowupServer).FollowupCreate(ctx, req.(*FollowupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Followup_FollowupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowupDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowupServer).FollowupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Followup/FollowupDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowupServer).FollowupDelete(ctx, req.(*FollowupDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Followup_FollowupDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowupDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowupServer).FollowupDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Followup/FollowupDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowupServer).FollowupDetail(ctx, req.(*FollowupDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Followup_FollowupFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowupFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowupServer).FollowupFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Followup/FollowupFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowupServer).FollowupFilter(ctx, req.(*FollowupFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Followup_ServiceDesc is the grpc.ServiceDesc for Followup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Followup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Followup",
	HandlerType: (*FollowupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowupCreate",
			Handler:    _Followup_FollowupCreate_Handler,
		},
		{
			MethodName: "FollowupDelete",
			Handler:    _Followup_FollowupDelete_Handler,
		},
		{
			MethodName: "FollowupDetail",
			Handler:    _Followup_FollowupDetail_Handler,
		},
		{
			MethodName: "FollowupFilter",
			Handler:    _Followup_FollowupFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "followup.proto",
}
