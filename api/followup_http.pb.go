// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: followup.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFollowupFollowupCreate = "/api.Followup/FollowupCreate"
const OperationFollowupFollowupDelete = "/api.Followup/FollowupDelete"
const OperationFollowupFollowupDetail = "/api.Followup/FollowupDetail"
const OperationFollowupFollowupFilter = "/api.Followup/FollowupFilter"

type FollowupHTTPServer interface {
	FollowupCreate(context.Context, *FollowupCreateRequest) (*FollowupCreateResponse, error)
	FollowupDelete(context.Context, *FollowupDeleteRequest) (*FollowupDeleteResponse, error)
	FollowupDetail(context.Context, *FollowupDetailRequest) (*FollowupDetailResponse, error)
	FollowupFilter(context.Context, *FollowupFilterRequest) (*FollowupFilterResponse, error)
}

func RegisterFollowupHTTPServer(s *http.Server, srv FollowupHTTPServer) {
	r := s.Route("/")
	r.POST("/followup", _Followup_FollowupCreate0_HTTP_Handler(srv))
	r.DELETE("/followup", _Followup_FollowupDelete0_HTTP_Handler(srv))
	r.GET("/followup", _Followup_FollowupDetail0_HTTP_Handler(srv))
	r.POST("/followup/filter", _Followup_FollowupFilter0_HTTP_Handler(srv))
}

func _Followup_FollowupCreate0_HTTP_Handler(srv FollowupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowupCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFollowupFollowupCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowupCreate(ctx, req.(*FollowupCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowupCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _Followup_FollowupDelete0_HTTP_Handler(srv FollowupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowupDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFollowupFollowupDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowupDelete(ctx, req.(*FollowupDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowupDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _Followup_FollowupDetail0_HTTP_Handler(srv FollowupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowupDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFollowupFollowupDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowupDetail(ctx, req.(*FollowupDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowupDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Followup_FollowupFilter0_HTTP_Handler(srv FollowupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowupFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFollowupFollowupFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowupFilter(ctx, req.(*FollowupFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowupFilterResponse)
		return ctx.Result(200, reply)
	}
}

type FollowupHTTPClient interface {
	FollowupCreate(ctx context.Context, req *FollowupCreateRequest, opts ...http.CallOption) (rsp *FollowupCreateResponse, err error)
	FollowupDelete(ctx context.Context, req *FollowupDeleteRequest, opts ...http.CallOption) (rsp *FollowupDeleteResponse, err error)
	FollowupDetail(ctx context.Context, req *FollowupDetailRequest, opts ...http.CallOption) (rsp *FollowupDetailResponse, err error)
	FollowupFilter(ctx context.Context, req *FollowupFilterRequest, opts ...http.CallOption) (rsp *FollowupFilterResponse, err error)
}

type FollowupHTTPClientImpl struct {
	cc *http.Client
}

func NewFollowupHTTPClient(client *http.Client) FollowupHTTPClient {
	return &FollowupHTTPClientImpl{client}
}

func (c *FollowupHTTPClientImpl) FollowupCreate(ctx context.Context, in *FollowupCreateRequest, opts ...http.CallOption) (*FollowupCreateResponse, error) {
	var out FollowupCreateResponse
	pattern := "/followup"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFollowupFollowupCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FollowupHTTPClientImpl) FollowupDelete(ctx context.Context, in *FollowupDeleteRequest, opts ...http.CallOption) (*FollowupDeleteResponse, error) {
	var out FollowupDeleteResponse
	pattern := "/followup"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFollowupFollowupDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FollowupHTTPClientImpl) FollowupDetail(ctx context.Context, in *FollowupDetailRequest, opts ...http.CallOption) (*FollowupDetailResponse, error) {
	var out FollowupDetailResponse
	pattern := "/followup"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFollowupFollowupDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FollowupHTTPClientImpl) FollowupFilter(ctx context.Context, in *FollowupFilterRequest, opts ...http.CallOption) (*FollowupFilterResponse, error) {
	var out FollowupFilterResponse
	pattern := "/followup/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFollowupFollowupFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
