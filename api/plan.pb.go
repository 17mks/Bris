// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.10
// source: plan.proto

package api

import (
	models "followup/api/models"
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlanUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BelongTo      string `protobuf:"bytes,1,opt,name=belongTo,proto3" json:"belongTo,omitempty"`
	BelongType    string `protobuf:"bytes,2,opt,name=belongType,proto3" json:"belongType,omitempty"`
	FrequencyUnit string `protobuf:"bytes,3,opt,name=frequencyUnit,proto3" json:"frequencyUnit,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type          string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PlanUpdateReq) Reset() {
	*x = PlanUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanUpdateReq) ProtoMessage() {}

func (x *PlanUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanUpdateReq.ProtoReflect.Descriptor instead.
func (*PlanUpdateReq) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{0}
}

func (x *PlanUpdateReq) GetBelongTo() string {
	if x != nil {
		return x.BelongTo
	}
	return ""
}

func (x *PlanUpdateReq) GetBelongType() string {
	if x != nil {
		return x.BelongType
	}
	return ""
}

func (x *PlanUpdateReq) GetFrequencyUnit() string {
	if x != nil {
		return x.FrequencyUnit
	}
	return ""
}

func (x *PlanUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlanUpdateReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type SaPlanDetailPreload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plan          *models.Plan    `protobuf:"bytes,1,opt,name=Plan,proto3" json:"Plan,omitempty"`
	SaPlanRelates []*SaPlanRelate `protobuf:"bytes,2,rep,name=SaPlanRelates,proto3" json:"SaPlanRelates,omitempty"`
}

func (x *SaPlanDetailPreload) Reset() {
	*x = SaPlanDetailPreload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaPlanDetailPreload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaPlanDetailPreload) ProtoMessage() {}

func (x *SaPlanDetailPreload) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaPlanDetailPreload.ProtoReflect.Descriptor instead.
func (*SaPlanDetailPreload) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{1}
}

func (x *SaPlanDetailPreload) GetPlan() *models.Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *SaPlanDetailPreload) GetSaPlanRelates() []*SaPlanRelate {
	if x != nil {
		return x.SaPlanRelates
	}
	return nil
}

type SaPlanRelate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanRelate           *models.PlanRelate    `protobuf:"bytes,1,opt,name=PlanRelate,proto3" json:"PlanRelate,omitempty"`
	SaPlanWorkItemRelate *SaPlanWorkItemRelate `protobuf:"bytes,2,opt,name=SaPlanWorkItemRelate,proto3" json:"SaPlanWorkItemRelate,omitempty"`
}

func (x *SaPlanRelate) Reset() {
	*x = SaPlanRelate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaPlanRelate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaPlanRelate) ProtoMessage() {}

func (x *SaPlanRelate) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaPlanRelate.ProtoReflect.Descriptor instead.
func (*SaPlanRelate) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{2}
}

func (x *SaPlanRelate) GetPlanRelate() *models.PlanRelate {
	if x != nil {
		return x.PlanRelate
	}
	return nil
}

func (x *SaPlanRelate) GetSaPlanWorkItemRelate() *SaPlanWorkItemRelate {
	if x != nil {
		return x.SaPlanWorkItemRelate
	}
	return nil
}

type SaPlanWorkItemRelate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkItem *WorkItems `protobuf:"bytes,1,opt,name=WorkItem,proto3" json:"WorkItem,omitempty"`
	Relates  []*Relates `protobuf:"bytes,2,rep,name=Relates,proto3" json:"Relates,omitempty"`
}

func (x *SaPlanWorkItemRelate) Reset() {
	*x = SaPlanWorkItemRelate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaPlanWorkItemRelate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaPlanWorkItemRelate) ProtoMessage() {}

func (x *SaPlanWorkItemRelate) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaPlanWorkItemRelate.ProtoReflect.Descriptor instead.
func (*SaPlanWorkItemRelate) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{3}
}

func (x *SaPlanWorkItemRelate) GetWorkItem() *WorkItems {
	if x != nil {
		return x.WorkItem
	}
	return nil
}

func (x *SaPlanWorkItemRelate) GetRelates() []*Relates {
	if x != nil {
		return x.Relates
	}
	return nil
}

type SaPlanCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BelongType  string               `protobuf:"bytes,1,opt,name=belongType,proto3" json:"belongType,omitempty"`
	BelongTo    string               `protobuf:"bytes,2,opt,name=belongTo,proto3" json:"belongTo,omitempty"`
	Name        string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status      string               `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	PlanRelates []*models.PlanRelate `protobuf:"bytes,5,rep,name=planRelates,proto3" json:"planRelates,omitempty"`
}

func (x *SaPlanCreateReq) Reset() {
	*x = SaPlanCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaPlanCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaPlanCreateReq) ProtoMessage() {}

func (x *SaPlanCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaPlanCreateReq.ProtoReflect.Descriptor instead.
func (*SaPlanCreateReq) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{4}
}

func (x *SaPlanCreateReq) GetBelongType() string {
	if x != nil {
		return x.BelongType
	}
	return ""
}

func (x *SaPlanCreateReq) GetBelongTo() string {
	if x != nil {
		return x.BelongTo
	}
	return ""
}

func (x *SaPlanCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SaPlanCreateReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SaPlanCreateReq) GetPlanRelates() []*models.PlanRelate {
	if x != nil {
		return x.PlanRelates
	}
	return nil
}

type SaPlanCreateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SaPlanCreateResp) Reset() {
	*x = SaPlanCreateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaPlanCreateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaPlanCreateResp) ProtoMessage() {}

func (x *SaPlanCreateResp) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaPlanCreateResp.ProtoReflect.Descriptor instead.
func (*SaPlanCreateResp) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{5}
}

func (x *SaPlanCreateResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SaPlanUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status               string               `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	UpdateTime           string               `protobuf:"bytes,3,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	PlanRelates          []*models.PlanRelate `protobuf:"bytes,4,rep,name=planRelates,proto3" json:"planRelates,omitempty"`
	DeletedPlanRelateIds []string             `protobuf:"bytes,5,rep,name=DeletedPlanRelateIds,proto3" json:"DeletedPlanRelateIds,omitempty"` //  QueryParams queryParams = 6;
}

func (x *SaPlanUpdateReq) Reset() {
	*x = SaPlanUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaPlanUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaPlanUpdateReq) ProtoMessage() {}

func (x *SaPlanUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaPlanUpdateReq.ProtoReflect.Descriptor instead.
func (*SaPlanUpdateReq) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{6}
}

func (x *SaPlanUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SaPlanUpdateReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SaPlanUpdateReq) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SaPlanUpdateReq) GetPlanRelates() []*models.PlanRelate {
	if x != nil {
		return x.PlanRelates
	}
	return nil
}

func (x *SaPlanUpdateReq) GetDeletedPlanRelateIds() []string {
	if x != nil {
		return x.DeletedPlanRelateIds
	}
	return nil
}

type SaPlanUpdateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plans *models.Plan `protobuf:"bytes,1,opt,name=plans,proto3" json:"plans,omitempty"`
}

func (x *SaPlanUpdateResp) Reset() {
	*x = SaPlanUpdateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaPlanUpdateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaPlanUpdateResp) ProtoMessage() {}

func (x *SaPlanUpdateResp) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaPlanUpdateResp.ProtoReflect.Descriptor instead.
func (*SaPlanUpdateResp) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{7}
}

func (x *SaPlanUpdateResp) GetPlans() *models.Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

type ToUpdatePlanResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plans                     *models.Plan         `protobuf:"bytes,1,opt,name=plans,proto3" json:"plans,omitempty"`
	ToCreateWorkItem          []*WorkItems         `protobuf:"bytes,2,rep,name=ToCreateWorkItem,proto3" json:"ToCreateWorkItem,omitempty"`
	ToDeleteWorkItemIds       []string             `protobuf:"bytes,3,rep,name=ToDeleteWorkItemIds,proto3" json:"ToDeleteWorkItemIds,omitempty"`
	ToUpdateWorkItem          []*WorkItems         `protobuf:"bytes,4,rep,name=ToUpdateWorkItem,proto3" json:"ToUpdateWorkItem,omitempty"`
	ToCreateRelate            []*Relates           `protobuf:"bytes,5,rep,name=ToCreateRelate,proto3" json:"ToCreateRelate,omitempty"`
	ToDeleteWorkItemRelateIds []string             `protobuf:"bytes,6,rep,name=ToDeleteWorkItemRelateIds,proto3" json:"ToDeleteWorkItemRelateIds,omitempty"`
	ToCreatePlanRelate        []*models.PlanRelate `protobuf:"bytes,7,rep,name=ToCreatePlanRelate,proto3" json:"ToCreatePlanRelate,omitempty"`
	ToDeletePlanRelate        []string             `protobuf:"bytes,8,rep,name=ToDeletePlanRelate,proto3" json:"ToDeletePlanRelate,omitempty"`
	ToUpdatePlanRelate        []*models.PlanRelate `protobuf:"bytes,9,rep,name=ToUpdatePlanRelate,proto3" json:"ToUpdatePlanRelate,omitempty"`
	ToUpdateRelate            []*Relates           `protobuf:"bytes,10,rep,name=ToUpdateRelate,proto3" json:"ToUpdateRelate,omitempty"`
}

func (x *ToUpdatePlanResource) Reset() {
	*x = ToUpdatePlanResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToUpdatePlanResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToUpdatePlanResource) ProtoMessage() {}

func (x *ToUpdatePlanResource) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToUpdatePlanResource.ProtoReflect.Descriptor instead.
func (*ToUpdatePlanResource) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{8}
}

func (x *ToUpdatePlanResource) GetPlans() *models.Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

func (x *ToUpdatePlanResource) GetToCreateWorkItem() []*WorkItems {
	if x != nil {
		return x.ToCreateWorkItem
	}
	return nil
}

func (x *ToUpdatePlanResource) GetToDeleteWorkItemIds() []string {
	if x != nil {
		return x.ToDeleteWorkItemIds
	}
	return nil
}

func (x *ToUpdatePlanResource) GetToUpdateWorkItem() []*WorkItems {
	if x != nil {
		return x.ToUpdateWorkItem
	}
	return nil
}

func (x *ToUpdatePlanResource) GetToCreateRelate() []*Relates {
	if x != nil {
		return x.ToCreateRelate
	}
	return nil
}

func (x *ToUpdatePlanResource) GetToDeleteWorkItemRelateIds() []string {
	if x != nil {
		return x.ToDeleteWorkItemRelateIds
	}
	return nil
}

func (x *ToUpdatePlanResource) GetToCreatePlanRelate() []*models.PlanRelate {
	if x != nil {
		return x.ToCreatePlanRelate
	}
	return nil
}

func (x *ToUpdatePlanResource) GetToDeletePlanRelate() []string {
	if x != nil {
		return x.ToDeletePlanRelate
	}
	return nil
}

func (x *ToUpdatePlanResource) GetToUpdatePlanRelate() []*models.PlanRelate {
	if x != nil {
		return x.ToUpdatePlanRelate
	}
	return nil
}

func (x *ToUpdatePlanResource) GetToUpdateRelate() []*Relates {
	if x != nil {
		return x.ToUpdateRelate
	}
	return nil
}

type SapLanEventCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId            string   `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	Event             string   `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	ExeArea           string   `protobuf:"bytes,3,opt,name=exeArea,proto3" json:"exeArea,omitempty"`
	NotifyLeftOffset  string   `protobuf:"bytes,4,opt,name=notifyLeftOffset,proto3" json:"notifyLeftOffset,omitempty"`
	NotifyOffsetUnit  string   `protobuf:"bytes,5,opt,name=notifyOffsetUnit,proto3" json:"notifyOffsetUnit,omitempty"`
	NotifyRightOffset int32    `protobuf:"varint,6,opt,name=notifyRightOffset,proto3" json:"notifyRightOffset,omitempty"`
	FormId            []string `protobuf:"bytes,7,rep,name=formId,proto3" json:"formId,omitempty"`
	FrequencyInterval uint32   `protobuf:"varint,8,opt,name=frequencyInterval,proto3" json:"frequencyInterval,omitempty"`
	FrequencyUnit     string   `protobuf:"bytes,9,opt,name=FrequencyUnit,proto3" json:"FrequencyUnit,omitempty"`
	TotalTimes        int32    `protobuf:"varint,10,opt,name=TotalTimes,proto3" json:"TotalTimes,omitempty"`
	Description       string   `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *SapLanEventCreateReq) Reset() {
	*x = SapLanEventCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SapLanEventCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SapLanEventCreateReq) ProtoMessage() {}

func (x *SapLanEventCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SapLanEventCreateReq.ProtoReflect.Descriptor instead.
func (*SapLanEventCreateReq) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{9}
}

func (x *SapLanEventCreateReq) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *SapLanEventCreateReq) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *SapLanEventCreateReq) GetExeArea() string {
	if x != nil {
		return x.ExeArea
	}
	return ""
}

func (x *SapLanEventCreateReq) GetNotifyLeftOffset() string {
	if x != nil {
		return x.NotifyLeftOffset
	}
	return ""
}

func (x *SapLanEventCreateReq) GetNotifyOffsetUnit() string {
	if x != nil {
		return x.NotifyOffsetUnit
	}
	return ""
}

func (x *SapLanEventCreateReq) GetNotifyRightOffset() int32 {
	if x != nil {
		return x.NotifyRightOffset
	}
	return 0
}

func (x *SapLanEventCreateReq) GetFormId() []string {
	if x != nil {
		return x.FormId
	}
	return nil
}

func (x *SapLanEventCreateReq) GetFrequencyInterval() uint32 {
	if x != nil {
		return x.FrequencyInterval
	}
	return 0
}

func (x *SapLanEventCreateReq) GetFrequencyUnit() string {
	if x != nil {
		return x.FrequencyUnit
	}
	return ""
}

func (x *SapLanEventCreateReq) GetTotalTimes() int32 {
	if x != nil {
		return x.TotalTimes
	}
	return 0
}

func (x *SapLanEventCreateReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type PlanCreateReqWorkItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkItem *PlanCreateReqWorkItem  `protobuf:"bytes,1,opt,name=workItem,proto3" json:"workItem,omitempty"`
	Relates  []*PlanCreateReqRelates `protobuf:"bytes,2,rep,name=relates,proto3" json:"relates,omitempty"`
}

func (x *PlanCreateReqWorkItems) Reset() {
	*x = PlanCreateReqWorkItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanCreateReqWorkItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanCreateReqWorkItems) ProtoMessage() {}

func (x *PlanCreateReqWorkItems) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanCreateReqWorkItems.ProtoReflect.Descriptor instead.
func (*PlanCreateReqWorkItems) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{10}
}

func (x *PlanCreateReqWorkItems) GetWorkItem() *PlanCreateReqWorkItem {
	if x != nil {
		return x.WorkItem
	}
	return nil
}

func (x *PlanCreateReqWorkItems) GetRelates() []*PlanCreateReqRelates {
	if x != nil {
		return x.Relates
	}
	return nil
}

type PlanCreateReqWorkItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BelongType        string `protobuf:"bytes,2,opt,name=belongType,proto3" json:"belongType,omitempty"`
	Event             string `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	FrequencyInterval uint32 `protobuf:"varint,4,opt,name=frequencyInterval,proto3" json:"frequencyInterval,omitempty"`
	FrequencyUnit     string `protobuf:"bytes,5,opt,name=frequencyUnit,proto3" json:"frequencyUnit,omitempty"`
	PrincipalType     string `protobuf:"bytes,6,opt,name=principalType,proto3" json:"principalType,omitempty"`
	SortNum           uint32 `protobuf:"varint,7,opt,name=sortNum,proto3" json:"sortNum,omitempty"`
	Status            string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Title             string `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	Type              string `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PlanCreateReqWorkItem) Reset() {
	*x = PlanCreateReqWorkItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanCreateReqWorkItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanCreateReqWorkItem) ProtoMessage() {}

func (x *PlanCreateReqWorkItem) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanCreateReqWorkItem.ProtoReflect.Descriptor instead.
func (*PlanCreateReqWorkItem) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{11}
}

func (x *PlanCreateReqWorkItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlanCreateReqWorkItem) GetBelongType() string {
	if x != nil {
		return x.BelongType
	}
	return ""
}

func (x *PlanCreateReqWorkItem) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *PlanCreateReqWorkItem) GetFrequencyInterval() uint32 {
	if x != nil {
		return x.FrequencyInterval
	}
	return 0
}

func (x *PlanCreateReqWorkItem) GetFrequencyUnit() string {
	if x != nil {
		return x.FrequencyUnit
	}
	return ""
}

func (x *PlanCreateReqWorkItem) GetPrincipalType() string {
	if x != nil {
		return x.PrincipalType
	}
	return ""
}

func (x *PlanCreateReqWorkItem) GetSortNum() uint32 {
	if x != nil {
		return x.SortNum
	}
	return 0
}

func (x *PlanCreateReqWorkItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PlanCreateReqWorkItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PlanCreateReqWorkItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type PlanCreateReqRelates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ResourceType string `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceId   string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	Status       string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Title        string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *PlanCreateReqRelates) Reset() {
	*x = PlanCreateReqRelates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanCreateReqRelates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanCreateReqRelates) ProtoMessage() {}

func (x *PlanCreateReqRelates) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanCreateReqRelates.ProtoReflect.Descriptor instead.
func (*PlanCreateReqRelates) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{12}
}

func (x *PlanCreateReqRelates) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlanCreateReqRelates) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *PlanCreateReqRelates) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *PlanCreateReqRelates) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PlanCreateReqRelates) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type PlanDetailPreloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plan        *models.Plan         `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	PlanRelates []*models.PlanRelate `protobuf:"bytes,2,rep,name=planRelates,proto3" json:"planRelates,omitempty"`
}

func (x *PlanDetailPreloadInfo) Reset() {
	*x = PlanDetailPreloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanDetailPreloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanDetailPreloadInfo) ProtoMessage() {}

func (x *PlanDetailPreloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanDetailPreloadInfo.ProtoReflect.Descriptor instead.
func (*PlanDetailPreloadInfo) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{13}
}

func (x *PlanDetailPreloadInfo) GetPlan() *models.Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *PlanDetailPreloadInfo) GetPlanRelates() []*models.PlanRelate {
	if x != nil {
		return x.PlanRelates
	}
	return nil
}

// 新增
type PlanCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type              string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Status            string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	BelongType        string   `protobuf:"bytes,5,opt,name=belongType,proto3" json:"belongType,omitempty"`
	BelongTo          *string  `protobuf:"bytes,6,opt,name=belongTo,proto3,oneof" json:"belongTo,omitempty"`
	RelateDiseases    []string `protobuf:"bytes,7,rep,name=relateDiseases,proto3" json:"relateDiseases,omitempty"`
	RelateDysfunction []string `protobuf:"bytes,8,rep,name=relateDysfunction,proto3" json:"relateDysfunction,omitempty"`
	ApplyAges         []string `protobuf:"bytes,9,rep,name=applyAges,proto3" json:"applyAges,omitempty"`
	// optional string applyDisease = 7 [(openapi.v3.property) = {description:"apply_disease;text;适用病种"}];
	// optional string applyDysfunction = 8 [(openapi.v3.property) = {description:"apply_dysfunction;text;适用功能障碍(多个功能障碍用','分隔)"}];
	// optional string applyAges = 9 [(openapi.v3.property) = {description:"apply_ages;text;适用年龄段(多个年龄段用','分隔)"}];
	Event     *string                   `protobuf:"bytes,10,opt,name=event,proto3,oneof" json:"event,omitempty"`
	WorkItems []*CreatePlanWorkItemBean `protobuf:"bytes,11,rep,name=workItems,proto3" json:"workItems,omitempty"`
}

func (x *PlanCreateRequest) Reset() {
	*x = PlanCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanCreateRequest) ProtoMessage() {}

func (x *PlanCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanCreateRequest.ProtoReflect.Descriptor instead.
func (*PlanCreateRequest) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{14}
}

func (x *PlanCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlanCreateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PlanCreateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PlanCreateRequest) GetBelongType() string {
	if x != nil {
		return x.BelongType
	}
	return ""
}

func (x *PlanCreateRequest) GetBelongTo() string {
	if x != nil && x.BelongTo != nil {
		return *x.BelongTo
	}
	return ""
}

func (x *PlanCreateRequest) GetRelateDiseases() []string {
	if x != nil {
		return x.RelateDiseases
	}
	return nil
}

func (x *PlanCreateRequest) GetRelateDysfunction() []string {
	if x != nil {
		return x.RelateDysfunction
	}
	return nil
}

func (x *PlanCreateRequest) GetApplyAges() []string {
	if x != nil {
		return x.ApplyAges
	}
	return nil
}

func (x *PlanCreateRequest) GetEvent() string {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return ""
}

func (x *PlanCreateRequest) GetWorkItems() []*CreatePlanWorkItemBean {
	if x != nil {
		return x.WorkItems
	}
	return nil
}

type CreatePlanWorkItemBean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkItem *CreatePlanWorkItem         `protobuf:"bytes,1,opt,name=workItem,proto3" json:"workItem,omitempty"`
	Relates  []*CreatePlanWorkItemRelate `protobuf:"bytes,2,rep,name=relates,proto3" json:"relates,omitempty"`
}

func (x *CreatePlanWorkItemBean) Reset() {
	*x = CreatePlanWorkItemBean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanWorkItemBean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanWorkItemBean) ProtoMessage() {}

func (x *CreatePlanWorkItemBean) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanWorkItemBean.ProtoReflect.Descriptor instead.
func (*CreatePlanWorkItemBean) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{15}
}

func (x *CreatePlanWorkItemBean) GetWorkItem() *CreatePlanWorkItem {
	if x != nil {
		return x.WorkItem
	}
	return nil
}

func (x *CreatePlanWorkItemBean) GetRelates() []*CreatePlanWorkItemRelate {
	if x != nil {
		return x.Relates
	}
	return nil
}

type CreatePlanWorkItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title             *string `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Type              string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Status            string  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Tag               *string `protobuf:"bytes,10,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	SortNum           *uint32 `protobuf:"varint,24,opt,name=sortNum,proto3,oneof" json:"sortNum,omitempty"`
	Event             string  `protobuf:"bytes,25,opt,name=event,proto3" json:"event,omitempty"`
	FrequencyInterval *int32  `protobuf:"varint,26,opt,name=frequencyInterval,proto3,oneof" json:"frequencyInterval,omitempty"`
	FrequencyUnit     *string `protobuf:"bytes,27,opt,name=frequencyUnit,proto3,oneof" json:"frequencyUnit,omitempty"`
	Description       *string `protobuf:"bytes,36,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *CreatePlanWorkItem) Reset() {
	*x = CreatePlanWorkItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanWorkItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanWorkItem) ProtoMessage() {}

func (x *CreatePlanWorkItem) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanWorkItem.ProtoReflect.Descriptor instead.
func (*CreatePlanWorkItem) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{16}
}

func (x *CreatePlanWorkItem) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CreatePlanWorkItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreatePlanWorkItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreatePlanWorkItem) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *CreatePlanWorkItem) GetSortNum() uint32 {
	if x != nil && x.SortNum != nil {
		return *x.SortNum
	}
	return 0
}

func (x *CreatePlanWorkItem) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *CreatePlanWorkItem) GetFrequencyInterval() int32 {
	if x != nil && x.FrequencyInterval != nil {
		return *x.FrequencyInterval
	}
	return 0
}

func (x *CreatePlanWorkItem) GetFrequencyUnit() string {
	if x != nil && x.FrequencyUnit != nil {
		return *x.FrequencyUnit
	}
	return ""
}

func (x *CreatePlanWorkItem) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type CreatePlanWorkItemRelate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Status       string  `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ResourceType string  `protobuf:"bytes,4,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceId   string  `protobuf:"bytes,5,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	Comments     *string `protobuf:"bytes,8,opt,name=comments,proto3,oneof" json:"comments,omitempty"`
}

func (x *CreatePlanWorkItemRelate) Reset() {
	*x = CreatePlanWorkItemRelate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanWorkItemRelate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanWorkItemRelate) ProtoMessage() {}

func (x *CreatePlanWorkItemRelate) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanWorkItemRelate.ProtoReflect.Descriptor instead.
func (*CreatePlanWorkItemRelate) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{17}
}

func (x *CreatePlanWorkItemRelate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreatePlanWorkItemRelate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreatePlanWorkItemRelate) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *CreatePlanWorkItemRelate) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *CreatePlanWorkItemRelate) GetComments() string {
	if x != nil && x.Comments != nil {
		return *x.Comments
	}
	return ""
}

type PlanCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PlanCreateResponse) Reset() {
	*x = PlanCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanCreateResponse) ProtoMessage() {}

func (x *PlanCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanCreateResponse.ProtoReflect.Descriptor instead.
func (*PlanCreateResponse) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{18}
}

func (x *PlanCreateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 删除
type PlanDelByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //  QueryParams queryParams = 2;
}

func (x *PlanDelByIdRequest) Reset() {
	*x = PlanDelByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanDelByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanDelByIdRequest) ProtoMessage() {}

func (x *PlanDelByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanDelByIdRequest.ProtoReflect.Descriptor instead.
func (*PlanDelByIdRequest) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{19}
}

func (x *PlanDelByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PlanDelByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PlanDelByIdResponse) Reset() {
	*x = PlanDelByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanDelByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanDelByIdResponse) ProtoMessage() {}

func (x *PlanDelByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanDelByIdResponse.ProtoReflect.Descriptor instead.
func (*PlanDelByIdResponse) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{20}
}

func (x *PlanDelByIdResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 更新
type PlanUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data *PlanUpdateBody `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PlanUpdateRequest) Reset() {
	*x = PlanUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanUpdateRequest) ProtoMessage() {}

func (x *PlanUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanUpdateRequest.ProtoReflect.Descriptor instead.
func (*PlanUpdateRequest) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{21}
}

func (x *PlanUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlanUpdateRequest) GetData() *PlanUpdateBody {
	if x != nil {
		return x.Data
	}
	return nil
}

type PlanUpdateBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 方案基本信息更新
	PlanBasisUpdate *PlanBasisUpdate `protobuf:"bytes,1,opt,name=planBasisUpdate,proto3" json:"planBasisUpdate,omitempty"`
	// repeated RelateDysfunction relateDysfunctions = 2[(openapi.v3.property) = {description:"适用功能障碍",required:["relateDysfunction"]}];
	// repeated string applyAges = 3[(openapi.v3.property) = {description:"(适用年龄段",required:["applyAges"]}];
	// 方案工作项目信息更新
	PlanWorkItemUpdate *PlanWorkItemUpdate `protobuf:"bytes,2,opt,name=planWorkItemUpdate,proto3" json:"planWorkItemUpdate,omitempty"`
}

func (x *PlanUpdateBody) Reset() {
	*x = PlanUpdateBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanUpdateBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanUpdateBody) ProtoMessage() {}

func (x *PlanUpdateBody) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanUpdateBody.ProtoReflect.Descriptor instead.
func (*PlanUpdateBody) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{22}
}

func (x *PlanUpdateBody) GetPlanBasisUpdate() *PlanBasisUpdate {
	if x != nil {
		return x.PlanBasisUpdate
	}
	return nil
}

func (x *PlanUpdateBody) GetPlanWorkItemUpdate() *PlanWorkItemUpdate {
	if x != nil {
		return x.PlanWorkItemUpdate
	}
	return nil
}

type PlanWorkItemUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 方案被删除的工作项信息
	PlanDeletedWorkItemInfo *PlanDeletedWorkItemInfo  `protobuf:"bytes,1,opt,name=planDeletedWorkItemInfo,proto3" json:"planDeletedWorkItemInfo,omitempty"`
	WorkItems               []*UpdatePlanWorkItemBean `protobuf:"bytes,3,rep,name=workItems,proto3" json:"workItems,omitempty"`
}

func (x *PlanWorkItemUpdate) Reset() {
	*x = PlanWorkItemUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanWorkItemUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanWorkItemUpdate) ProtoMessage() {}

func (x *PlanWorkItemUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanWorkItemUpdate.ProtoReflect.Descriptor instead.
func (*PlanWorkItemUpdate) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{23}
}

func (x *PlanWorkItemUpdate) GetPlanDeletedWorkItemInfo() *PlanDeletedWorkItemInfo {
	if x != nil {
		return x.PlanDeletedWorkItemInfo
	}
	return nil
}

func (x *PlanWorkItemUpdate) GetWorkItems() []*UpdatePlanWorkItemBean {
	if x != nil {
		return x.WorkItems
	}
	return nil
}

type UpdatePlanWorkItemBean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkItem *UpdatePlanWorkItem         `protobuf:"bytes,1,opt,name=workItem,proto3" json:"workItem,omitempty"`
	Relates  []*UpdatePlanWorkItemRelate `protobuf:"bytes,2,rep,name=relates,proto3" json:"relates,omitempty"`
}

func (x *UpdatePlanWorkItemBean) Reset() {
	*x = UpdatePlanWorkItemBean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlanWorkItemBean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlanWorkItemBean) ProtoMessage() {}

func (x *UpdatePlanWorkItemBean) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlanWorkItemBean.ProtoReflect.Descriptor instead.
func (*UpdatePlanWorkItemBean) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{24}
}

func (x *UpdatePlanWorkItemBean) GetWorkItem() *UpdatePlanWorkItem {
	if x != nil {
		return x.WorkItem
	}
	return nil
}

func (x *UpdatePlanWorkItemBean) GetRelates() []*UpdatePlanWorkItemRelate {
	if x != nil {
		return x.Relates
	}
	return nil
}

type PlanDeletedWorkItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repeated string diseaseRelateIds = 1;
	WorkItemIds       []string `protobuf:"bytes,2,rep,name=workItemIds,proto3" json:"workItemIds,omitempty"`
	WorkItemRelateIds []string `protobuf:"bytes,3,rep,name=workItemRelateIds,proto3" json:"workItemRelateIds,omitempty"`
}

func (x *PlanDeletedWorkItemInfo) Reset() {
	*x = PlanDeletedWorkItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanDeletedWorkItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanDeletedWorkItemInfo) ProtoMessage() {}

func (x *PlanDeletedWorkItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanDeletedWorkItemInfo.ProtoReflect.Descriptor instead.
func (*PlanDeletedWorkItemInfo) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{25}
}

func (x *PlanDeletedWorkItemInfo) GetWorkItemIds() []string {
	if x != nil {
		return x.WorkItemIds
	}
	return nil
}

func (x *PlanDeletedWorkItemInfo) GetWorkItemRelateIds() []string {
	if x != nil {
		return x.WorkItemRelateIds
	}
	return nil
}

type RelateDysfunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DysFuncName string `protobuf:"bytes,1,opt,name=dysFuncName,proto3" json:"dysFuncName,omitempty"`
	DysFuncId   string `protobuf:"bytes,2,opt,name=dysFuncId,proto3" json:"dysFuncId,omitempty"`
}

func (x *RelateDysfunction) Reset() {
	*x = RelateDysfunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelateDysfunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelateDysfunction) ProtoMessage() {}

func (x *RelateDysfunction) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelateDysfunction.ProtoReflect.Descriptor instead.
func (*RelateDysfunction) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{26}
}

func (x *RelateDysfunction) GetDysFuncName() string {
	if x != nil {
		return x.DysFuncName
	}
	return ""
}

func (x *RelateDysfunction) GetDysFuncId() string {
	if x != nil {
		return x.DysFuncId
	}
	return ""
}

type PlanBasisUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RelateDiseases    []string `protobuf:"bytes,7,rep,name=relateDiseases,proto3" json:"relateDiseases,omitempty"`
	RelateDysfunction []string `protobuf:"bytes,8,rep,name=relateDysfunction,proto3" json:"relateDysfunction,omitempty"`
	ApplyAges         []string `protobuf:"bytes,9,rep,name=applyAges,proto3" json:"applyAges,omitempty"`
	// string type = 3 [(openapi.v3.property) = {description:"type;enum('SA','FOLLOWUP');方案类型(SA 症状评估, FOLLOWUP 随访)"}];
	// string status = 4 [(openapi.v3.property) = {description:"status;enum('DRAFT','ENABLED','DISABLED');方案状态('DRAFT 草稿', 'ENABLED 启用', 'DISABLED 禁用')"}];
	Event string `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *PlanBasisUpdate) Reset() {
	*x = PlanBasisUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanBasisUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanBasisUpdate) ProtoMessage() {}

func (x *PlanBasisUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanBasisUpdate.ProtoReflect.Descriptor instead.
func (*PlanBasisUpdate) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{27}
}

func (x *PlanBasisUpdate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlanBasisUpdate) GetRelateDiseases() []string {
	if x != nil {
		return x.RelateDiseases
	}
	return nil
}

func (x *PlanBasisUpdate) GetRelateDysfunction() []string {
	if x != nil {
		return x.RelateDysfunction
	}
	return nil
}

func (x *PlanBasisUpdate) GetApplyAges() []string {
	if x != nil {
		return x.ApplyAges
	}
	return nil
}

func (x *PlanBasisUpdate) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

type UpdatePlanWorkItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Title             *string `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Type              string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Status            string  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Tag               *string `protobuf:"bytes,10,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	SortNum           *uint32 `protobuf:"varint,24,opt,name=sortNum,proto3,oneof" json:"sortNum,omitempty"`
	Event             string  `protobuf:"bytes,25,opt,name=event,proto3" json:"event,omitempty"`
	FrequencyInterval *int32  `protobuf:"varint,26,opt,name=frequencyInterval,proto3,oneof" json:"frequencyInterval,omitempty"`
	FrequencyUnit     *string `protobuf:"bytes,27,opt,name=frequencyUnit,proto3,oneof" json:"frequencyUnit,omitempty"`
	Description       *string `protobuf:"bytes,36,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *UpdatePlanWorkItem) Reset() {
	*x = UpdatePlanWorkItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlanWorkItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlanWorkItem) ProtoMessage() {}

func (x *UpdatePlanWorkItem) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlanWorkItem.ProtoReflect.Descriptor instead.
func (*UpdatePlanWorkItem) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{28}
}

func (x *UpdatePlanWorkItem) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *UpdatePlanWorkItem) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdatePlanWorkItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdatePlanWorkItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdatePlanWorkItem) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *UpdatePlanWorkItem) GetSortNum() uint32 {
	if x != nil && x.SortNum != nil {
		return *x.SortNum
	}
	return 0
}

func (x *UpdatePlanWorkItem) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *UpdatePlanWorkItem) GetFrequencyInterval() int32 {
	if x != nil && x.FrequencyInterval != nil {
		return *x.FrequencyInterval
	}
	return 0
}

func (x *UpdatePlanWorkItem) GetFrequencyUnit() string {
	if x != nil && x.FrequencyUnit != nil {
		return *x.FrequencyUnit
	}
	return ""
}

func (x *UpdatePlanWorkItem) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type UpdatePlanWorkItemRelate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Title        string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Status       string  `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ResourceType string  `protobuf:"bytes,4,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceId   string  `protobuf:"bytes,5,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
}

func (x *UpdatePlanWorkItemRelate) Reset() {
	*x = UpdatePlanWorkItemRelate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlanWorkItemRelate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlanWorkItemRelate) ProtoMessage() {}

func (x *UpdatePlanWorkItemRelate) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlanWorkItemRelate.ProtoReflect.Descriptor instead.
func (*UpdatePlanWorkItemRelate) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{29}
}

func (x *UpdatePlanWorkItemRelate) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *UpdatePlanWorkItemRelate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdatePlanWorkItemRelate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdatePlanWorkItemRelate) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *UpdatePlanWorkItemRelate) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

type PlanUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BelongTo      string `protobuf:"bytes,1,opt,name=belongTo,proto3" json:"belongTo,omitempty"`
	BelongType    string `protobuf:"bytes,2,opt,name=belongType,proto3" json:"belongType,omitempty"`
	CreateTime    string `protobuf:"bytes,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	FrequencyUnit string `protobuf:"bytes,4,opt,name=frequencyUnit,proto3" json:"frequencyUnit,omitempty"`
	Id            string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Status        string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Type          string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	UpdateTime    string `protobuf:"bytes,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *PlanUpdateResponse) Reset() {
	*x = PlanUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanUpdateResponse) ProtoMessage() {}

func (x *PlanUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanUpdateResponse.ProtoReflect.Descriptor instead.
func (*PlanUpdateResponse) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{30}
}

func (x *PlanUpdateResponse) GetBelongTo() string {
	if x != nil {
		return x.BelongTo
	}
	return ""
}

func (x *PlanUpdateResponse) GetBelongType() string {
	if x != nil {
		return x.BelongType
	}
	return ""
}

func (x *PlanUpdateResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *PlanUpdateResponse) GetFrequencyUnit() string {
	if x != nil {
		return x.FrequencyUnit
	}
	return ""
}

func (x *PlanUpdateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlanUpdateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlanUpdateResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PlanUpdateResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PlanUpdateResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 查询
type PlanDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PlanDetailRequest) Reset() {
	*x = PlanDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanDetailRequest) ProtoMessage() {}

func (x *PlanDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanDetailRequest.ProtoReflect.Descriptor instead.
func (*PlanDetailRequest) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{31}
}

func (x *PlanDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PlanDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plan               *models.Plan             `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	RelateWorkItems    []*PlanRelateWorkItem    `protobuf:"bytes,2,rep,name=relateWorkItems,proto3" json:"relateWorkItems,omitempty"`
	RelateDiseases     []*PlanRelateDisease     `protobuf:"bytes,3,rep,name=relateDiseases,proto3" json:"relateDiseases,omitempty"`
	RelateDysfunctions []*PlanRelateDysfunction `protobuf:"bytes,4,rep,name=relateDysfunctions,proto3" json:"relateDysfunctions,omitempty"`
}

func (x *PlanDetailResponse) Reset() {
	*x = PlanDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanDetailResponse) ProtoMessage() {}

func (x *PlanDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanDetailResponse.ProtoReflect.Descriptor instead.
func (*PlanDetailResponse) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{32}
}

func (x *PlanDetailResponse) GetPlan() *models.Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *PlanDetailResponse) GetRelateWorkItems() []*PlanRelateWorkItem {
	if x != nil {
		return x.RelateWorkItems
	}
	return nil
}

func (x *PlanDetailResponse) GetRelateDiseases() []*PlanRelateDisease {
	if x != nil {
		return x.RelateDiseases
	}
	return nil
}

func (x *PlanDetailResponse) GetRelateDysfunctions() []*PlanRelateDysfunction {
	if x != nil {
		return x.RelateDysfunctions
	}
	return nil
}

type PlanRelateWorkItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanRelate *models.PlanRelate `protobuf:"bytes,1,opt,name=planRelate,proto3" json:"planRelate,omitempty"`
	WorkItem   *models.WorkItem   `protobuf:"bytes,2,opt,name=workItem,proto3" json:"workItem,omitempty"`
	Relates    []*models.Relate   `protobuf:"bytes,3,rep,name=relates,proto3" json:"relates,omitempty"`
}

func (x *PlanRelateWorkItem) Reset() {
	*x = PlanRelateWorkItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanRelateWorkItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanRelateWorkItem) ProtoMessage() {}

func (x *PlanRelateWorkItem) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanRelateWorkItem.ProtoReflect.Descriptor instead.
func (*PlanRelateWorkItem) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{33}
}

func (x *PlanRelateWorkItem) GetPlanRelate() *models.PlanRelate {
	if x != nil {
		return x.PlanRelate
	}
	return nil
}

func (x *PlanRelateWorkItem) GetWorkItem() *models.WorkItem {
	if x != nil {
		return x.WorkItem
	}
	return nil
}

func (x *PlanRelateWorkItem) GetRelates() []*models.Relate {
	if x != nil {
		return x.Relates
	}
	return nil
}

type PlanRelateDisease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanRelate *models.PlanRelate `protobuf:"bytes,1,opt,name=planRelate,proto3" json:"planRelate,omitempty"`
	Disease    *models.Disease    `protobuf:"bytes,2,opt,name=disease,proto3" json:"disease,omitempty"`
}

func (x *PlanRelateDisease) Reset() {
	*x = PlanRelateDisease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanRelateDisease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanRelateDisease) ProtoMessage() {}

func (x *PlanRelateDisease) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanRelateDisease.ProtoReflect.Descriptor instead.
func (*PlanRelateDisease) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{34}
}

func (x *PlanRelateDisease) GetPlanRelate() *models.PlanRelate {
	if x != nil {
		return x.PlanRelate
	}
	return nil
}

func (x *PlanRelateDisease) GetDisease() *models.Disease {
	if x != nil {
		return x.Disease
	}
	return nil
}

type PlanRelateDysfunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanRelate *models.PlanRelate `protobuf:"bytes,1,opt,name=planRelate,proto3" json:"planRelate,omitempty"`
	DisFunc    *models.DisFunc    `protobuf:"bytes,2,opt,name=disFunc,proto3" json:"disFunc,omitempty"`
}

func (x *PlanRelateDysfunction) Reset() {
	*x = PlanRelateDysfunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanRelateDysfunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanRelateDysfunction) ProtoMessage() {}

func (x *PlanRelateDysfunction) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanRelateDysfunction.ProtoReflect.Descriptor instead.
func (*PlanRelateDysfunction) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{35}
}

func (x *PlanRelateDysfunction) GetPlanRelate() *models.PlanRelate {
	if x != nil {
		return x.PlanRelate
	}
	return nil
}

func (x *PlanRelateDysfunction) GetDisFunc() *models.DisFunc {
	if x != nil {
		return x.DisFunc
	}
	return nil
}

// 详情查询
type PlanFilterQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter  *PlanFilterQueryRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Page    int32                          `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int32                          `protobuf:"varint,3,opt,name=perPage,proto3" json:"perPage,omitempty"` //  HeaderParams HeaderParams = 4;
}

func (x *PlanFilterQueryRequest) Reset() {
	*x = PlanFilterQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanFilterQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanFilterQueryRequest) ProtoMessage() {}

func (x *PlanFilterQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanFilterQueryRequest.ProtoReflect.Descriptor instead.
func (*PlanFilterQueryRequest) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{36}
}

func (x *PlanFilterQueryRequest) GetFilter() *PlanFilterQueryRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *PlanFilterQueryRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PlanFilterQueryRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type PlanFilterQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int32          `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int32          `protobuf:"varint,2,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Results []*models.Plan `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Total   int64          `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PlanFilterQueryResponse) Reset() {
	*x = PlanFilterQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanFilterQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanFilterQueryResponse) ProtoMessage() {}

func (x *PlanFilterQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanFilterQueryResponse.ProtoReflect.Descriptor instead.
func (*PlanFilterQueryResponse) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{37}
}

func (x *PlanFilterQueryResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PlanFilterQueryResponse) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *PlanFilterQueryResponse) GetResults() []*models.Plan {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PlanFilterQueryResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type PlanFilterQueryRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BelongType    string   `protobuf:"bytes,1,opt,name=belongType,proto3" json:"belongType,omitempty"`
	BelongTo      string   `protobuf:"bytes,2,opt,name=belongTo,proto3" json:"belongTo,omitempty"`
	FrequencyUnit string   `protobuf:"bytes,3,opt,name=frequencyUnit,proto3" json:"frequencyUnit,omitempty"`
	Ids           []string `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`
	Key           string   `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Type          string   `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Status        string   `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PlanFilterQueryRequest_Filter) Reset() {
	*x = PlanFilterQueryRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanFilterQueryRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanFilterQueryRequest_Filter) ProtoMessage() {}

func (x *PlanFilterQueryRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanFilterQueryRequest_Filter.ProtoReflect.Descriptor instead.
func (*PlanFilterQueryRequest_Filter) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{36, 0}
}

func (x *PlanFilterQueryRequest_Filter) GetBelongType() string {
	if x != nil {
		return x.BelongType
	}
	return ""
}

func (x *PlanFilterQueryRequest_Filter) GetBelongTo() string {
	if x != nil {
		return x.BelongTo
	}
	return ""
}

func (x *PlanFilterQueryRequest_Filter) GetFrequencyUnit() string {
	if x != nil {
		return x.FrequencyUnit
	}
	return ""
}

func (x *PlanFilterQueryRequest_Filter) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *PlanFilterQueryRequest_Filter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PlanFilterQueryRequest_Filter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PlanFilterQueryRequest_Filter) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_plan_proto protoreflect.FileDescriptor

var file_plan_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70,
	0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x64, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x99, 0x01, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a,
	0x13, 0x53, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x37, 0x0a, 0x0d, 0x53, 0x61,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x53, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0c, 0x53, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x14,
	0x53, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x14, 0x53, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x6a, 0x0a, 0x14, 0x53,
	0x61, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x26, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x07,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x0f, 0x53, 0x61, 0x50, 0x6c,
	0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x22, 0x0a,
	0x10, 0x53, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x53, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x22,
	0x3a, 0x0a, 0x10, 0x53, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0xd2, 0x04, 0x0a, 0x14,
	0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x10,
	0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x10, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x10, 0x54, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x10, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x0e, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0e, 0x54, 0x6f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x19,
	0x54, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x19, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x54, 0x6f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12,
	0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x54, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x54, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x0e, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x22, 0x92, 0x03, 0x0a, 0x14, 0x53, 0x61, 0x70, 0x4c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x65, 0x66, 0x74, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4c, 0x65, 0x66, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x36, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0xb3, 0x02,
	0x0a, 0x15, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x57,
	0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4e, 0x75,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x77,
	0x0a, 0x15, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x38, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x87, 0x08, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xba, 0x47, 0x21,
	0x92, 0x02, 0x1e, 0x6e, 0x61, 0x6d, 0x65, 0x3b, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x28,
	0x31, 0x32, 0x38, 0x29, 0x3b, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xba, 0x47, 0x4c, 0x92, 0x02, 0x49, 0x74, 0x79, 0x70,
	0x65, 0x3b, 0x65, 0x6e, 0x75, 0x6d, 0x28, 0x27, 0x53, 0x41, 0x27, 0x2c, 0x27, 0x46, 0x4f, 0x4c,
	0x4c, 0x4f, 0x57, 0x55, 0x50, 0x27, 0x29, 0x3b, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x53, 0x41, 0x20, 0xe7, 0x97, 0x87, 0xe7, 0x8a, 0xb6, 0xe8, 0xaf,
	0x84, 0xe4, 0xbc, 0xb0, 0x2c, 0x20, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x55, 0x50, 0x20, 0xe9,
	0x9a, 0x8f, 0xe8, 0xae, 0xbf, 0x29, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x89, 0x01, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x71, 0xba,
	0x47, 0x6e, 0x92, 0x02, 0x6b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3b, 0x65, 0x6e, 0x75, 0x6d,
	0x28, 0x27, 0x44, 0x52, 0x41, 0x46, 0x54, 0x27, 0x2c, 0x27, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x27, 0x2c, 0x27, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x27, 0x29, 0x3b, 0xe6,
	0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0x27, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x20, 0xe8, 0x8d, 0x89, 0xe7, 0xa8, 0xbf, 0x27, 0x2c, 0x20, 0x27, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x20, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x27, 0x2c, 0x20, 0x27, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x20, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x27, 0x29,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0a, 0x62, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6d, 0xba,
	0x47, 0x6a, 0x92, 0x02, 0x67, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x3b, 0x65, 0x6e, 0x75, 0x6d, 0x28, 0x27, 0x4f, 0x52, 0x47, 0x27, 0x2c, 0x27, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x27, 0x2c, 0x27, 0x54, 0x45, 0x41, 0x4d, 0x27, 0x2c, 0x27, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x27, 0x2c, 0x27, 0x4e, 0x4f, 0x4e, 0x45, 0x27, 0x29, 0x3b, 0xe5, 0xbd, 0x92,
	0xe5, 0xb1, 0x9e, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0xe7, 0xbb, 0x84, 0xe7, 0xbb, 0x87,
	0xe3, 0x80, 0x81, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe3, 0x80, 0x81, 0xe5, 0x9b, 0xa2, 0xe9,
	0x98, 0x9f, 0xe3, 0x80, 0x81, 0xe7, 0xbb, 0x84, 0xe7, 0xad, 0x89, 0x29, 0x52, 0x0a, 0x62, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x62, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x65, 0xba, 0x47, 0x62,
	0x92, 0x02, 0x5f, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x3b, 0x76, 0x61, 0x72,
	0x63, 0x68, 0x61, 0x72, 0x28, 0x34, 0x35, 0x29, 0x3b, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0x65, 0x2e, 0x67, 0x2e,
	0x20, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0xbd, 0x92, 0xe5, 0xb1, 0x9e, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xe6, 0x97, 0xb6, 0xe6, 0x98, 0xaf, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5,
	0x88, 0x99, 0xe5, 0xa1, 0xab, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0,
	0x81, 0x29, 0x48, 0x00, 0x52, 0x08, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0x92, 0x02,
	0x12, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe7, 0x97, 0x85, 0xe7, 0xa7, 0x8d, 0xe7, 0xbc, 0x96,
	0xe7, 0xa0, 0x81, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x79, 0x73,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e,
	0xba, 0x47, 0x1b, 0x92, 0x02, 0x18, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x8a, 0x9f, 0xe8,
	0x83, 0xbd, 0xe9, 0x9a, 0x9c, 0xe7, 0xa2, 0x8d, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x11,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x79, 0x73, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x67, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe9, 0x80, 0x82, 0xe7,
	0x94, 0xa8, 0xe5, 0xb9, 0xb4, 0xe9, 0xbe, 0x84, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x52, 0x09,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x67, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xba, 0x47, 0x2e, 0x92, 0x02, 0x2b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x3b, 0x74, 0x65, 0x78, 0x74, 0x3b, 0xe4, 0xba, 0x8b, 0xe4, 0xbb,
	0xb6, 0x28, 0xe9, 0x9a, 0x8f, 0xe8, 0xae, 0xbf, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe8, 0xa7,
	0xa6, 0xe5, 0x8f, 0x91, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x29, 0x48, 0x01, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x65, 0x61, 0x6e, 0x42, 0x18, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe9,
	0x80, 0x82, 0xe7, 0x94, 0xa8, 0xe5, 0xb9, 0xb4, 0xe9, 0xbe, 0x84, 0xe9, 0x98, 0xb6, 0xe6, 0xae,
	0xb5, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x3a, 0x2c, 0xba, 0x47,
	0x29, 0xba, 0x01, 0x02, 0x69, 0x64, 0xba, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xba, 0x01, 0x04,
	0x74, 0x79, 0x70, 0x65, 0xba, 0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xba, 0x01, 0x0a,
	0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x65, 0x61, 0x6e, 0x12, 0x33, 0x0a, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0xba, 0x0a, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0xba, 0x47, 0x1c, 0x92, 0x02, 0x19, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3b, 0x76, 0x61,
	0x72, 0x63, 0x68, 0x61, 0x72, 0x28, 0x32, 0x35, 0x35, 0x29, 0x3b, 0xe6, 0xa0, 0x87, 0xe9, 0xa2,
	0x98, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0xac, 0x01,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x97, 0x01, 0xba,
	0x47, 0x93, 0x01, 0x92, 0x02, 0x8f, 0x01, 0x74, 0x79, 0x70, 0x65, 0x3b, 0x65, 0x6e, 0x75, 0x6d,
	0x28, 0x27, 0x54, 0x41, 0x53, 0x4b, 0x27, 0x2c, 0x27, 0x53, 0x41, 0x27, 0x2c, 0x27, 0x54, 0x52,
	0x45, 0x41, 0x54, 0x27, 0x2c, 0x27, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x50, 0x27,
	0x2c, 0x27, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x27, 0x29, 0x3b, 0xe5, 0xb7,
	0xa5, 0xe4, 0xbd, 0x9c, 0xe9, 0xa1, 0xb9, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x46, 0x4f,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x50, 0x3a, 0xe9, 0x9a, 0x8f, 0xe8, 0xae, 0xbf, 0x2c, 0x53,
	0x41, 0x3a, 0xe7, 0x97, 0x87, 0xe7, 0x8a, 0xb6, 0xe8, 0xaf, 0x84, 0xe4, 0xbc, 0xb0, 0x2c, 0x54,
	0x52, 0x45, 0x41, 0x54, 0x3a, 0xe6, 0xb2, 0xbb, 0xe7, 0x96, 0x97, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a,
	0xa1, 0x2c, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x3a, 0xe5, 0xb7, 0xa5, 0xe4,
	0xbd, 0x9c, 0xe6, 0xb5, 0x81, 0x29, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0xf5, 0x01, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0xdc, 0x01,
	0xba, 0x47, 0xd8, 0x01, 0x92, 0x02, 0xd4, 0x01, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3b, 0x65,
	0x6e, 0x75, 0x6d, 0x28, 0x27, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x27, 0x2c, 0x27, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x27, 0x2c, 0x27, 0x4e, 0x45, 0x57, 0x27, 0x2c, 0x27, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x27, 0x2c, 0x27, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x27, 0x2c, 0x27, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x44, 0x27, 0x2c, 0x27, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x27,
	0x29, 0x3b, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0x27, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x20,
	0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x27, 0x2c, 0x20, 0x27, 0x44, 0x52, 0x41, 0x46, 0x54, 0x20,
	0xe8, 0x8d, 0x89, 0xe7, 0xa8, 0xbf, 0x27, 0x2c, 0x20, 0x27, 0x4e, 0x45, 0x57, 0x20, 0xe6, 0x96,
	0xb0, 0xe5, 0xbb, 0xba, 0x2d, 0xe5, 0xbe, 0x85, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0x27, 0x2c,
	0x20, 0x27, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x20, 0xe6, 0xad, 0xa3, 0xe5, 0x9c, 0xa8, 0xe8,
	0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0x27, 0x2c, 0x20, 0x27, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45,
	0x44, 0x27, 0x2c, 0x20, 0x27, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x20, 0xe5, 0xb7, 0xb2, 0xe5,
	0x85, 0xb3, 0xe9, 0x97, 0xad, 0x27, 0x2c, 0x20, 0x27, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44,
	0x20, 0xe5, 0xb7, 0xb2, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0x27, 0x29, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2c, 0xba, 0x47, 0x29, 0x92, 0x02, 0x26, 0x74, 0x61, 0x67, 0x3b, 0x74, 0x65, 0x78,
	0x74, 0x3b, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x28, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe5,
	0x80, 0xbc, 0xe7, 0x94, 0xa8, 0x27, 0x2c, 0x27, 0xe5, 0x88, 0x86, 0xe9, 0x9a, 0x94, 0x29, 0x48,
	0x01, 0x52, 0x03, 0x74, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c, 0xba, 0x47, 0x29, 0x92,
	0x02, 0x26, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x3b, 0x69, 0x6e, 0x74, 0x28, 0x31,
	0x30, 0x29, 0x20, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x3b, 0xe6, 0x8e, 0x92, 0xe5,
	0xba, 0x8f, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x48, 0x02, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74,
	0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0xaf, 0x01, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x98, 0x01, 0xba, 0x47, 0x94, 0x01, 0x92, 0x02, 0x90,
	0x01, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x3b, 0x65, 0x6e, 0x75, 0x6d, 0x28, 0x27, 0x52, 0x59, 0x27,
	0x2c, 0x27, 0x53, 0x53, 0x27, 0x2c, 0x27, 0x43, 0x59, 0x27, 0x2c, 0x27, 0x4a, 0x5a, 0x27, 0x2c,
	0x27, 0x43, 0x53, 0x27, 0x2c, 0x27, 0x52, 0x43, 0x27, 0x2c, 0x27, 0x4e, 0x4f, 0x4e, 0x45, 0x27,
	0x29, 0x3b, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x28, 0x27,
	0x52, 0x59, 0x20, 0xe5, 0x85, 0xa5, 0xe9, 0x99, 0xa2, 0x27, 0x2c, 0x27, 0x53, 0x53, 0x20, 0xe6,
	0x89, 0x8b, 0xe6, 0x9c, 0xaf, 0x27, 0x2c, 0x20, 0x27, 0x43, 0x59, 0x20, 0xe5, 0x87, 0xba, 0xe9,
	0x99, 0xa2, 0x27, 0x2c, 0x20, 0x27, 0x4a, 0x5a, 0x20, 0xe5, 0xb0, 0xb1, 0xe8, 0xaf, 0x8a, 0x27,
	0x2c, 0x20, 0x27, 0x43, 0x53, 0x20, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0x9f, 0x27, 0x2c, 0x27, 0x52,
	0x43, 0x20, 0xe5, 0x85, 0xa5, 0xe7, 0xbb, 0x84, 0x27, 0x2c, 0x27, 0x4e, 0x4f, 0x4e, 0x45, 0x27,
	0x29, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x2d, 0xba, 0x47, 0x2a, 0x92, 0x02, 0x27, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x3b, 0x69, 0x6e,
	0x74, 0x28, 0x31, 0x31, 0x29, 0x3b, 0xe9, 0xa2, 0x91, 0xe6, 0xac, 0xa1, 0xe9, 0x97, 0xb4, 0xe9,
	0x9a, 0x94, 0x48, 0x03, 0x52, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x62, 0xba, 0x47, 0x5f, 0x92, 0x02, 0x5c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x3b, 0x65, 0x6e, 0x75, 0x6d, 0x28, 0x27, 0x44,
	0x41, 0x59, 0x27, 0x2c, 0x27, 0x57, 0x45, 0x45, 0x4b, 0x27, 0x2c, 0x27, 0x4d, 0x4f, 0x4e, 0x54,
	0x48, 0x27, 0x2c, 0x27, 0x59, 0x45, 0x41, 0x52, 0x27, 0x2c, 0x27, 0x4e, 0x4f, 0x4e, 0x45, 0x27,
	0x29, 0x3b, 0xe9, 0xa2, 0x91, 0xe6, 0xac, 0xa1, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0x28, 0xe5,
	0xb9, 0xb4, 0x2c, 0xe6, 0x9c, 0x88, 0x2c, 0xe5, 0x91, 0xa8, 0x2c, 0xe6, 0x97, 0xa5, 0x2c, 0xe5,
	0xb0, 0x8f, 0xe6, 0x97, 0xb6, 0x29, 0x48, 0x04, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6c, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x45, 0xba, 0x47, 0x42, 0x92, 0x02, 0x3f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x3b, 0x74, 0x65, 0x78, 0x74, 0x3b, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x28, 0xe5,
	0x8f, 0xaf, 0xe5, 0xad, 0x98, 0xe5, 0xaf, 0x8c, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xe5, 0x86,
	0x85, 0xe5, 0xae, 0xb9, 0xe6, 0x88, 0x96, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0xe5,
	0x86, 0x85, 0xe5, 0xae, 0xb9, 0x29, 0x48, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x47, 0xba, 0x47, 0x44, 0xba, 0x01, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0xba, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0xba, 0x01, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0xba, 0x01, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0xba, 0x01, 0x11,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0xba, 0x01, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x74, 0x61, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xee, 0x06, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3f, 0xba, 0x47, 0x3c, 0x92, 0x02, 0x39, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x3b, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x28, 0x32, 0x35, 0x35, 0x29, 0x3b, 0xe6, 0xa0,
	0x87, 0xe9, 0xa2, 0x98, 0x28, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe5, 0x85, 0xb3, 0xe8, 0x81,
	0x94, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x86, 0xb3,
	0xe5, 0xae, 0x9a, 0x29, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x77, 0xba, 0x47,
	0x74, 0x92, 0x02, 0x71, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3b, 0x65, 0x6e, 0x75, 0x6d, 0x28,
	0x27, 0x4e, 0x45, 0x57, 0x27, 0x2c, 0x27, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x27, 0x2c, 0x27,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x27, 0x29, 0x3b, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0x27, 0x4e, 0x45, 0x57,
	0x20, 0xe5, 0xbe, 0x85, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0x27, 0x2c, 0x20, 0x27, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x20, 0xe6, 0xad, 0xa3, 0xe5, 0x9c, 0xa8, 0xe5, 0xa4, 0x84, 0xe7, 0x90,
	0x86, 0x20, 0x27, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x20, 0xe5, 0xb7, 0xb2, 0xe5, 0x85, 0xb3,
	0xe9, 0x97, 0xad, 0x27, 0x29, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x92, 0x03,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0xed, 0x02, 0xba, 0x47, 0xe9, 0x02, 0x92, 0x02, 0xe5, 0x02, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3b, 0x65, 0x6e, 0x75,
	0x6d, 0x28, 0x27, 0x50, 0x4c, 0x41, 0x4e, 0x27, 0x2c, 0x27, 0x46, 0x4f, 0x52, 0x4d, 0x27, 0x2c,
	0x27, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x27, 0x2c, 0x27, 0x41, 0x52, 0x54,
	0x49, 0x43, 0x4c, 0x45, 0x27, 0x2c, 0x27, 0x46, 0x55, 0x5f, 0x57, 0x43, 0x27, 0x2c, 0x27, 0x46,
	0x55, 0x5f, 0x4d, 0x27, 0x2c, 0x27, 0x52, 0x4d, 0x5f, 0x46, 0x5a, 0x27, 0x2c, 0x27, 0x52, 0x4d,
	0x5f, 0x59, 0x48, 0x27, 0x2c, 0x27, 0x52, 0x4d, 0x5f, 0x48, 0x59, 0x27, 0x2c, 0x27, 0x52, 0x4d,
	0x5f, 0x53, 0x53, 0x27, 0x2c, 0x27, 0x4e, 0x4f, 0x4e, 0x45, 0x27, 0x29, 0x3b, 0xe5, 0xb7, 0xa5,
	0xe4, 0xbd, 0x9c, 0xe9, 0xa1, 0xb9, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x45, 0x4e, 0x55, 0x4d, 0x28, 0x27, 0x50, 0x4c,
	0x41, 0x4e, 0x20, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0x27, 0x2c, 0x20, 0x27, 0x46, 0x4f, 0x52,
	0x4d, 0x20, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0x27, 0x2c, 0x20, 0x27, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x20, 0xe5, 0xb7, 0xa5, 0xe4, 0xbd, 0x9c, 0xe9, 0xa1, 0xb9, 0x27,
	0x2c, 0x20, 0x27, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x20, 0xe5, 0xae, 0xa3, 0xe6, 0x95,
	0x99, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0x27, 0x2c, 0x20, 0x27, 0x46, 0x55, 0x5f, 0x57, 0x43,
	0x20, 0xe5, 0xbe, 0xae, 0xe4, 0xbf, 0xa1, 0xe9, 0x9a, 0x8f, 0xe8, 0xae, 0xbf, 0x27, 0x2c, 0x20,
	0x27, 0x46, 0x55, 0x5f, 0x4d, 0x20, 0xe7, 0x94, 0xb5, 0xe8, 0xaf, 0x9d, 0xe9, 0x9a, 0x8f, 0xe8,
	0xae, 0xbf, 0x27, 0x2c, 0x20, 0x27, 0x52, 0x4d, 0x5f, 0x46, 0x5a, 0x20, 0xe5, 0xa4, 0x8d, 0xe8,
	0xaf, 0x8a, 0xe6, 0x8f, 0x90, 0xe9, 0x86, 0x92, 0x27, 0x2c, 0x20, 0x27, 0x52, 0x4d, 0x5f, 0x59,
	0x48, 0x20, 0xe7, 0x94, 0xa8, 0xe8, 0x8d, 0xaf, 0xe6, 0x8f, 0x90, 0xe9, 0x86, 0x92, 0x27, 0x2c,
	0x20, 0x27, 0x52, 0x4d, 0x5f, 0x48, 0x59, 0x20, 0xe6, 0x8d, 0xa2, 0xe8, 0x8d, 0xaf, 0xe6, 0x8f,
	0x90, 0xe9, 0x86, 0x92, 0x27, 0x2c, 0x20, 0x27, 0x52, 0x4d, 0x5f, 0x53, 0x53, 0x20, 0xe6, 0x89,
	0x8b, 0xe6, 0x9c, 0xaf, 0xe6, 0x8f, 0x90, 0xe9, 0x86, 0x92, 0x27, 0x2c, 0x20, 0x27, 0x4e, 0x4f,
	0x4e, 0x45, 0x27, 0x29, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xba, 0x47, 0x2d, 0x92, 0x02, 0x2a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x3b, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61,
	0x72, 0x28, 0x34, 0x35, 0x29, 0x3b, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xba, 0x47, 0x1f, 0x92, 0x02, 0x1c, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3b, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x28, 0x32,
	0x35, 0x35, 0x29, 0x3b, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x3a, 0x30, 0xba, 0x47, 0x2d, 0xba, 0x01,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0xba, 0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xba,
	0x01, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xba, 0x01,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x42, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92,
	0x02, 0x0c, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02,
	0x69, 0x64, 0x3a, 0x08, 0xba, 0x47, 0x05, 0xba, 0x01, 0x02, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x12,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xba, 0x47, 0x14, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0xb9, 0xe6, 0xa1,
	0x88, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x13, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xba, 0x47, 0x14, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0xb9, 0xe6, 0xa1,
	0x88, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x11,
	0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xba,
	0x47, 0x1e, 0x92, 0x02, 0x1b, 0x69, 0x64, 0x3b, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x28,
	0x34, 0x35, 0x29, 0x3b, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x0f, 0xba,
	0x47, 0x0c, 0xba, 0x01, 0x02, 0x69, 0x64, 0xba, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc5,
	0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x47, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b,
	0x49, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x2a, 0xba, 0x47, 0x27, 0xba,
	0x01, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0xba, 0x01, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a,
	0x17, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x70, 0x6c,
	0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x86, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x65, 0x61, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x17, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x44,
	0x79, 0x73, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x79,
	0x73, 0x46, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe9, 0x9a, 0x9c,
	0xe7, 0xa2, 0x8d, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x64, 0x79, 0x73, 0x46, 0x75,
	0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x64, 0x79, 0x73, 0x46, 0x75, 0x6e,
	0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0x92, 0x02,
	0x12, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe9, 0x9a, 0x9c, 0xe7, 0xa2, 0x8d, 0xe7, 0xbc, 0x96,
	0xe7, 0xa0, 0x81, 0x52, 0x09, 0x64, 0x79, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x64, 0x3a, 0x1d,
	0xba, 0x47, 0x1a, 0xba, 0x01, 0x0b, 0x64, 0x79, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0xba, 0x01, 0x09, 0x64, 0x79, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x64, 0x22, 0x80, 0x03,
	0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0xba, 0x47, 0x21, 0x92, 0x02, 0x1e, 0x6e, 0x61, 0x6d, 0x65, 0x3b, 0x76, 0x61, 0x72, 0x63,
	0x68, 0x61, 0x72, 0x28, 0x31, 0x32, 0x38, 0x29, 0x3b, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe7, 0xae, 0xa1, 0xe7, 0x90,
	0x86, 0xe7, 0x97, 0x85, 0xe7, 0xa7, 0x8d, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x0e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x4c, 0x0a,
	0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x79, 0x73, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x47, 0x1b, 0x92, 0x02, 0x18,
	0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe9, 0x9a, 0x9c, 0xe7,
	0xa2, 0x8d, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x44, 0x79, 0x73, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x41, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18,
	0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe9, 0x80, 0x82, 0xe7, 0x94, 0xa8, 0xe5, 0xb9, 0xb4, 0xe9,
	0xbe, 0x84, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41,
	0x67, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x31, 0xba, 0x47, 0x2e, 0x92, 0x02, 0x2b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x3b,
	0x74, 0x65, 0x78, 0x74, 0x3b, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x28, 0xe9, 0x9a, 0x8f, 0xe8,
	0xae, 0xbf, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe4, 0xba,
	0x8b, 0xe4, 0xbb, 0xb6, 0x29, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x22, 0xba, 0x47,
	0x1f, 0xba, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xba, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0xba,
	0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xba, 0x01, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0xfe, 0x0a, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0xba, 0x47, 0x1e, 0x92, 0x02, 0x1b, 0x69, 0x64, 0x3b, 0x76, 0x61,
	0x72, 0x63, 0x68, 0x61, 0x72, 0x28, 0x34, 0x35, 0x29, 0x3b, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88,
	0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0xba, 0x47, 0x1c, 0x92, 0x02, 0x19, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3b, 0x76, 0x61, 0x72, 0x63,
	0x68, 0x61, 0x72, 0x28, 0x32, 0x35, 0x35, 0x29, 0x3b, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x48,
	0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0xac, 0x01, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x97, 0x01, 0xba, 0x47, 0x93,
	0x01, 0x92, 0x02, 0x8f, 0x01, 0x74, 0x79, 0x70, 0x65, 0x3b, 0x65, 0x6e, 0x75, 0x6d, 0x28, 0x27,
	0x54, 0x41, 0x53, 0x4b, 0x27, 0x2c, 0x27, 0x53, 0x41, 0x27, 0x2c, 0x27, 0x54, 0x52, 0x45, 0x41,
	0x54, 0x27, 0x2c, 0x27, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x50, 0x27, 0x2c, 0x27,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x27, 0x29, 0x3b, 0xe5, 0xb7, 0xa5, 0xe4,
	0xbd, 0x9c, 0xe9, 0xa1, 0xb9, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x46, 0x4f, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x55, 0x50, 0x3a, 0xe9, 0x9a, 0x8f, 0xe8, 0xae, 0xbf, 0x2c, 0x53, 0x41, 0x3a,
	0xe7, 0x97, 0x87, 0xe7, 0x8a, 0xb6, 0xe8, 0xaf, 0x84, 0xe4, 0xbc, 0xb0, 0x2c, 0x54, 0x52, 0x45,
	0x41, 0x54, 0x3a, 0xe6, 0xb2, 0xbb, 0xe7, 0x96, 0x97, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x2c,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x3a, 0xe5, 0xb7, 0xa5, 0xe4, 0xbd, 0x9c,
	0xe6, 0xb5, 0x81, 0x29, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0xf5, 0x01, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0xdc, 0x01, 0xba, 0x47,
	0xd8, 0x01, 0x92, 0x02, 0xd4, 0x01, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3b, 0x65, 0x6e, 0x75,
	0x6d, 0x28, 0x27, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x27, 0x2c, 0x27, 0x44, 0x52, 0x41, 0x46, 0x54,
	0x27, 0x2c, 0x27, 0x4e, 0x45, 0x57, 0x27, 0x2c, 0x27, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x27,
	0x2c, 0x27, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x27, 0x2c, 0x27, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x44, 0x27, 0x2c, 0x27, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x27, 0x29, 0x3b,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0x27, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x20, 0xe6, 0xa8,
	0xa1, 0xe6, 0x9d, 0xbf, 0x27, 0x2c, 0x20, 0x27, 0x44, 0x52, 0x41, 0x46, 0x54, 0x20, 0xe8, 0x8d,
	0x89, 0xe7, 0xa8, 0xbf, 0x27, 0x2c, 0x20, 0x27, 0x4e, 0x45, 0x57, 0x20, 0xe6, 0x96, 0xb0, 0xe5,
	0xbb, 0xba, 0x2d, 0xe5, 0xbe, 0x85, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0x27, 0x2c, 0x20, 0x27,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x20, 0xe6, 0xad, 0xa3, 0xe5, 0x9c, 0xa8, 0xe8, 0xbf, 0x9b,
	0xe8, 0xa1, 0x8c, 0x27, 0x2c, 0x20, 0x27, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x27,
	0x2c, 0x20, 0x27, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x20, 0xe5, 0xb7, 0xb2, 0xe5, 0x85, 0xb3,
	0xe9, 0x97, 0xad, 0x27, 0x2c, 0x20, 0x27, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x20, 0xe5,
	0xb7, 0xb2, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0x27, 0x29, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x43, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2c, 0xba, 0x47, 0x29, 0x92, 0x02, 0x26, 0x74, 0x61, 0x67, 0x3b, 0x74, 0x65, 0x78, 0x74, 0x3b,
	0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x28, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe5, 0x80, 0xbc,
	0xe7, 0x94, 0xa8, 0x27, 0x2c, 0x27, 0xe5, 0x88, 0x86, 0xe9, 0x9a, 0x94, 0x29, 0x48, 0x02, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c, 0xba, 0x47, 0x29, 0x92, 0x02, 0x26,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x3b, 0x69, 0x6e, 0x74, 0x28, 0x31, 0x30, 0x29,
	0x20, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x3b, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f,
	0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x48, 0x03, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4e, 0x75,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0xaf, 0x01, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x98, 0x01, 0xba, 0x47, 0x94, 0x01, 0x92, 0x02, 0x90, 0x01, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x3b, 0x65, 0x6e, 0x75, 0x6d, 0x28, 0x27, 0x52, 0x59, 0x27, 0x2c, 0x27,
	0x53, 0x53, 0x27, 0x2c, 0x27, 0x43, 0x59, 0x27, 0x2c, 0x27, 0x4a, 0x5a, 0x27, 0x2c, 0x27, 0x43,
	0x53, 0x27, 0x2c, 0x27, 0x52, 0x43, 0x27, 0x2c, 0x27, 0x4e, 0x4f, 0x4e, 0x45, 0x27, 0x29, 0x3b,
	0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x28, 0x27, 0x52, 0x59,
	0x20, 0xe5, 0x85, 0xa5, 0xe9, 0x99, 0xa2, 0x27, 0x2c, 0x27, 0x53, 0x53, 0x20, 0xe6, 0x89, 0x8b,
	0xe6, 0x9c, 0xaf, 0x27, 0x2c, 0x20, 0x27, 0x43, 0x59, 0x20, 0xe5, 0x87, 0xba, 0xe9, 0x99, 0xa2,
	0x27, 0x2c, 0x20, 0x27, 0x4a, 0x5a, 0x20, 0xe5, 0xb0, 0xb1, 0xe8, 0xaf, 0x8a, 0x27, 0x2c, 0x20,
	0x27, 0x43, 0x53, 0x20, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0x9f, 0x27, 0x2c, 0x27, 0x52, 0x43, 0x20,
	0xe5, 0x85, 0xa5, 0xe7, 0xbb, 0x84, 0x27, 0x2c, 0x27, 0x4e, 0x4f, 0x4e, 0x45, 0x27, 0x29, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x2d, 0xba, 0x47, 0x2a, 0x92, 0x02, 0x27, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x3b, 0x69, 0x6e, 0x74, 0x28,
	0x31, 0x31, 0x29, 0x3b, 0xe9, 0xa2, 0x91, 0xe6, 0xac, 0xa1, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94,
	0x48, 0x04, 0x52, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x62, 0xba, 0x47, 0x5f, 0x92, 0x02, 0x5c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x3b, 0x65, 0x6e, 0x75, 0x6d, 0x28, 0x27, 0x44, 0x41, 0x59,
	0x27, 0x2c, 0x27, 0x57, 0x45, 0x45, 0x4b, 0x27, 0x2c, 0x27, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x27,
	0x2c, 0x27, 0x59, 0x45, 0x41, 0x52, 0x27, 0x2c, 0x27, 0x4e, 0x4f, 0x4e, 0x45, 0x27, 0x29, 0x3b,
	0xe9, 0xa2, 0x91, 0xe6, 0xac, 0xa1, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0x28, 0xe5, 0xb9, 0xb4,
	0x2c, 0xe6, 0x9c, 0x88, 0x2c, 0xe5, 0x91, 0xa8, 0x2c, 0xe6, 0x97, 0xa5, 0x2c, 0xe5, 0xb0, 0x8f,
	0xe6, 0x97, 0xb6, 0x29, 0x48, 0x05, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0xba,
	0x47, 0x42, 0x92, 0x02, 0x3f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x3b, 0x74, 0x65, 0x78, 0x74, 0x3b, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x28, 0xe5, 0x8f, 0xaf,
	0xe5, 0xad, 0x98, 0xe5, 0xaf, 0x8c, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xe5, 0x86, 0x85, 0xe5,
	0xae, 0xb9, 0xe6, 0x88, 0x96, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0xe5, 0x86, 0x85,
	0xe5, 0xae, 0xb9, 0x29, 0x48, 0x06, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x4c, 0xba, 0x47, 0x49, 0xba, 0x01, 0x02, 0x69, 0x64,
	0xba, 0x01, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0xba, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0xba,
	0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xba, 0x01, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0xba, 0x01, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0xba, 0x01, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x55, 0x6e, 0x69, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xe4, 0x06, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3f,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xba, 0x47, 0x27, 0x92,
	0x02, 0x24, 0x69, 0x64, 0x3b, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x28, 0x34, 0x35, 0x29,
	0x3b, 0xe5, 0xb7, 0xa5, 0xe4, 0xbd, 0x9c, 0xe9, 0xa1, 0xb9, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94,
	0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x55, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f,
	0xba, 0x47, 0x3c, 0x92, 0x02, 0x39, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3b, 0x76, 0x61, 0x72, 0x63,
	0x68, 0x61, 0x72, 0x28, 0x32, 0x35, 0x35, 0x29, 0x3b, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x28,
	0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x86, 0xb3, 0xe5, 0xae, 0x9a, 0x29, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x77, 0xba, 0x47, 0x74, 0x92, 0x02, 0x71, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x3b, 0x65, 0x6e, 0x75, 0x6d, 0x28, 0x27, 0x4e, 0x45, 0x57, 0x27,
	0x2c, 0x27, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x27, 0x2c, 0x27, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x27, 0x29, 0x3b, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0x27, 0x4e, 0x45, 0x57, 0x20, 0xe5, 0xbe, 0x85, 0xe5,
	0xa4, 0x84, 0xe7, 0x90, 0x86, 0x27, 0x2c, 0x20, 0x27, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x20,
	0xe6, 0xad, 0xa3, 0xe5, 0x9c, 0xa8, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0x20, 0x27, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x44, 0x20, 0xe5, 0xb7, 0xb2, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0x27, 0x29,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x92, 0x03, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xed, 0x02, 0xba, 0x47, 0xe9, 0x02, 0x92, 0x02, 0xe5, 0x02, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3b, 0x65, 0x6e, 0x75, 0x6d, 0x28, 0x27, 0x50, 0x4c,
	0x41, 0x4e, 0x27, 0x2c, 0x27, 0x46, 0x4f, 0x52, 0x4d, 0x27, 0x2c, 0x27, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x27, 0x2c, 0x27, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x27,
	0x2c, 0x27, 0x46, 0x55, 0x5f, 0x57, 0x43, 0x27, 0x2c, 0x27, 0x46, 0x55, 0x5f, 0x4d, 0x27, 0x2c,
	0x27, 0x52, 0x4d, 0x5f, 0x46, 0x5a, 0x27, 0x2c, 0x27, 0x52, 0x4d, 0x5f, 0x59, 0x48, 0x27, 0x2c,
	0x27, 0x52, 0x4d, 0x5f, 0x48, 0x59, 0x27, 0x2c, 0x27, 0x52, 0x4d, 0x5f, 0x53, 0x53, 0x27, 0x2c,
	0x27, 0x4e, 0x4f, 0x4e, 0x45, 0x27, 0x29, 0x3b, 0xe5, 0xb7, 0xa5, 0xe4, 0xbd, 0x9c, 0xe9, 0xa1,
	0xb9, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x45, 0x4e, 0x55, 0x4d, 0x28, 0x27, 0x50, 0x4c, 0x41, 0x4e, 0x20, 0xe6, 0x96,
	0xb9, 0xe6, 0xa1, 0x88, 0x27, 0x2c, 0x20, 0x27, 0x46, 0x4f, 0x52, 0x4d, 0x20, 0xe8, 0xa1, 0xa8,
	0xe5, 0x8d, 0x95, 0x27, 0x2c, 0x20, 0x27, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x20, 0xe5, 0xb7, 0xa5, 0xe4, 0xbd, 0x9c, 0xe9, 0xa1, 0xb9, 0x27, 0x2c, 0x20, 0x27, 0x41, 0x52,
	0x54, 0x49, 0x43, 0x4c, 0x45, 0x20, 0xe5, 0xae, 0xa3, 0xe6, 0x95, 0x99, 0xe6, 0x96, 0x87, 0xe7,
	0xab, 0xa0, 0x27, 0x2c, 0x20, 0x27, 0x46, 0x55, 0x5f, 0x57, 0x43, 0x20, 0xe5, 0xbe, 0xae, 0xe4,
	0xbf, 0xa1, 0xe9, 0x9a, 0x8f, 0xe8, 0xae, 0xbf, 0x27, 0x2c, 0x20, 0x27, 0x46, 0x55, 0x5f, 0x4d,
	0x20, 0xe7, 0x94, 0xb5, 0xe8, 0xaf, 0x9d, 0xe9, 0x9a, 0x8f, 0xe8, 0xae, 0xbf, 0x27, 0x2c, 0x20,
	0x27, 0x52, 0x4d, 0x5f, 0x46, 0x5a, 0x20, 0xe5, 0xa4, 0x8d, 0xe8, 0xaf, 0x8a, 0xe6, 0x8f, 0x90,
	0xe9, 0x86, 0x92, 0x27, 0x2c, 0x20, 0x27, 0x52, 0x4d, 0x5f, 0x59, 0x48, 0x20, 0xe7, 0x94, 0xa8,
	0xe8, 0x8d, 0xaf, 0xe6, 0x8f, 0x90, 0xe9, 0x86, 0x92, 0x27, 0x2c, 0x20, 0x27, 0x52, 0x4d, 0x5f,
	0x48, 0x59, 0x20, 0xe6, 0x8d, 0xa2, 0xe8, 0x8d, 0xaf, 0xe6, 0x8f, 0x90, 0xe9, 0x86, 0x92, 0x27,
	0x2c, 0x20, 0x27, 0x52, 0x4d, 0x5f, 0x53, 0x53, 0x20, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xaf, 0xe6,
	0x8f, 0x90, 0xe9, 0x86, 0x92, 0x27, 0x2c, 0x20, 0x27, 0x4e, 0x4f, 0x4e, 0x45, 0x27, 0x29, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x30, 0xba, 0x47, 0x2d, 0x92, 0x02, 0x2a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x3b, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x28, 0x34, 0x35, 0x29,
	0x3b, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xbc, 0x96,
	0xe7, 0xa0, 0x81, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x3a,
	0x30, 0xba, 0x47, 0x2d, 0xba, 0x01, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0xba, 0x01, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0xba, 0x01, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0xba, 0x01, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0xb3, 0x05, 0x0a, 0x12, 0x50, 0x6c, 0x61,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x78, 0x0a, 0x08, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x5c, 0xba, 0x47, 0x59, 0xba, 0x01, 0x08, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54,
	0x6f, 0x92, 0x02, 0x4b, 0x27, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0xe5, 0xa6, 0x82,
	0xe6, 0x9e, 0x9c, 0xe5, 0xbd, 0x92, 0xe5, 0xb1, 0x9e, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe6,
	0x97, 0xb6, 0xe6, 0x98, 0xaf, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x99, 0xe5, 0xa1,
	0xab, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x29, 0x27, 0x52,
	0x08, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x12, 0x64, 0x0a, 0x0a, 0x62, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0xba,
	0x47, 0x41, 0xba, 0x01, 0x0a, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x92,
	0x02, 0x31, 0x27, 0xe5, 0xbd, 0x92, 0xe5, 0xb1, 0x9e, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28,
	0xe7, 0xbb, 0x84, 0xe7, 0xbb, 0x87, 0xe3, 0x80, 0x81, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe3,
	0x80, 0x81, 0xe5, 0x9b, 0xa2, 0xe9, 0x98, 0x9f, 0xe3, 0x80, 0x81, 0xe7, 0xbb, 0x84, 0xe7, 0xad,
	0x89, 0x29, 0x27, 0x52, 0x0a, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0xba, 0x47, 0x14, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x0c, 0xe6,
	0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba,
	0x47, 0x16, 0xba, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0xb9, 0xe6,
	0xa1, 0x88, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x52,
	0xba, 0x47, 0x4f, 0xba, 0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x92, 0x02, 0x43, 0x27,
	0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0x27, 0x44, 0x52,
	0x41, 0x46, 0x54, 0x20, 0xe8, 0x8d, 0x89, 0xe7, 0xa8, 0xbf, 0x27, 0x2c, 0x20, 0x27, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x20, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x27, 0x2c, 0x20, 0x27,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x20, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x27,
	0x29, 0x27, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0xba, 0x47, 0x3a, 0xba, 0x01, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x92, 0x02, 0x30, 0x27, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x53, 0x41, 0x20, 0xe7, 0x97, 0x87, 0xe7, 0x8a, 0xb6, 0xe8, 0xaf,
	0x84, 0xe4, 0xbc, 0xb0, 0x2c, 0x20, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x55, 0x50, 0x20, 0xe9,
	0x9a, 0x8f, 0xe8, 0xae, 0xbf, 0x29, 0x27, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x50,
	0x0a, 0x11, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0xba, 0x47, 0x1e, 0x92, 0x02, 0x1b, 0x69, 0x64, 0x3b, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61,
	0x72, 0x28, 0x34, 0x35, 0x29, 0x3b, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbc, 0x96, 0xe7,
	0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x08, 0xba, 0x47, 0x05, 0xba, 0x01, 0x02, 0x69, 0x64,
	0x22, 0x89, 0x02, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x41, 0x0a,
	0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x4a, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x79, 0x73, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x79, 0x73,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x44, 0x79, 0x73, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xac, 0x01, 0x0a,
	0x12, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a,
	0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x11, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07,
	0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x22, 0x7e, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x79, 0x73, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x46,
	0x75, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x52, 0x07,
	0x64, 0x69, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x22, 0xf3, 0x03, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x1a, 0xee, 0x02, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0a, 0x62, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xba, 0x47, 0x33,
	0x92, 0x02, 0x30, 0x27, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x28, 0x53, 0x41, 0x20, 0xe7, 0x97, 0x87, 0xe7, 0x8a, 0xb6, 0xe8, 0xaf, 0x84, 0xe4, 0xbc, 0xb0,
	0x2c, 0x20, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x55, 0x50, 0x20, 0xe9, 0x9a, 0x8f, 0xe8, 0xae,
	0xbf, 0x29, 0x27, 0x52, 0x0a, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x78, 0x0a, 0x08, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x5c, 0xba, 0x47, 0x59, 0xba, 0x01, 0x08, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54,
	0x6f, 0x92, 0x02, 0x4b, 0x27, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0xe5, 0xa6, 0x82,
	0xe6, 0x9e, 0x9c, 0xe5, 0xbd, 0x92, 0xe5, 0xb1, 0x9e, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe6,
	0x97, 0xb6, 0xe6, 0x98, 0xaf, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x99, 0xe5, 0xa1,
	0xab, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x29, 0x27, 0x52,
	0x08, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x12, 0x42, 0x0a, 0x0d, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x55, 0x6e, 0x69, 0x74, 0x92, 0x02, 0x06, 0xe9, 0xa2, 0x91, 0xe7, 0x8e, 0x87, 0x52, 0x0d,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x89, 0x01,
	0x0a, 0x17, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xc0, 0x04, 0x0a, 0x04, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x69, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x22, 0x05, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x3a, 0x01, 0x2a, 0xba, 0x47, 0x17, 0x12, 0x15, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe8, 0xa1,
	0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0x12, 0x69, 0x0a,
	0x0b, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x12, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07, 0x2a, 0x05, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0xba, 0x47,
	0x17, 0x12, 0x15, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x12, 0x6c, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x1a,
	0x05, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x3a, 0x04, 0x64, 0x61, 0x74, 0x61, 0xba, 0x47, 0x17, 0x12,
	0x15, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x12, 0x6c, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07, 0x12, 0x05, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0xba, 0x47, 0x1d, 0x12, 0x1b, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe8,
	0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x12, 0x85, 0x01, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0xba, 0x47, 0x1d, 0x12,
	0x1b, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x42, 0x0e, 0x5a, 0x0c,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x75, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plan_proto_rawDescOnce sync.Once
	file_plan_proto_rawDescData = file_plan_proto_rawDesc
)

func file_plan_proto_rawDescGZIP() []byte {
	file_plan_proto_rawDescOnce.Do(func() {
		file_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_plan_proto_rawDescData)
	})
	return file_plan_proto_rawDescData
}

var file_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_plan_proto_goTypes = []interface{}{
	(*PlanUpdateReq)(nil),                 // 0: api.PlanUpdateReq
	(*SaPlanDetailPreload)(nil),           // 1: api.SaPlanDetailPreload
	(*SaPlanRelate)(nil),                  // 2: api.SaPlanRelate
	(*SaPlanWorkItemRelate)(nil),          // 3: api.SaPlanWorkItemRelate
	(*SaPlanCreateReq)(nil),               // 4: api.SaPlanCreateReq
	(*SaPlanCreateResp)(nil),              // 5: api.SaPlanCreateResp
	(*SaPlanUpdateReq)(nil),               // 6: api.SaPlanUpdateReq
	(*SaPlanUpdateResp)(nil),              // 7: api.SaPlanUpdateResp
	(*ToUpdatePlanResource)(nil),          // 8: api.ToUpdatePlanResource
	(*SapLanEventCreateReq)(nil),          // 9: api.SapLanEventCreateReq
	(*PlanCreateReqWorkItems)(nil),        // 10: api.PlanCreateReqWorkItems
	(*PlanCreateReqWorkItem)(nil),         // 11: api.PlanCreateReqWorkItem
	(*PlanCreateReqRelates)(nil),          // 12: api.PlanCreateReqRelates
	(*PlanDetailPreloadInfo)(nil),         // 13: api.PlanDetailPreloadInfo
	(*PlanCreateRequest)(nil),             // 14: api.PlanCreateRequest
	(*CreatePlanWorkItemBean)(nil),        // 15: api.CreatePlanWorkItemBean
	(*CreatePlanWorkItem)(nil),            // 16: api.CreatePlanWorkItem
	(*CreatePlanWorkItemRelate)(nil),      // 17: api.CreatePlanWorkItemRelate
	(*PlanCreateResponse)(nil),            // 18: api.PlanCreateResponse
	(*PlanDelByIdRequest)(nil),            // 19: api.PlanDelByIdRequest
	(*PlanDelByIdResponse)(nil),           // 20: api.PlanDelByIdResponse
	(*PlanUpdateRequest)(nil),             // 21: api.PlanUpdateRequest
	(*PlanUpdateBody)(nil),                // 22: api.PlanUpdateBody
	(*PlanWorkItemUpdate)(nil),            // 23: api.PlanWorkItemUpdate
	(*UpdatePlanWorkItemBean)(nil),        // 24: api.UpdatePlanWorkItemBean
	(*PlanDeletedWorkItemInfo)(nil),       // 25: api.PlanDeletedWorkItemInfo
	(*RelateDysfunction)(nil),             // 26: api.RelateDysfunction
	(*PlanBasisUpdate)(nil),               // 27: api.PlanBasisUpdate
	(*UpdatePlanWorkItem)(nil),            // 28: api.UpdatePlanWorkItem
	(*UpdatePlanWorkItemRelate)(nil),      // 29: api.UpdatePlanWorkItemRelate
	(*PlanUpdateResponse)(nil),            // 30: api.PlanUpdateResponse
	(*PlanDetailRequest)(nil),             // 31: api.PlanDetailRequest
	(*PlanDetailResponse)(nil),            // 32: api.PlanDetailResponse
	(*PlanRelateWorkItem)(nil),            // 33: api.PlanRelateWorkItem
	(*PlanRelateDisease)(nil),             // 34: api.PlanRelateDisease
	(*PlanRelateDysfunction)(nil),         // 35: api.PlanRelateDysfunction
	(*PlanFilterQueryRequest)(nil),        // 36: api.PlanFilterQueryRequest
	(*PlanFilterQueryResponse)(nil),       // 37: api.PlanFilterQueryResponse
	(*PlanFilterQueryRequest_Filter)(nil), // 38: api.PlanFilterQueryRequest.Filter
	(*models.Plan)(nil),                   // 39: api.models.Plan
	(*models.PlanRelate)(nil),             // 40: api.models.PlanRelate
	(*WorkItems)(nil),                     // 41: api.WorkItems
	(*Relates)(nil),                       // 42: api.Relates
	(*models.WorkItem)(nil),               // 43: api.models.WorkItem
	(*models.Relate)(nil),                 // 44: api.models.Relate
	(*models.Disease)(nil),                // 45: api.models.Disease
	(*models.DisFunc)(nil),                // 46: api.models.DisFunc
}
var file_plan_proto_depIdxs = []int32{
	39, // 0: api.SaPlanDetailPreload.Plan:type_name -> api.models.Plan
	2,  // 1: api.SaPlanDetailPreload.SaPlanRelates:type_name -> api.SaPlanRelate
	40, // 2: api.SaPlanRelate.PlanRelate:type_name -> api.models.PlanRelate
	3,  // 3: api.SaPlanRelate.SaPlanWorkItemRelate:type_name -> api.SaPlanWorkItemRelate
	41, // 4: api.SaPlanWorkItemRelate.WorkItem:type_name -> api.WorkItems
	42, // 5: api.SaPlanWorkItemRelate.Relates:type_name -> api.Relates
	40, // 6: api.SaPlanCreateReq.planRelates:type_name -> api.models.PlanRelate
	40, // 7: api.SaPlanUpdateReq.planRelates:type_name -> api.models.PlanRelate
	39, // 8: api.SaPlanUpdateResp.plans:type_name -> api.models.Plan
	39, // 9: api.ToUpdatePlanResource.plans:type_name -> api.models.Plan
	41, // 10: api.ToUpdatePlanResource.ToCreateWorkItem:type_name -> api.WorkItems
	41, // 11: api.ToUpdatePlanResource.ToUpdateWorkItem:type_name -> api.WorkItems
	42, // 12: api.ToUpdatePlanResource.ToCreateRelate:type_name -> api.Relates
	40, // 13: api.ToUpdatePlanResource.ToCreatePlanRelate:type_name -> api.models.PlanRelate
	40, // 14: api.ToUpdatePlanResource.ToUpdatePlanRelate:type_name -> api.models.PlanRelate
	42, // 15: api.ToUpdatePlanResource.ToUpdateRelate:type_name -> api.Relates
	11, // 16: api.PlanCreateReqWorkItems.workItem:type_name -> api.PlanCreateReqWorkItem
	12, // 17: api.PlanCreateReqWorkItems.relates:type_name -> api.PlanCreateReqRelates
	39, // 18: api.PlanDetailPreloadInfo.plan:type_name -> api.models.Plan
	40, // 19: api.PlanDetailPreloadInfo.planRelates:type_name -> api.models.PlanRelate
	15, // 20: api.PlanCreateRequest.workItems:type_name -> api.CreatePlanWorkItemBean
	16, // 21: api.CreatePlanWorkItemBean.workItem:type_name -> api.CreatePlanWorkItem
	17, // 22: api.CreatePlanWorkItemBean.relates:type_name -> api.CreatePlanWorkItemRelate
	22, // 23: api.PlanUpdateRequest.data:type_name -> api.PlanUpdateBody
	27, // 24: api.PlanUpdateBody.planBasisUpdate:type_name -> api.PlanBasisUpdate
	23, // 25: api.PlanUpdateBody.planWorkItemUpdate:type_name -> api.PlanWorkItemUpdate
	25, // 26: api.PlanWorkItemUpdate.planDeletedWorkItemInfo:type_name -> api.PlanDeletedWorkItemInfo
	24, // 27: api.PlanWorkItemUpdate.workItems:type_name -> api.UpdatePlanWorkItemBean
	28, // 28: api.UpdatePlanWorkItemBean.workItem:type_name -> api.UpdatePlanWorkItem
	29, // 29: api.UpdatePlanWorkItemBean.relates:type_name -> api.UpdatePlanWorkItemRelate
	39, // 30: api.PlanDetailResponse.plan:type_name -> api.models.Plan
	33, // 31: api.PlanDetailResponse.relateWorkItems:type_name -> api.PlanRelateWorkItem
	34, // 32: api.PlanDetailResponse.relateDiseases:type_name -> api.PlanRelateDisease
	35, // 33: api.PlanDetailResponse.relateDysfunctions:type_name -> api.PlanRelateDysfunction
	40, // 34: api.PlanRelateWorkItem.planRelate:type_name -> api.models.PlanRelate
	43, // 35: api.PlanRelateWorkItem.workItem:type_name -> api.models.WorkItem
	44, // 36: api.PlanRelateWorkItem.relates:type_name -> api.models.Relate
	40, // 37: api.PlanRelateDisease.planRelate:type_name -> api.models.PlanRelate
	45, // 38: api.PlanRelateDisease.disease:type_name -> api.models.Disease
	40, // 39: api.PlanRelateDysfunction.planRelate:type_name -> api.models.PlanRelate
	46, // 40: api.PlanRelateDysfunction.disFunc:type_name -> api.models.DisFunc
	38, // 41: api.PlanFilterQueryRequest.filter:type_name -> api.PlanFilterQueryRequest.Filter
	39, // 42: api.PlanFilterQueryResponse.results:type_name -> api.models.Plan
	14, // 43: api.Plan.PlanCreate:input_type -> api.PlanCreateRequest
	19, // 44: api.Plan.PlanDelById:input_type -> api.PlanDelByIdRequest
	21, // 45: api.Plan.PlanUpdate:input_type -> api.PlanUpdateRequest
	31, // 46: api.Plan.PlanDetail:input_type -> api.PlanDetailRequest
	36, // 47: api.Plan.PlanFilterQuery:input_type -> api.PlanFilterQueryRequest
	18, // 48: api.Plan.PlanCreate:output_type -> api.PlanCreateResponse
	20, // 49: api.Plan.PlanDelById:output_type -> api.PlanDelByIdResponse
	30, // 50: api.Plan.PlanUpdate:output_type -> api.PlanUpdateResponse
	32, // 51: api.Plan.PlanDetail:output_type -> api.PlanDetailResponse
	37, // 52: api.Plan.PlanFilterQuery:output_type -> api.PlanFilterQueryResponse
	48, // [48:53] is the sub-list for method output_type
	43, // [43:48] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_plan_proto_init() }
func file_plan_proto_init() {
	if File_plan_proto != nil {
		return
	}
	file_workitem_proto_init()
	file_relate_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_plan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaPlanDetailPreload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaPlanRelate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaPlanWorkItemRelate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaPlanCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaPlanCreateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaPlanUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaPlanUpdateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToUpdatePlanResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SapLanEventCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanCreateReqWorkItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanCreateReqWorkItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanCreateReqRelates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanDetailPreloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanWorkItemBean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanWorkItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanWorkItemRelate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanDelByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanDelByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanUpdateBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanWorkItemUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlanWorkItemBean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanDeletedWorkItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelateDysfunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanBasisUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlanWorkItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlanWorkItemRelate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanRelateWorkItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanRelateDisease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanRelateDysfunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanFilterQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanFilterQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanFilterQueryRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_plan_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_plan_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_plan_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_plan_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_plan_proto_msgTypes[29].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plan_proto_goTypes,
		DependencyIndexes: file_plan_proto_depIdxs,
		MessageInfos:      file_plan_proto_msgTypes,
	}.Build()
	File_plan_proto = out.File
	file_plan_proto_rawDesc = nil
	file_plan_proto_goTypes = nil
	file_plan_proto_depIdxs = nil
}
