// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: form.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFormFormCreate = "/api.Form/FormCreate"
const OperationFormFormDelete = "/api.Form/FormDelete"
const OperationFormFormDetail = "/api.Form/FormDetail"
const OperationFormFormExport = "/api.Form/FormExport"
const OperationFormFormFilter = "/api.Form/FormFilter"
const OperationFormFormImport = "/api.Form/FormImport"
const OperationFormFormModelUpload = "/api.Form/FormModelUpload"
const OperationFormFormUpdate = "/api.Form/FormUpdate"

type FormHTTPServer interface {
	FormCreate(context.Context, *FormCreateRequest) (*FormCreateResponse, error)
	FormDelete(context.Context, *FormDeleteRequest) (*FormDeleteResponse, error)
	FormDetail(context.Context, *FormDetailRequest) (*FormDetailResponse, error)
	FormExport(context.Context, *FormExportRequest) (*FormExportResponse, error)
	FormFilter(context.Context, *FormFilterRequest) (*FormFilterResponse, error)
	FormImport(context.Context, *FormImportRequest) (*FormImportResponse, error)
	FormModelUpload(context.Context, *FormModelUploadRequest) (*FormModelUploadResponse, error)
	FormUpdate(context.Context, *FormUpdateRequest) (*FormUpdateResponse, error)
}

func RegisterFormHTTPServer(s *http.Server, srv FormHTTPServer) {
	r := s.Route("/")
	r.POST("/form", _Form_FormCreate0_HTTP_Handler(srv))
	r.DELETE("/form", _Form_FormDelete0_HTTP_Handler(srv))
	r.PUT("/form", _Form_FormUpdate0_HTTP_Handler(srv))
	r.GET("/form", _Form_FormDetail0_HTTP_Handler(srv))
	r.POST("/form/filter", _Form_FormFilter0_HTTP_Handler(srv))
	r.POST("/form/import", _Form_FormImport0_HTTP_Handler(srv))
	r.POST("/form/export", _Form_FormExport0_HTTP_Handler(srv))
	r.POST("/form/model/upload", _Form_FormModelUpload0_HTTP_Handler(srv))
}

func _Form_FormCreate0_HTTP_Handler(srv FormHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormFormCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormCreate(ctx, req.(*FormCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _Form_FormDelete0_HTTP_Handler(srv FormHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormFormDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormDelete(ctx, req.(*FormDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _Form_FormUpdate0_HTTP_Handler(srv FormHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormUpdateRequest
		if err := ctx.Bind(&in.Body); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormFormUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormUpdate(ctx, req.(*FormUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _Form_FormDetail0_HTTP_Handler(srv FormHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormFormDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormDetail(ctx, req.(*FormDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Form_FormFilter0_HTTP_Handler(srv FormHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormFormFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormFilter(ctx, req.(*FormFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormFilterResponse)
		return ctx.Result(200, reply)
	}
}

func _Form_FormImport0_HTTP_Handler(srv FormHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormImportRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormFormImport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormImport(ctx, req.(*FormImportRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormImportResponse)
		return ctx.Result(200, reply)
	}
}

func _Form_FormExport0_HTTP_Handler(srv FormHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormExportRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormFormExport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormExport(ctx, req.(*FormExportRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormExportResponse)
		return ctx.Result(200, reply)
	}
}

func _Form_FormModelUpload0_HTTP_Handler(srv FormHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormModelUploadRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormFormModelUpload)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormModelUpload(ctx, req.(*FormModelUploadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormModelUploadResponse)
		return ctx.Result(200, reply)
	}
}

type FormHTTPClient interface {
	FormCreate(ctx context.Context, req *FormCreateRequest, opts ...http.CallOption) (rsp *FormCreateResponse, err error)
	FormDelete(ctx context.Context, req *FormDeleteRequest, opts ...http.CallOption) (rsp *FormDeleteResponse, err error)
	FormDetail(ctx context.Context, req *FormDetailRequest, opts ...http.CallOption) (rsp *FormDetailResponse, err error)
	FormExport(ctx context.Context, req *FormExportRequest, opts ...http.CallOption) (rsp *FormExportResponse, err error)
	FormFilter(ctx context.Context, req *FormFilterRequest, opts ...http.CallOption) (rsp *FormFilterResponse, err error)
	FormImport(ctx context.Context, req *FormImportRequest, opts ...http.CallOption) (rsp *FormImportResponse, err error)
	FormModelUpload(ctx context.Context, req *FormModelUploadRequest, opts ...http.CallOption) (rsp *FormModelUploadResponse, err error)
	FormUpdate(ctx context.Context, req *FormUpdateRequest, opts ...http.CallOption) (rsp *FormUpdateResponse, err error)
}

type FormHTTPClientImpl struct {
	cc *http.Client
}

func NewFormHTTPClient(client *http.Client) FormHTTPClient {
	return &FormHTTPClientImpl{client}
}

func (c *FormHTTPClientImpl) FormCreate(ctx context.Context, in *FormCreateRequest, opts ...http.CallOption) (*FormCreateResponse, error) {
	var out FormCreateResponse
	pattern := "/form"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormFormCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormHTTPClientImpl) FormDelete(ctx context.Context, in *FormDeleteRequest, opts ...http.CallOption) (*FormDeleteResponse, error) {
	var out FormDeleteResponse
	pattern := "/form"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFormFormDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormHTTPClientImpl) FormDetail(ctx context.Context, in *FormDetailRequest, opts ...http.CallOption) (*FormDetailResponse, error) {
	var out FormDetailResponse
	pattern := "/form"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFormFormDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormHTTPClientImpl) FormExport(ctx context.Context, in *FormExportRequest, opts ...http.CallOption) (*FormExportResponse, error) {
	var out FormExportResponse
	pattern := "/form/export"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormFormExport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormHTTPClientImpl) FormFilter(ctx context.Context, in *FormFilterRequest, opts ...http.CallOption) (*FormFilterResponse, error) {
	var out FormFilterResponse
	pattern := "/form/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormFormFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormHTTPClientImpl) FormImport(ctx context.Context, in *FormImportRequest, opts ...http.CallOption) (*FormImportResponse, error) {
	var out FormImportResponse
	pattern := "/form/import"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormFormImport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormHTTPClientImpl) FormModelUpload(ctx context.Context, in *FormModelUploadRequest, opts ...http.CallOption) (*FormModelUploadResponse, error) {
	var out FormModelUploadResponse
	pattern := "/form/model/upload"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormFormModelUpload))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormHTTPClientImpl) FormUpdate(ctx context.Context, in *FormUpdateRequest, opts ...http.CallOption) (*FormUpdateResponse, error) {
	var out FormUpdateResponse
	pattern := "/form"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormFormUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Body, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
