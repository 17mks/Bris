// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: disease.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiseaseClient is the client API for Disease service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiseaseClient interface {
	// 病种表数据添加
	DiseaseCreate(ctx context.Context, in *DiseaseCreateRequest, opts ...grpc.CallOption) (*DiseaseCreateResponse, error)
	// 病种表数据删除
	DiseaseDelete(ctx context.Context, in *DiseaseDeleteRequest, opts ...grpc.CallOption) (*DiseaseDeleteResponse, error)
	// 病种表数据更新
	DiseaseUpdate(ctx context.Context, in *DiseaseUpdateRequest, opts ...grpc.CallOption) (*DiseaseUpdateResponse, error)
	// 病种表数据详情查询
	DiseaseDetail(ctx context.Context, in *DiseaseDetailRequest, opts ...grpc.CallOption) (*DiseaseDetailResponse, error)
	// 病种表数据过滤查询
	DiseaseFilter(ctx context.Context, in *DiseaseFilterRequest, opts ...grpc.CallOption) (*DiseaseFilterResponse, error)
}

type diseaseClient struct {
	cc grpc.ClientConnInterface
}

func NewDiseaseClient(cc grpc.ClientConnInterface) DiseaseClient {
	return &diseaseClient{cc}
}

func (c *diseaseClient) DiseaseCreate(ctx context.Context, in *DiseaseCreateRequest, opts ...grpc.CallOption) (*DiseaseCreateResponse, error) {
	out := new(DiseaseCreateResponse)
	err := c.cc.Invoke(ctx, "/api.Disease/DiseaseCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diseaseClient) DiseaseDelete(ctx context.Context, in *DiseaseDeleteRequest, opts ...grpc.CallOption) (*DiseaseDeleteResponse, error) {
	out := new(DiseaseDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.Disease/DiseaseDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diseaseClient) DiseaseUpdate(ctx context.Context, in *DiseaseUpdateRequest, opts ...grpc.CallOption) (*DiseaseUpdateResponse, error) {
	out := new(DiseaseUpdateResponse)
	err := c.cc.Invoke(ctx, "/api.Disease/DiseaseUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diseaseClient) DiseaseDetail(ctx context.Context, in *DiseaseDetailRequest, opts ...grpc.CallOption) (*DiseaseDetailResponse, error) {
	out := new(DiseaseDetailResponse)
	err := c.cc.Invoke(ctx, "/api.Disease/DiseaseDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diseaseClient) DiseaseFilter(ctx context.Context, in *DiseaseFilterRequest, opts ...grpc.CallOption) (*DiseaseFilterResponse, error) {
	out := new(DiseaseFilterResponse)
	err := c.cc.Invoke(ctx, "/api.Disease/DiseaseFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiseaseServer is the server API for Disease service.
// All implementations must embed UnimplementedDiseaseServer
// for forward compatibility
type DiseaseServer interface {
	// 病种表数据添加
	DiseaseCreate(context.Context, *DiseaseCreateRequest) (*DiseaseCreateResponse, error)
	// 病种表数据删除
	DiseaseDelete(context.Context, *DiseaseDeleteRequest) (*DiseaseDeleteResponse, error)
	// 病种表数据更新
	DiseaseUpdate(context.Context, *DiseaseUpdateRequest) (*DiseaseUpdateResponse, error)
	// 病种表数据详情查询
	DiseaseDetail(context.Context, *DiseaseDetailRequest) (*DiseaseDetailResponse, error)
	// 病种表数据过滤查询
	DiseaseFilter(context.Context, *DiseaseFilterRequest) (*DiseaseFilterResponse, error)
	mustEmbedUnimplementedDiseaseServer()
}

// UnimplementedDiseaseServer must be embedded to have forward compatible implementations.
type UnimplementedDiseaseServer struct {
}

func (UnimplementedDiseaseServer) DiseaseCreate(context.Context, *DiseaseCreateRequest) (*DiseaseCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiseaseCreate not implemented")
}
func (UnimplementedDiseaseServer) DiseaseDelete(context.Context, *DiseaseDeleteRequest) (*DiseaseDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiseaseDelete not implemented")
}
func (UnimplementedDiseaseServer) DiseaseUpdate(context.Context, *DiseaseUpdateRequest) (*DiseaseUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiseaseUpdate not implemented")
}
func (UnimplementedDiseaseServer) DiseaseDetail(context.Context, *DiseaseDetailRequest) (*DiseaseDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiseaseDetail not implemented")
}
func (UnimplementedDiseaseServer) DiseaseFilter(context.Context, *DiseaseFilterRequest) (*DiseaseFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiseaseFilter not implemented")
}
func (UnimplementedDiseaseServer) mustEmbedUnimplementedDiseaseServer() {}

// UnsafeDiseaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiseaseServer will
// result in compilation errors.
type UnsafeDiseaseServer interface {
	mustEmbedUnimplementedDiseaseServer()
}

func RegisterDiseaseServer(s grpc.ServiceRegistrar, srv DiseaseServer) {
	s.RegisterService(&Disease_ServiceDesc, srv)
}

func _Disease_DiseaseCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiseaseCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiseaseServer).DiseaseCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Disease/DiseaseCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiseaseServer).DiseaseCreate(ctx, req.(*DiseaseCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disease_DiseaseDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiseaseDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiseaseServer).DiseaseDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Disease/DiseaseDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiseaseServer).DiseaseDelete(ctx, req.(*DiseaseDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disease_DiseaseUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiseaseUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiseaseServer).DiseaseUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Disease/DiseaseUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiseaseServer).DiseaseUpdate(ctx, req.(*DiseaseUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disease_DiseaseDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiseaseDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiseaseServer).DiseaseDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Disease/DiseaseDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiseaseServer).DiseaseDetail(ctx, req.(*DiseaseDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disease_DiseaseFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiseaseFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiseaseServer).DiseaseFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Disease/DiseaseFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiseaseServer).DiseaseFilter(ctx, req.(*DiseaseFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Disease_ServiceDesc is the grpc.ServiceDesc for Disease service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Disease_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Disease",
	HandlerType: (*DiseaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiseaseCreate",
			Handler:    _Disease_DiseaseCreate_Handler,
		},
		{
			MethodName: "DiseaseDelete",
			Handler:    _Disease_DiseaseDelete_Handler,
		},
		{
			MethodName: "DiseaseUpdate",
			Handler:    _Disease_DiseaseUpdate_Handler,
		},
		{
			MethodName: "DiseaseDetail",
			Handler:    _Disease_DiseaseDetail_Handler,
		},
		{
			MethodName: "DiseaseFilter",
			Handler:    _Disease_DiseaseFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "disease.proto",
}
