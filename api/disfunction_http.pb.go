// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: disfunction.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDisFunctionDisFunctionCreate = "/api.DisFunction/DisFunctionCreate"
const OperationDisFunctionDisFunctionDelete = "/api.DisFunction/DisFunctionDelete"
const OperationDisFunctionDisFunctionDetail = "/api.DisFunction/DisFunctionDetail"
const OperationDisFunctionDisFunctionFilter = "/api.DisFunction/DisFunctionFilter"
const OperationDisFunctionDisFunctionUpdate = "/api.DisFunction/DisFunctionUpdate"

type DisFunctionHTTPServer interface {
	DisFunctionCreate(context.Context, *DisFunctionCreateRequest) (*DisFunctionCreateResponse, error)
	DisFunctionDelete(context.Context, *DisFunctionDeleteRequest) (*DisFunctionDeleteResponse, error)
	DisFunctionDetail(context.Context, *DisFunctionDetailRequest) (*DisFunctionDetailResponse, error)
	DisFunctionFilter(context.Context, *DisFunctionFilterRequest) (*DisFunctionFilterResponse, error)
	DisFunctionUpdate(context.Context, *DisFunctionUpdateRequest) (*DisFunctionUpdateResponse, error)
}

func RegisterDisFunctionHTTPServer(s *http.Server, srv DisFunctionHTTPServer) {
	r := s.Route("/")
	r.POST("/disfunction", _DisFunction_DisFunctionCreate0_HTTP_Handler(srv))
	r.DELETE("/disfunction", _DisFunction_DisFunctionDelete0_HTTP_Handler(srv))
	r.PUT("/disfunction", _DisFunction_DisFunctionUpdate0_HTTP_Handler(srv))
	r.GET("/disfunction", _DisFunction_DisFunctionDetail0_HTTP_Handler(srv))
	r.POST("/disfunction/filter", _DisFunction_DisFunctionFilter0_HTTP_Handler(srv))
}

func _DisFunction_DisFunctionCreate0_HTTP_Handler(srv DisFunctionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisFunctionCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDisFunctionDisFunctionCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisFunctionCreate(ctx, req.(*DisFunctionCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DisFunctionCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _DisFunction_DisFunctionDelete0_HTTP_Handler(srv DisFunctionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisFunctionDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDisFunctionDisFunctionDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisFunctionDelete(ctx, req.(*DisFunctionDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DisFunctionDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _DisFunction_DisFunctionUpdate0_HTTP_Handler(srv DisFunctionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisFunctionUpdateRequest
		if err := ctx.Bind(&in.Body); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDisFunctionDisFunctionUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisFunctionUpdate(ctx, req.(*DisFunctionUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DisFunctionUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _DisFunction_DisFunctionDetail0_HTTP_Handler(srv DisFunctionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisFunctionDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDisFunctionDisFunctionDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisFunctionDetail(ctx, req.(*DisFunctionDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DisFunctionDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _DisFunction_DisFunctionFilter0_HTTP_Handler(srv DisFunctionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisFunctionFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDisFunctionDisFunctionFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisFunctionFilter(ctx, req.(*DisFunctionFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DisFunctionFilterResponse)
		return ctx.Result(200, reply)
	}
}

type DisFunctionHTTPClient interface {
	DisFunctionCreate(ctx context.Context, req *DisFunctionCreateRequest, opts ...http.CallOption) (rsp *DisFunctionCreateResponse, err error)
	DisFunctionDelete(ctx context.Context, req *DisFunctionDeleteRequest, opts ...http.CallOption) (rsp *DisFunctionDeleteResponse, err error)
	DisFunctionDetail(ctx context.Context, req *DisFunctionDetailRequest, opts ...http.CallOption) (rsp *DisFunctionDetailResponse, err error)
	DisFunctionFilter(ctx context.Context, req *DisFunctionFilterRequest, opts ...http.CallOption) (rsp *DisFunctionFilterResponse, err error)
	DisFunctionUpdate(ctx context.Context, req *DisFunctionUpdateRequest, opts ...http.CallOption) (rsp *DisFunctionUpdateResponse, err error)
}

type DisFunctionHTTPClientImpl struct {
	cc *http.Client
}

func NewDisFunctionHTTPClient(client *http.Client) DisFunctionHTTPClient {
	return &DisFunctionHTTPClientImpl{client}
}

func (c *DisFunctionHTTPClientImpl) DisFunctionCreate(ctx context.Context, in *DisFunctionCreateRequest, opts ...http.CallOption) (*DisFunctionCreateResponse, error) {
	var out DisFunctionCreateResponse
	pattern := "/disfunction"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDisFunctionDisFunctionCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DisFunctionHTTPClientImpl) DisFunctionDelete(ctx context.Context, in *DisFunctionDeleteRequest, opts ...http.CallOption) (*DisFunctionDeleteResponse, error) {
	var out DisFunctionDeleteResponse
	pattern := "/disfunction"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDisFunctionDisFunctionDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DisFunctionHTTPClientImpl) DisFunctionDetail(ctx context.Context, in *DisFunctionDetailRequest, opts ...http.CallOption) (*DisFunctionDetailResponse, error) {
	var out DisFunctionDetailResponse
	pattern := "/disfunction"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDisFunctionDisFunctionDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DisFunctionHTTPClientImpl) DisFunctionFilter(ctx context.Context, in *DisFunctionFilterRequest, opts ...http.CallOption) (*DisFunctionFilterResponse, error) {
	var out DisFunctionFilterResponse
	pattern := "/disfunction/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDisFunctionDisFunctionFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DisFunctionHTTPClientImpl) DisFunctionUpdate(ctx context.Context, in *DisFunctionUpdateRequest, opts ...http.CallOption) (*DisFunctionUpdateResponse, error) {
	var out DisFunctionUpdateResponse
	pattern := "/disfunction"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDisFunctionDisFunctionUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Body, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
