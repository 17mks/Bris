// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: userinfo.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserInfoUserInfoCreate = "/api.UserInfo/UserInfoCreate"
const OperationUserInfoUserInfoDelete = "/api.UserInfo/UserInfoDelete"
const OperationUserInfoUserInfoDetail = "/api.UserInfo/UserInfoDetail"
const OperationUserInfoUserInfoFilter = "/api.UserInfo/UserInfoFilter"
const OperationUserInfoUserInfoUpdate = "/api.UserInfo/UserInfoUpdate"

type UserInfoHTTPServer interface {
	UserInfoCreate(context.Context, *UserInfoCreateRequest) (*UserInfoCreateResponse, error)
	UserInfoDelete(context.Context, *UserInfoDeleteRequest) (*UserInfoDeleteResponse, error)
	UserInfoDetail(context.Context, *UserInfoDetailRequest) (*UserInfoDetailResponse, error)
	UserInfoFilter(context.Context, *UserInfoFilterRequest) (*UserInfoFilterResponse, error)
	UserInfoUpdate(context.Context, *UserInfoUpdateRequest) (*UserInfoUpdateResponse, error)
}

func RegisterUserInfoHTTPServer(s *http.Server, srv UserInfoHTTPServer) {
	r := s.Route("/")
	r.POST("/user_info", _UserInfo_UserInfoCreate0_HTTP_Handler(srv))
	r.DELETE("/user_info/{id}", _UserInfo_UserInfoDelete0_HTTP_Handler(srv))
	r.PUT("/user_info", _UserInfo_UserInfoUpdate0_HTTP_Handler(srv))
	r.GET("/user_info/{id}", _UserInfo_UserInfoDetail0_HTTP_Handler(srv))
	r.POST("/user_info/filter", _UserInfo_UserInfoFilter0_HTTP_Handler(srv))
}

func _UserInfo_UserInfoCreate0_HTTP_Handler(srv UserInfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfoCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserInfoUserInfoCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserInfoCreate(ctx, req.(*UserInfoCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfoCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _UserInfo_UserInfoDelete0_HTTP_Handler(srv UserInfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfoDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserInfoUserInfoDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserInfoDelete(ctx, req.(*UserInfoDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfoDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _UserInfo_UserInfoUpdate0_HTTP_Handler(srv UserInfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfoUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserInfoUserInfoUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserInfoUpdate(ctx, req.(*UserInfoUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfoUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _UserInfo_UserInfoDetail0_HTTP_Handler(srv UserInfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfoDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserInfoUserInfoDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserInfoDetail(ctx, req.(*UserInfoDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfoDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _UserInfo_UserInfoFilter0_HTTP_Handler(srv UserInfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfoFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserInfoUserInfoFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserInfoFilter(ctx, req.(*UserInfoFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfoFilterResponse)
		return ctx.Result(200, reply)
	}
}

type UserInfoHTTPClient interface {
	UserInfoCreate(ctx context.Context, req *UserInfoCreateRequest, opts ...http.CallOption) (rsp *UserInfoCreateResponse, err error)
	UserInfoDelete(ctx context.Context, req *UserInfoDeleteRequest, opts ...http.CallOption) (rsp *UserInfoDeleteResponse, err error)
	UserInfoDetail(ctx context.Context, req *UserInfoDetailRequest, opts ...http.CallOption) (rsp *UserInfoDetailResponse, err error)
	UserInfoFilter(ctx context.Context, req *UserInfoFilterRequest, opts ...http.CallOption) (rsp *UserInfoFilterResponse, err error)
	UserInfoUpdate(ctx context.Context, req *UserInfoUpdateRequest, opts ...http.CallOption) (rsp *UserInfoUpdateResponse, err error)
}

type UserInfoHTTPClientImpl struct {
	cc *http.Client
}

func NewUserInfoHTTPClient(client *http.Client) UserInfoHTTPClient {
	return &UserInfoHTTPClientImpl{client}
}

func (c *UserInfoHTTPClientImpl) UserInfoCreate(ctx context.Context, in *UserInfoCreateRequest, opts ...http.CallOption) (*UserInfoCreateResponse, error) {
	var out UserInfoCreateResponse
	pattern := "/user_info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserInfoUserInfoCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserInfoHTTPClientImpl) UserInfoDelete(ctx context.Context, in *UserInfoDeleteRequest, opts ...http.CallOption) (*UserInfoDeleteResponse, error) {
	var out UserInfoDeleteResponse
	pattern := "/user_info/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserInfoUserInfoDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserInfoHTTPClientImpl) UserInfoDetail(ctx context.Context, in *UserInfoDetailRequest, opts ...http.CallOption) (*UserInfoDetailResponse, error) {
	var out UserInfoDetailResponse
	pattern := "/user_info/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserInfoUserInfoDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserInfoHTTPClientImpl) UserInfoFilter(ctx context.Context, in *UserInfoFilterRequest, opts ...http.CallOption) (*UserInfoFilterResponse, error) {
	var out UserInfoFilterResponse
	pattern := "/user_info/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserInfoUserInfoFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserInfoHTTPClientImpl) UserInfoUpdate(ctx context.Context, in *UserInfoUpdateRequest, opts ...http.CallOption) (*UserInfoUpdateResponse, error) {
	var out UserInfoUpdateResponse
	pattern := "/user_info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserInfoUserInfoUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
