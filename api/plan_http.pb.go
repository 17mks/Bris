// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: plan.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPlanPlanCreate = "/api.Plan/PlanCreate"
const OperationPlanPlanDelById = "/api.Plan/PlanDelById"
const OperationPlanPlanDetail = "/api.Plan/PlanDetail"
const OperationPlanPlanFilterQuery = "/api.Plan/PlanFilterQuery"
const OperationPlanPlanUpdate = "/api.Plan/PlanUpdate"

type PlanHTTPServer interface {
	PlanCreate(context.Context, *PlanCreateRequest) (*PlanCreateResponse, error)
	PlanDelById(context.Context, *PlanDelByIdRequest) (*PlanDelByIdResponse, error)
	PlanDetail(context.Context, *PlanDetailRequest) (*PlanDetailResponse, error)
	PlanFilterQuery(context.Context, *PlanFilterQueryRequest) (*PlanFilterQueryResponse, error)
	PlanUpdate(context.Context, *PlanUpdateRequest) (*PlanUpdateResponse, error)
}

func RegisterPlanHTTPServer(s *http.Server, srv PlanHTTPServer) {
	r := s.Route("/")
	r.POST("/plan", _Plan_PlanCreate0_HTTP_Handler(srv))
	r.DELETE("/plan", _Plan_PlanDelById0_HTTP_Handler(srv))
	r.PUT("/plan", _Plan_PlanUpdate0_HTTP_Handler(srv))
	r.GET("/plan", _Plan_PlanDetail0_HTTP_Handler(srv))
	r.POST("/plan/filter", _Plan_PlanFilterQuery0_HTTP_Handler(srv))
}

func _Plan_PlanCreate0_HTTP_Handler(srv PlanHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlanCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanPlanCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlanCreate(ctx, req.(*PlanCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlanCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _Plan_PlanDelById0_HTTP_Handler(srv PlanHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlanDelByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanPlanDelById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlanDelById(ctx, req.(*PlanDelByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlanDelByIdResponse)
		return ctx.Result(200, reply)
	}
}

func _Plan_PlanUpdate0_HTTP_Handler(srv PlanHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlanUpdateRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanPlanUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlanUpdate(ctx, req.(*PlanUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlanUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _Plan_PlanDetail0_HTTP_Handler(srv PlanHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlanDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanPlanDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlanDetail(ctx, req.(*PlanDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlanDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Plan_PlanFilterQuery0_HTTP_Handler(srv PlanHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlanFilterQueryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanPlanFilterQuery)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlanFilterQuery(ctx, req.(*PlanFilterQueryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlanFilterQueryResponse)
		return ctx.Result(200, reply)
	}
}

type PlanHTTPClient interface {
	PlanCreate(ctx context.Context, req *PlanCreateRequest, opts ...http.CallOption) (rsp *PlanCreateResponse, err error)
	PlanDelById(ctx context.Context, req *PlanDelByIdRequest, opts ...http.CallOption) (rsp *PlanDelByIdResponse, err error)
	PlanDetail(ctx context.Context, req *PlanDetailRequest, opts ...http.CallOption) (rsp *PlanDetailResponse, err error)
	PlanFilterQuery(ctx context.Context, req *PlanFilterQueryRequest, opts ...http.CallOption) (rsp *PlanFilterQueryResponse, err error)
	PlanUpdate(ctx context.Context, req *PlanUpdateRequest, opts ...http.CallOption) (rsp *PlanUpdateResponse, err error)
}

type PlanHTTPClientImpl struct {
	cc *http.Client
}

func NewPlanHTTPClient(client *http.Client) PlanHTTPClient {
	return &PlanHTTPClientImpl{client}
}

func (c *PlanHTTPClientImpl) PlanCreate(ctx context.Context, in *PlanCreateRequest, opts ...http.CallOption) (*PlanCreateResponse, error) {
	var out PlanCreateResponse
	pattern := "/plan"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlanPlanCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanHTTPClientImpl) PlanDelById(ctx context.Context, in *PlanDelByIdRequest, opts ...http.CallOption) (*PlanDelByIdResponse, error) {
	var out PlanDelByIdResponse
	pattern := "/plan"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlanPlanDelById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanHTTPClientImpl) PlanDetail(ctx context.Context, in *PlanDetailRequest, opts ...http.CallOption) (*PlanDetailResponse, error) {
	var out PlanDetailResponse
	pattern := "/plan"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlanPlanDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanHTTPClientImpl) PlanFilterQuery(ctx context.Context, in *PlanFilterQueryRequest, opts ...http.CallOption) (*PlanFilterQueryResponse, error) {
	var out PlanFilterQueryResponse
	pattern := "/plan/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlanPlanFilterQuery))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanHTTPClientImpl) PlanUpdate(ctx context.Context, in *PlanUpdateRequest, opts ...http.CallOption) (*PlanUpdateResponse, error) {
	var out PlanUpdateResponse
	pattern := "/plan"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlanPlanUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
