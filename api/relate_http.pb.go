// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: relate.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRelateRelateCreate = "/api.Relate/RelateCreate"
const OperationRelateRelateDelete = "/api.Relate/RelateDelete"
const OperationRelateRelateDetail = "/api.Relate/RelateDetail"
const OperationRelateRelateFilter = "/api.Relate/RelateFilter"
const OperationRelateRelateUpdate = "/api.Relate/RelateUpdate"

type RelateHTTPServer interface {
	RelateCreate(context.Context, *RelateCreateRequest) (*RelateCreateResponse, error)
	RelateDelete(context.Context, *RelateDeleteRequest) (*RelateDeleteResponse, error)
	RelateDetail(context.Context, *RelateDetailRequest) (*RelateDetailResponse, error)
	RelateFilter(context.Context, *RelateFilterRequest) (*RelateFilterResponse, error)
	RelateUpdate(context.Context, *RelateUpdateRequest) (*RelateUpdateResponse, error)
}

func RegisterRelateHTTPServer(s *http.Server, srv RelateHTTPServer) {
	r := s.Route("/")
	r.POST("relate", _Relate_RelateCreate0_HTTP_Handler(srv))
	r.DELETE("/relate/{id}", _Relate_RelateDelete0_HTTP_Handler(srv))
	r.PUT("relate", _Relate_RelateUpdate0_HTTP_Handler(srv))
	r.GET("/relate/{id}", _Relate_RelateDetail0_HTTP_Handler(srv))
	r.POST("/relate/filter", _Relate_RelateFilter0_HTTP_Handler(srv))
}

func _Relate_RelateCreate0_HTTP_Handler(srv RelateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RelateCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelateRelateCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RelateCreate(ctx, req.(*RelateCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RelateCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _Relate_RelateDelete0_HTTP_Handler(srv RelateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RelateDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelateRelateDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RelateDelete(ctx, req.(*RelateDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RelateDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _Relate_RelateUpdate0_HTTP_Handler(srv RelateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RelateUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelateRelateUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RelateUpdate(ctx, req.(*RelateUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RelateUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _Relate_RelateDetail0_HTTP_Handler(srv RelateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RelateDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelateRelateDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RelateDetail(ctx, req.(*RelateDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RelateDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Relate_RelateFilter0_HTTP_Handler(srv RelateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RelateFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelateRelateFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RelateFilter(ctx, req.(*RelateFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RelateFilterResponse)
		return ctx.Result(200, reply)
	}
}

type RelateHTTPClient interface {
	RelateCreate(ctx context.Context, req *RelateCreateRequest, opts ...http.CallOption) (rsp *RelateCreateResponse, err error)
	RelateDelete(ctx context.Context, req *RelateDeleteRequest, opts ...http.CallOption) (rsp *RelateDeleteResponse, err error)
	RelateDetail(ctx context.Context, req *RelateDetailRequest, opts ...http.CallOption) (rsp *RelateDetailResponse, err error)
	RelateFilter(ctx context.Context, req *RelateFilterRequest, opts ...http.CallOption) (rsp *RelateFilterResponse, err error)
	RelateUpdate(ctx context.Context, req *RelateUpdateRequest, opts ...http.CallOption) (rsp *RelateUpdateResponse, err error)
}

type RelateHTTPClientImpl struct {
	cc *http.Client
}

func NewRelateHTTPClient(client *http.Client) RelateHTTPClient {
	return &RelateHTTPClientImpl{client}
}

func (c *RelateHTTPClientImpl) RelateCreate(ctx context.Context, in *RelateCreateRequest, opts ...http.CallOption) (*RelateCreateResponse, error) {
	var out RelateCreateResponse
	pattern := "relate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRelateRelateCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RelateHTTPClientImpl) RelateDelete(ctx context.Context, in *RelateDeleteRequest, opts ...http.CallOption) (*RelateDeleteResponse, error) {
	var out RelateDeleteResponse
	pattern := "/relate/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelateRelateDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RelateHTTPClientImpl) RelateDetail(ctx context.Context, in *RelateDetailRequest, opts ...http.CallOption) (*RelateDetailResponse, error) {
	var out RelateDetailResponse
	pattern := "/relate/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelateRelateDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RelateHTTPClientImpl) RelateFilter(ctx context.Context, in *RelateFilterRequest, opts ...http.CallOption) (*RelateFilterResponse, error) {
	var out RelateFilterResponse
	pattern := "/relate/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRelateRelateFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RelateHTTPClientImpl) RelateUpdate(ctx context.Context, in *RelateUpdateRequest, opts ...http.CallOption) (*RelateUpdateResponse, error) {
	var out RelateUpdateResponse
	pattern := "relate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRelateRelateUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
