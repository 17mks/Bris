// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: formrow.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFormRowServiceFormRowCreate = "/api.FormRowService/FormRowCreate"
const OperationFormRowServiceFormRowDelete = "/api.FormRowService/FormRowDelete"
const OperationFormRowServiceFormRowDetail = "/api.FormRowService/FormRowDetail"
const OperationFormRowServiceFormRowFilter = "/api.FormRowService/FormRowFilter"
const OperationFormRowServiceFormRowUpdate = "/api.FormRowService/FormRowUpdate"

type FormRowServiceHTTPServer interface {
	FormRowCreate(context.Context, *FormRowCreateRequest) (*FormRowCreateResponse, error)
	FormRowDelete(context.Context, *FormRowDeleteRequest) (*FormRowDeleteResponse, error)
	FormRowDetail(context.Context, *FormRowDetailRequest) (*FormRowDetailResponse, error)
	FormRowFilter(context.Context, *FormRowFilterRequest) (*FormRowFilterResponse, error)
	FormRowUpdate(context.Context, *FormRowUpdateRequest) (*FormRowUpdateResponse, error)
}

func RegisterFormRowServiceHTTPServer(s *http.Server, srv FormRowServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/form_row", _FormRowService_FormRowCreate0_HTTP_Handler(srv))
	r.DELETE("/form_row", _FormRowService_FormRowDelete0_HTTP_Handler(srv))
	r.PUT("/form_row", _FormRowService_FormRowUpdate0_HTTP_Handler(srv))
	r.GET("/form_row", _FormRowService_FormRowDetail0_HTTP_Handler(srv))
	r.POST("/form_row/filter", _FormRowService_FormRowFilter0_HTTP_Handler(srv))
}

func _FormRowService_FormRowCreate0_HTTP_Handler(srv FormRowServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormRowCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormRowServiceFormRowCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormRowCreate(ctx, req.(*FormRowCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormRowCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _FormRowService_FormRowDelete0_HTTP_Handler(srv FormRowServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormRowDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormRowServiceFormRowDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormRowDelete(ctx, req.(*FormRowDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormRowDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _FormRowService_FormRowUpdate0_HTTP_Handler(srv FormRowServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormRowUpdateRequest
		if err := ctx.Bind(&in.Body); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormRowServiceFormRowUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormRowUpdate(ctx, req.(*FormRowUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormRowUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _FormRowService_FormRowDetail0_HTTP_Handler(srv FormRowServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormRowDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormRowServiceFormRowDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormRowDetail(ctx, req.(*FormRowDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormRowDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _FormRowService_FormRowFilter0_HTTP_Handler(srv FormRowServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormRowFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormRowServiceFormRowFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormRowFilter(ctx, req.(*FormRowFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormRowFilterResponse)
		return ctx.Result(200, reply)
	}
}

type FormRowServiceHTTPClient interface {
	FormRowCreate(ctx context.Context, req *FormRowCreateRequest, opts ...http.CallOption) (rsp *FormRowCreateResponse, err error)
	FormRowDelete(ctx context.Context, req *FormRowDeleteRequest, opts ...http.CallOption) (rsp *FormRowDeleteResponse, err error)
	FormRowDetail(ctx context.Context, req *FormRowDetailRequest, opts ...http.CallOption) (rsp *FormRowDetailResponse, err error)
	FormRowFilter(ctx context.Context, req *FormRowFilterRequest, opts ...http.CallOption) (rsp *FormRowFilterResponse, err error)
	FormRowUpdate(ctx context.Context, req *FormRowUpdateRequest, opts ...http.CallOption) (rsp *FormRowUpdateResponse, err error)
}

type FormRowServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewFormRowServiceHTTPClient(client *http.Client) FormRowServiceHTTPClient {
	return &FormRowServiceHTTPClientImpl{client}
}

func (c *FormRowServiceHTTPClientImpl) FormRowCreate(ctx context.Context, in *FormRowCreateRequest, opts ...http.CallOption) (*FormRowCreateResponse, error) {
	var out FormRowCreateResponse
	pattern := "/form_row"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormRowServiceFormRowCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormRowServiceHTTPClientImpl) FormRowDelete(ctx context.Context, in *FormRowDeleteRequest, opts ...http.CallOption) (*FormRowDeleteResponse, error) {
	var out FormRowDeleteResponse
	pattern := "/form_row"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFormRowServiceFormRowDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormRowServiceHTTPClientImpl) FormRowDetail(ctx context.Context, in *FormRowDetailRequest, opts ...http.CallOption) (*FormRowDetailResponse, error) {
	var out FormRowDetailResponse
	pattern := "/form_row"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFormRowServiceFormRowDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormRowServiceHTTPClientImpl) FormRowFilter(ctx context.Context, in *FormRowFilterRequest, opts ...http.CallOption) (*FormRowFilterResponse, error) {
	var out FormRowFilterResponse
	pattern := "/form_row/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormRowServiceFormRowFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormRowServiceHTTPClientImpl) FormRowUpdate(ctx context.Context, in *FormRowUpdateRequest, opts ...http.CallOption) (*FormRowUpdateResponse, error) {
	var out FormRowUpdateResponse
	pattern := "/form_row"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormRowServiceFormRowUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Body, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
