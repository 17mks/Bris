// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: planrelate.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPlanRelatePlanRelateCreate = "/api.PlanRelate/PlanRelateCreate"
const OperationPlanRelatePlanRelateDelete = "/api.PlanRelate/PlanRelateDelete"
const OperationPlanRelatePlanRelateDetail = "/api.PlanRelate/PlanRelateDetail"
const OperationPlanRelatePlanRelateFilter = "/api.PlanRelate/PlanRelateFilter"
const OperationPlanRelatePlanRelateUpdate = "/api.PlanRelate/PlanRelateUpdate"

type PlanRelateHTTPServer interface {
	PlanRelateCreate(context.Context, *PlanRelateCreateRequest) (*PlanRelateCreateResponse, error)
	PlanRelateDelete(context.Context, *PlanRelateDeleteRequest) (*PlanRelateDeleteResponse, error)
	PlanRelateDetail(context.Context, *PlanRelateDetailRequest) (*PlanRelateDetailResponse, error)
	PlanRelateFilter(context.Context, *PlanRelateFilterRequest) (*PlanRelateFilterResponse, error)
	PlanRelateUpdate(context.Context, *PlanRelateUpdateRequest) (*PlanRelateUpdateResponse, error)
}

func RegisterPlanRelateHTTPServer(s *http.Server, srv PlanRelateHTTPServer) {
	r := s.Route("/")
	r.POST("/plan_relate", _PlanRelate_PlanRelateCreate0_HTTP_Handler(srv))
	r.DELETE("/paln_relate/{id}", _PlanRelate_PlanRelateDelete0_HTTP_Handler(srv))
	r.PUT("/plan_relate", _PlanRelate_PlanRelateUpdate0_HTTP_Handler(srv))
	r.GET("/plan_relate/{id}", _PlanRelate_PlanRelateDetail0_HTTP_Handler(srv))
	r.POST("/plan_relate/filter", _PlanRelate_PlanRelateFilter0_HTTP_Handler(srv))
}

func _PlanRelate_PlanRelateCreate0_HTTP_Handler(srv PlanRelateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlanRelateCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanRelatePlanRelateCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlanRelateCreate(ctx, req.(*PlanRelateCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlanRelateCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _PlanRelate_PlanRelateDelete0_HTTP_Handler(srv PlanRelateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlanRelateDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanRelatePlanRelateDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlanRelateDelete(ctx, req.(*PlanRelateDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlanRelateDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _PlanRelate_PlanRelateUpdate0_HTTP_Handler(srv PlanRelateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlanRelateUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanRelatePlanRelateUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlanRelateUpdate(ctx, req.(*PlanRelateUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlanRelateUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _PlanRelate_PlanRelateDetail0_HTTP_Handler(srv PlanRelateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlanRelateDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanRelatePlanRelateDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlanRelateDetail(ctx, req.(*PlanRelateDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlanRelateDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _PlanRelate_PlanRelateFilter0_HTTP_Handler(srv PlanRelateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlanRelateFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanRelatePlanRelateFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlanRelateFilter(ctx, req.(*PlanRelateFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlanRelateFilterResponse)
		return ctx.Result(200, reply)
	}
}

type PlanRelateHTTPClient interface {
	PlanRelateCreate(ctx context.Context, req *PlanRelateCreateRequest, opts ...http.CallOption) (rsp *PlanRelateCreateResponse, err error)
	PlanRelateDelete(ctx context.Context, req *PlanRelateDeleteRequest, opts ...http.CallOption) (rsp *PlanRelateDeleteResponse, err error)
	PlanRelateDetail(ctx context.Context, req *PlanRelateDetailRequest, opts ...http.CallOption) (rsp *PlanRelateDetailResponse, err error)
	PlanRelateFilter(ctx context.Context, req *PlanRelateFilterRequest, opts ...http.CallOption) (rsp *PlanRelateFilterResponse, err error)
	PlanRelateUpdate(ctx context.Context, req *PlanRelateUpdateRequest, opts ...http.CallOption) (rsp *PlanRelateUpdateResponse, err error)
}

type PlanRelateHTTPClientImpl struct {
	cc *http.Client
}

func NewPlanRelateHTTPClient(client *http.Client) PlanRelateHTTPClient {
	return &PlanRelateHTTPClientImpl{client}
}

func (c *PlanRelateHTTPClientImpl) PlanRelateCreate(ctx context.Context, in *PlanRelateCreateRequest, opts ...http.CallOption) (*PlanRelateCreateResponse, error) {
	var out PlanRelateCreateResponse
	pattern := "/plan_relate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlanRelatePlanRelateCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanRelateHTTPClientImpl) PlanRelateDelete(ctx context.Context, in *PlanRelateDeleteRequest, opts ...http.CallOption) (*PlanRelateDeleteResponse, error) {
	var out PlanRelateDeleteResponse
	pattern := "/paln_relate/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlanRelatePlanRelateDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanRelateHTTPClientImpl) PlanRelateDetail(ctx context.Context, in *PlanRelateDetailRequest, opts ...http.CallOption) (*PlanRelateDetailResponse, error) {
	var out PlanRelateDetailResponse
	pattern := "/plan_relate/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlanRelatePlanRelateDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanRelateHTTPClientImpl) PlanRelateFilter(ctx context.Context, in *PlanRelateFilterRequest, opts ...http.CallOption) (*PlanRelateFilterResponse, error) {
	var out PlanRelateFilterResponse
	pattern := "/plan_relate/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlanRelatePlanRelateFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanRelateHTTPClientImpl) PlanRelateUpdate(ctx context.Context, in *PlanRelateUpdateRequest, opts ...http.CallOption) (*PlanRelateUpdateResponse, error) {
	var out PlanRelateUpdateResponse
	pattern := "/plan_relate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlanRelatePlanRelateUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
