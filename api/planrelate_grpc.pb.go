// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: planrelate.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlanRelateClient is the client API for PlanRelate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanRelateClient interface {
	// 方案关联表数据添加
	PlanRelateCreate(ctx context.Context, in *PlanRelateCreateRequest, opts ...grpc.CallOption) (*PlanRelateCreateResponse, error)
	// 方案关联表数据删除
	PlanRelateDelete(ctx context.Context, in *PlanRelateDeleteRequest, opts ...grpc.CallOption) (*PlanRelateDeleteResponse, error)
	// 方案关联表数据更新
	PlanRelateUpdate(ctx context.Context, in *PlanRelateUpdateRequest, opts ...grpc.CallOption) (*PlanRelateUpdateResponse, error)
	// 方案关联表数据详情查询
	PlanRelateDetail(ctx context.Context, in *PlanRelateDetailRequest, opts ...grpc.CallOption) (*PlanRelateDetailResponse, error)
	// 方案关联表数据过滤查询
	PlanRelateFilter(ctx context.Context, in *PlanRelateFilterRequest, opts ...grpc.CallOption) (*PlanRelateFilterResponse, error)
}

type planRelateClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanRelateClient(cc grpc.ClientConnInterface) PlanRelateClient {
	return &planRelateClient{cc}
}

func (c *planRelateClient) PlanRelateCreate(ctx context.Context, in *PlanRelateCreateRequest, opts ...grpc.CallOption) (*PlanRelateCreateResponse, error) {
	out := new(PlanRelateCreateResponse)
	err := c.cc.Invoke(ctx, "/api.PlanRelate/PlanRelateCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planRelateClient) PlanRelateDelete(ctx context.Context, in *PlanRelateDeleteRequest, opts ...grpc.CallOption) (*PlanRelateDeleteResponse, error) {
	out := new(PlanRelateDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.PlanRelate/PlanRelateDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planRelateClient) PlanRelateUpdate(ctx context.Context, in *PlanRelateUpdateRequest, opts ...grpc.CallOption) (*PlanRelateUpdateResponse, error) {
	out := new(PlanRelateUpdateResponse)
	err := c.cc.Invoke(ctx, "/api.PlanRelate/PlanRelateUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planRelateClient) PlanRelateDetail(ctx context.Context, in *PlanRelateDetailRequest, opts ...grpc.CallOption) (*PlanRelateDetailResponse, error) {
	out := new(PlanRelateDetailResponse)
	err := c.cc.Invoke(ctx, "/api.PlanRelate/PlanRelateDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planRelateClient) PlanRelateFilter(ctx context.Context, in *PlanRelateFilterRequest, opts ...grpc.CallOption) (*PlanRelateFilterResponse, error) {
	out := new(PlanRelateFilterResponse)
	err := c.cc.Invoke(ctx, "/api.PlanRelate/PlanRelateFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanRelateServer is the server API for PlanRelate service.
// All implementations must embed UnimplementedPlanRelateServer
// for forward compatibility
type PlanRelateServer interface {
	// 方案关联表数据添加
	PlanRelateCreate(context.Context, *PlanRelateCreateRequest) (*PlanRelateCreateResponse, error)
	// 方案关联表数据删除
	PlanRelateDelete(context.Context, *PlanRelateDeleteRequest) (*PlanRelateDeleteResponse, error)
	// 方案关联表数据更新
	PlanRelateUpdate(context.Context, *PlanRelateUpdateRequest) (*PlanRelateUpdateResponse, error)
	// 方案关联表数据详情查询
	PlanRelateDetail(context.Context, *PlanRelateDetailRequest) (*PlanRelateDetailResponse, error)
	// 方案关联表数据过滤查询
	PlanRelateFilter(context.Context, *PlanRelateFilterRequest) (*PlanRelateFilterResponse, error)
	mustEmbedUnimplementedPlanRelateServer()
}

// UnimplementedPlanRelateServer must be embedded to have forward compatible implementations.
type UnimplementedPlanRelateServer struct {
}

func (UnimplementedPlanRelateServer) PlanRelateCreate(context.Context, *PlanRelateCreateRequest) (*PlanRelateCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanRelateCreate not implemented")
}
func (UnimplementedPlanRelateServer) PlanRelateDelete(context.Context, *PlanRelateDeleteRequest) (*PlanRelateDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanRelateDelete not implemented")
}
func (UnimplementedPlanRelateServer) PlanRelateUpdate(context.Context, *PlanRelateUpdateRequest) (*PlanRelateUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanRelateUpdate not implemented")
}
func (UnimplementedPlanRelateServer) PlanRelateDetail(context.Context, *PlanRelateDetailRequest) (*PlanRelateDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanRelateDetail not implemented")
}
func (UnimplementedPlanRelateServer) PlanRelateFilter(context.Context, *PlanRelateFilterRequest) (*PlanRelateFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanRelateFilter not implemented")
}
func (UnimplementedPlanRelateServer) mustEmbedUnimplementedPlanRelateServer() {}

// UnsafePlanRelateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanRelateServer will
// result in compilation errors.
type UnsafePlanRelateServer interface {
	mustEmbedUnimplementedPlanRelateServer()
}

func RegisterPlanRelateServer(s grpc.ServiceRegistrar, srv PlanRelateServer) {
	s.RegisterService(&PlanRelate_ServiceDesc, srv)
}

func _PlanRelate_PlanRelateCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanRelateCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanRelateServer).PlanRelateCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PlanRelate/PlanRelateCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanRelateServer).PlanRelateCreate(ctx, req.(*PlanRelateCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanRelate_PlanRelateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanRelateDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanRelateServer).PlanRelateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PlanRelate/PlanRelateDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanRelateServer).PlanRelateDelete(ctx, req.(*PlanRelateDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanRelate_PlanRelateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanRelateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanRelateServer).PlanRelateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PlanRelate/PlanRelateUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanRelateServer).PlanRelateUpdate(ctx, req.(*PlanRelateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanRelate_PlanRelateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanRelateDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanRelateServer).PlanRelateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PlanRelate/PlanRelateDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanRelateServer).PlanRelateDetail(ctx, req.(*PlanRelateDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanRelate_PlanRelateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanRelateFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanRelateServer).PlanRelateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PlanRelate/PlanRelateFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanRelateServer).PlanRelateFilter(ctx, req.(*PlanRelateFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanRelate_ServiceDesc is the grpc.ServiceDesc for PlanRelate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanRelate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PlanRelate",
	HandlerType: (*PlanRelateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlanRelateCreate",
			Handler:    _PlanRelate_PlanRelateCreate_Handler,
		},
		{
			MethodName: "PlanRelateDelete",
			Handler:    _PlanRelate_PlanRelateDelete_Handler,
		},
		{
			MethodName: "PlanRelateUpdate",
			Handler:    _PlanRelate_PlanRelateUpdate_Handler,
		},
		{
			MethodName: "PlanRelateDetail",
			Handler:    _PlanRelate_PlanRelateDetail_Handler,
		},
		{
			MethodName: "PlanRelateFilter",
			Handler:    _PlanRelate_PlanRelateFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "planrelate.proto",
}
