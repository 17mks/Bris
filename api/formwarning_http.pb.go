// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: formwarning.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFormWarningFormWarningFilter = "/api.FormWarning/FormWarningFilter"
const OperationFormWarningFormWarningXfilter = "/api.FormWarning/FormWarningXfilter"

type FormWarningHTTPServer interface {
	FormWarningFilter(context.Context, *FormWarningFilterRequest) (*FormWarningFilterResponse, error)
	FormWarningXfilter(context.Context, *FormWarningXfilterRequest) (*FormWarningXfilterResponse, error)
}

func RegisterFormWarningHTTPServer(s *http.Server, srv FormWarningHTTPServer) {
	r := s.Route("/")
	r.POST("/form_warning/filter", _FormWarning_FormWarningFilter0_HTTP_Handler(srv))
	r.POST("/form_warning/xfilter", _FormWarning_FormWarningXfilter0_HTTP_Handler(srv))
}

func _FormWarning_FormWarningFilter0_HTTP_Handler(srv FormWarningHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormWarningFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormWarningFormWarningFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormWarningFilter(ctx, req.(*FormWarningFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormWarningFilterResponse)
		return ctx.Result(200, reply)
	}
}

func _FormWarning_FormWarningXfilter0_HTTP_Handler(srv FormWarningHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormWarningXfilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormWarningFormWarningXfilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormWarningXfilter(ctx, req.(*FormWarningXfilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormWarningXfilterResponse)
		return ctx.Result(200, reply)
	}
}

type FormWarningHTTPClient interface {
	FormWarningFilter(ctx context.Context, req *FormWarningFilterRequest, opts ...http.CallOption) (rsp *FormWarningFilterResponse, err error)
	FormWarningXfilter(ctx context.Context, req *FormWarningXfilterRequest, opts ...http.CallOption) (rsp *FormWarningXfilterResponse, err error)
}

type FormWarningHTTPClientImpl struct {
	cc *http.Client
}

func NewFormWarningHTTPClient(client *http.Client) FormWarningHTTPClient {
	return &FormWarningHTTPClientImpl{client}
}

func (c *FormWarningHTTPClientImpl) FormWarningFilter(ctx context.Context, in *FormWarningFilterRequest, opts ...http.CallOption) (*FormWarningFilterResponse, error) {
	var out FormWarningFilterResponse
	pattern := "/form_warning/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormWarningFormWarningFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormWarningHTTPClientImpl) FormWarningXfilter(ctx context.Context, in *FormWarningXfilterRequest, opts ...http.CallOption) (*FormWarningXfilterResponse, error) {
	var out FormWarningXfilterResponse
	pattern := "/form_warning/xfilter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormWarningFormWarningXfilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
