// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: formcss.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFormCssFormCssCreate = "/api.FormCss/FormCssCreate"
const OperationFormCssFormCssDelete = "/api.FormCss/FormCssDelete"
const OperationFormCssFormCssDetail = "/api.FormCss/FormCssDetail"
const OperationFormCssFormCssFilter = "/api.FormCss/FormCssFilter"
const OperationFormCssFormCssUpdate = "/api.FormCss/FormCssUpdate"

type FormCssHTTPServer interface {
	FormCssCreate(context.Context, *FormCssCreateRequest) (*FormCssCreateResponse, error)
	FormCssDelete(context.Context, *FormCssDeleteRequest) (*FormCssDeleteResponse, error)
	FormCssDetail(context.Context, *FormCssDetailRequest) (*FormCssDetailResponse, error)
	FormCssFilter(context.Context, *FormCssFilterRequest) (*FormCssFilterResponse, error)
	FormCssUpdate(context.Context, *FormCssUpdateRequest) (*FormCssUpdateResponse, error)
}

func RegisterFormCssHTTPServer(s *http.Server, srv FormCssHTTPServer) {
	r := s.Route("/")
	r.POST("/form_css", _FormCss_FormCssCreate0_HTTP_Handler(srv))
	r.DELETE("/form_css/{id}", _FormCss_FormCssDelete0_HTTP_Handler(srv))
	r.PUT("/form_css", _FormCss_FormCssUpdate0_HTTP_Handler(srv))
	r.GET("/form_css/{id}", _FormCss_FormCssDetail0_HTTP_Handler(srv))
	r.POST("/form_css/filter", _FormCss_FormCssFilter0_HTTP_Handler(srv))
}

func _FormCss_FormCssCreate0_HTTP_Handler(srv FormCssHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormCssCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormCssFormCssCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormCssCreate(ctx, req.(*FormCssCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormCssCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _FormCss_FormCssDelete0_HTTP_Handler(srv FormCssHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormCssDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormCssFormCssDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormCssDelete(ctx, req.(*FormCssDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormCssDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _FormCss_FormCssUpdate0_HTTP_Handler(srv FormCssHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormCssUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormCssFormCssUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormCssUpdate(ctx, req.(*FormCssUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormCssUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _FormCss_FormCssDetail0_HTTP_Handler(srv FormCssHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormCssDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormCssFormCssDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormCssDetail(ctx, req.(*FormCssDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormCssDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _FormCss_FormCssFilter0_HTTP_Handler(srv FormCssHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FormCssFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormCssFormCssFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FormCssFilter(ctx, req.(*FormCssFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormCssFilterResponse)
		return ctx.Result(200, reply)
	}
}

type FormCssHTTPClient interface {
	FormCssCreate(ctx context.Context, req *FormCssCreateRequest, opts ...http.CallOption) (rsp *FormCssCreateResponse, err error)
	FormCssDelete(ctx context.Context, req *FormCssDeleteRequest, opts ...http.CallOption) (rsp *FormCssDeleteResponse, err error)
	FormCssDetail(ctx context.Context, req *FormCssDetailRequest, opts ...http.CallOption) (rsp *FormCssDetailResponse, err error)
	FormCssFilter(ctx context.Context, req *FormCssFilterRequest, opts ...http.CallOption) (rsp *FormCssFilterResponse, err error)
	FormCssUpdate(ctx context.Context, req *FormCssUpdateRequest, opts ...http.CallOption) (rsp *FormCssUpdateResponse, err error)
}

type FormCssHTTPClientImpl struct {
	cc *http.Client
}

func NewFormCssHTTPClient(client *http.Client) FormCssHTTPClient {
	return &FormCssHTTPClientImpl{client}
}

func (c *FormCssHTTPClientImpl) FormCssCreate(ctx context.Context, in *FormCssCreateRequest, opts ...http.CallOption) (*FormCssCreateResponse, error) {
	var out FormCssCreateResponse
	pattern := "/form_css"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormCssFormCssCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormCssHTTPClientImpl) FormCssDelete(ctx context.Context, in *FormCssDeleteRequest, opts ...http.CallOption) (*FormCssDeleteResponse, error) {
	var out FormCssDeleteResponse
	pattern := "/form_css/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFormCssFormCssDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormCssHTTPClientImpl) FormCssDetail(ctx context.Context, in *FormCssDetailRequest, opts ...http.CallOption) (*FormCssDetailResponse, error) {
	var out FormCssDetailResponse
	pattern := "/form_css/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFormCssFormCssDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormCssHTTPClientImpl) FormCssFilter(ctx context.Context, in *FormCssFilterRequest, opts ...http.CallOption) (*FormCssFilterResponse, error) {
	var out FormCssFilterResponse
	pattern := "/form_css/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormCssFormCssFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FormCssHTTPClientImpl) FormCssUpdate(ctx context.Context, in *FormCssUpdateRequest, opts ...http.CallOption) (*FormCssUpdateResponse, error) {
	var out FormCssUpdateResponse
	pattern := "/form_css"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormCssFormCssUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
