// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: disfunction.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DisFunctionClient is the client API for DisFunction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DisFunctionClient interface {
	// 功能障碍表数据添加
	DisFunctionCreate(ctx context.Context, in *DisFunctionCreateRequest, opts ...grpc.CallOption) (*DisFunctionCreateResponse, error)
	// 功能障碍表数据删除
	DisFunctionDelete(ctx context.Context, in *DisFunctionDeleteRequest, opts ...grpc.CallOption) (*DisFunctionDeleteResponse, error)
	// 功能障碍表数据更新
	DisFunctionUpdate(ctx context.Context, in *DisFunctionUpdateRequest, opts ...grpc.CallOption) (*DisFunctionUpdateResponse, error)
	// 功能障碍表数据详情查询
	DisFunctionDetail(ctx context.Context, in *DisFunctionDetailRequest, opts ...grpc.CallOption) (*DisFunctionDetailResponse, error)
	// 功能障碍表数据过滤查询
	DisFunctionFilter(ctx context.Context, in *DisFunctionFilterRequest, opts ...grpc.CallOption) (*DisFunctionFilterResponse, error)
}

type disFunctionClient struct {
	cc grpc.ClientConnInterface
}

func NewDisFunctionClient(cc grpc.ClientConnInterface) DisFunctionClient {
	return &disFunctionClient{cc}
}

func (c *disFunctionClient) DisFunctionCreate(ctx context.Context, in *DisFunctionCreateRequest, opts ...grpc.CallOption) (*DisFunctionCreateResponse, error) {
	out := new(DisFunctionCreateResponse)
	err := c.cc.Invoke(ctx, "/api.DisFunction/DisFunctionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disFunctionClient) DisFunctionDelete(ctx context.Context, in *DisFunctionDeleteRequest, opts ...grpc.CallOption) (*DisFunctionDeleteResponse, error) {
	out := new(DisFunctionDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.DisFunction/DisFunctionDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disFunctionClient) DisFunctionUpdate(ctx context.Context, in *DisFunctionUpdateRequest, opts ...grpc.CallOption) (*DisFunctionUpdateResponse, error) {
	out := new(DisFunctionUpdateResponse)
	err := c.cc.Invoke(ctx, "/api.DisFunction/DisFunctionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disFunctionClient) DisFunctionDetail(ctx context.Context, in *DisFunctionDetailRequest, opts ...grpc.CallOption) (*DisFunctionDetailResponse, error) {
	out := new(DisFunctionDetailResponse)
	err := c.cc.Invoke(ctx, "/api.DisFunction/DisFunctionDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disFunctionClient) DisFunctionFilter(ctx context.Context, in *DisFunctionFilterRequest, opts ...grpc.CallOption) (*DisFunctionFilterResponse, error) {
	out := new(DisFunctionFilterResponse)
	err := c.cc.Invoke(ctx, "/api.DisFunction/DisFunctionFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisFunctionServer is the server API for DisFunction service.
// All implementations must embed UnimplementedDisFunctionServer
// for forward compatibility
type DisFunctionServer interface {
	// 功能障碍表数据添加
	DisFunctionCreate(context.Context, *DisFunctionCreateRequest) (*DisFunctionCreateResponse, error)
	// 功能障碍表数据删除
	DisFunctionDelete(context.Context, *DisFunctionDeleteRequest) (*DisFunctionDeleteResponse, error)
	// 功能障碍表数据更新
	DisFunctionUpdate(context.Context, *DisFunctionUpdateRequest) (*DisFunctionUpdateResponse, error)
	// 功能障碍表数据详情查询
	DisFunctionDetail(context.Context, *DisFunctionDetailRequest) (*DisFunctionDetailResponse, error)
	// 功能障碍表数据过滤查询
	DisFunctionFilter(context.Context, *DisFunctionFilterRequest) (*DisFunctionFilterResponse, error)
	mustEmbedUnimplementedDisFunctionServer()
}

// UnimplementedDisFunctionServer must be embedded to have forward compatible implementations.
type UnimplementedDisFunctionServer struct {
}

func (UnimplementedDisFunctionServer) DisFunctionCreate(context.Context, *DisFunctionCreateRequest) (*DisFunctionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisFunctionCreate not implemented")
}
func (UnimplementedDisFunctionServer) DisFunctionDelete(context.Context, *DisFunctionDeleteRequest) (*DisFunctionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisFunctionDelete not implemented")
}
func (UnimplementedDisFunctionServer) DisFunctionUpdate(context.Context, *DisFunctionUpdateRequest) (*DisFunctionUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisFunctionUpdate not implemented")
}
func (UnimplementedDisFunctionServer) DisFunctionDetail(context.Context, *DisFunctionDetailRequest) (*DisFunctionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisFunctionDetail not implemented")
}
func (UnimplementedDisFunctionServer) DisFunctionFilter(context.Context, *DisFunctionFilterRequest) (*DisFunctionFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisFunctionFilter not implemented")
}
func (UnimplementedDisFunctionServer) mustEmbedUnimplementedDisFunctionServer() {}

// UnsafeDisFunctionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DisFunctionServer will
// result in compilation errors.
type UnsafeDisFunctionServer interface {
	mustEmbedUnimplementedDisFunctionServer()
}

func RegisterDisFunctionServer(s grpc.ServiceRegistrar, srv DisFunctionServer) {
	s.RegisterService(&DisFunction_ServiceDesc, srv)
}

func _DisFunction_DisFunctionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisFunctionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisFunctionServer).DisFunctionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DisFunction/DisFunctionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisFunctionServer).DisFunctionCreate(ctx, req.(*DisFunctionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisFunction_DisFunctionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisFunctionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisFunctionServer).DisFunctionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DisFunction/DisFunctionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisFunctionServer).DisFunctionDelete(ctx, req.(*DisFunctionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisFunction_DisFunctionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisFunctionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisFunctionServer).DisFunctionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DisFunction/DisFunctionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisFunctionServer).DisFunctionUpdate(ctx, req.(*DisFunctionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisFunction_DisFunctionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisFunctionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisFunctionServer).DisFunctionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DisFunction/DisFunctionDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisFunctionServer).DisFunctionDetail(ctx, req.(*DisFunctionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisFunction_DisFunctionFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisFunctionFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisFunctionServer).DisFunctionFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DisFunction/DisFunctionFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisFunctionServer).DisFunctionFilter(ctx, req.(*DisFunctionFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DisFunction_ServiceDesc is the grpc.ServiceDesc for DisFunction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DisFunction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DisFunction",
	HandlerType: (*DisFunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DisFunctionCreate",
			Handler:    _DisFunction_DisFunctionCreate_Handler,
		},
		{
			MethodName: "DisFunctionDelete",
			Handler:    _DisFunction_DisFunctionDelete_Handler,
		},
		{
			MethodName: "DisFunctionUpdate",
			Handler:    _DisFunction_DisFunctionUpdate_Handler,
		},
		{
			MethodName: "DisFunctionDetail",
			Handler:    _DisFunction_DisFunctionDetail_Handler,
		},
		{
			MethodName: "DisFunctionFilter",
			Handler:    _DisFunction_DisFunctionFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "disfunction.proto",
}
