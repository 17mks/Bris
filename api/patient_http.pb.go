// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: patient.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPatientPatientCreate = "/api.Patient/PatientCreate"
const OperationPatientPatientDelete = "/api.Patient/PatientDelete"
const OperationPatientPatientDetail = "/api.Patient/PatientDetail"
const OperationPatientPatientFilter = "/api.Patient/PatientFilter"
const OperationPatientPatientUpdate = "/api.Patient/PatientUpdate"

type PatientHTTPServer interface {
	PatientCreate(context.Context, *PatientCreateRequest) (*PatientCreateResponse, error)
	PatientDelete(context.Context, *PatientDeleteRequest) (*PatientDeleteResponse, error)
	PatientDetail(context.Context, *PatientDetailRequest) (*PatientDetailResponse, error)
	PatientFilter(context.Context, *PatientFilterRequest) (*PatientFilterResponse, error)
	PatientUpdate(context.Context, *PatientUpdateRequest) (*PatientUpdateResponse, error)
}

func RegisterPatientHTTPServer(s *http.Server, srv PatientHTTPServer) {
	r := s.Route("/")
	r.POST("/patient", _Patient_PatientCreate0_HTTP_Handler(srv))
	r.DELETE("/patient/{id}", _Patient_PatientDelete0_HTTP_Handler(srv))
	r.PUT("/patient", _Patient_PatientUpdate0_HTTP_Handler(srv))
	r.GET("/patient/{id}", _Patient_PatientDetail0_HTTP_Handler(srv))
	r.POST("/patient/filter", _Patient_PatientFilter0_HTTP_Handler(srv))
}

func _Patient_PatientCreate0_HTTP_Handler(srv PatientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PatientCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPatientPatientCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PatientCreate(ctx, req.(*PatientCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PatientCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _Patient_PatientDelete0_HTTP_Handler(srv PatientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PatientDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPatientPatientDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PatientDelete(ctx, req.(*PatientDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PatientDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _Patient_PatientUpdate0_HTTP_Handler(srv PatientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PatientUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPatientPatientUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PatientUpdate(ctx, req.(*PatientUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PatientUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _Patient_PatientDetail0_HTTP_Handler(srv PatientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PatientDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPatientPatientDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PatientDetail(ctx, req.(*PatientDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PatientDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Patient_PatientFilter0_HTTP_Handler(srv PatientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PatientFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPatientPatientFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PatientFilter(ctx, req.(*PatientFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PatientFilterResponse)
		return ctx.Result(200, reply)
	}
}

type PatientHTTPClient interface {
	PatientCreate(ctx context.Context, req *PatientCreateRequest, opts ...http.CallOption) (rsp *PatientCreateResponse, err error)
	PatientDelete(ctx context.Context, req *PatientDeleteRequest, opts ...http.CallOption) (rsp *PatientDeleteResponse, err error)
	PatientDetail(ctx context.Context, req *PatientDetailRequest, opts ...http.CallOption) (rsp *PatientDetailResponse, err error)
	PatientFilter(ctx context.Context, req *PatientFilterRequest, opts ...http.CallOption) (rsp *PatientFilterResponse, err error)
	PatientUpdate(ctx context.Context, req *PatientUpdateRequest, opts ...http.CallOption) (rsp *PatientUpdateResponse, err error)
}

type PatientHTTPClientImpl struct {
	cc *http.Client
}

func NewPatientHTTPClient(client *http.Client) PatientHTTPClient {
	return &PatientHTTPClientImpl{client}
}

func (c *PatientHTTPClientImpl) PatientCreate(ctx context.Context, in *PatientCreateRequest, opts ...http.CallOption) (*PatientCreateResponse, error) {
	var out PatientCreateResponse
	pattern := "/patient"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPatientPatientCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PatientHTTPClientImpl) PatientDelete(ctx context.Context, in *PatientDeleteRequest, opts ...http.CallOption) (*PatientDeleteResponse, error) {
	var out PatientDeleteResponse
	pattern := "/patient/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPatientPatientDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PatientHTTPClientImpl) PatientDetail(ctx context.Context, in *PatientDetailRequest, opts ...http.CallOption) (*PatientDetailResponse, error) {
	var out PatientDetailResponse
	pattern := "/patient/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPatientPatientDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PatientHTTPClientImpl) PatientFilter(ctx context.Context, in *PatientFilterRequest, opts ...http.CallOption) (*PatientFilterResponse, error) {
	var out PatientFilterResponse
	pattern := "/patient/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPatientPatientFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PatientHTTPClientImpl) PatientUpdate(ctx context.Context, in *PatientUpdateRequest, opts ...http.CallOption) (*PatientUpdateResponse, error) {
	var out PatientUpdateResponse
	pattern := "/patient"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPatientPatientUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
