// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: auth.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthTokenClient is the client API for AuthToken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthTokenClient interface {
	// 根据外部ID生成Token
	CreateAuthToken(ctx context.Context, in *CreateAuthTokenRequest, opts ...grpc.CallOption) (*CreateAuthTokenResponse, error)
}

type authTokenClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthTokenClient(cc grpc.ClientConnInterface) AuthTokenClient {
	return &authTokenClient{cc}
}

func (c *authTokenClient) CreateAuthToken(ctx context.Context, in *CreateAuthTokenRequest, opts ...grpc.CallOption) (*CreateAuthTokenResponse, error) {
	out := new(CreateAuthTokenResponse)
	err := c.cc.Invoke(ctx, "/api.AuthToken/CreateAuthToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthTokenServer is the server API for AuthToken service.
// All implementations must embed UnimplementedAuthTokenServer
// for forward compatibility
type AuthTokenServer interface {
	// 根据外部ID生成Token
	CreateAuthToken(context.Context, *CreateAuthTokenRequest) (*CreateAuthTokenResponse, error)
	mustEmbedUnimplementedAuthTokenServer()
}

// UnimplementedAuthTokenServer must be embedded to have forward compatible implementations.
type UnimplementedAuthTokenServer struct {
}

func (UnimplementedAuthTokenServer) CreateAuthToken(context.Context, *CreateAuthTokenRequest) (*CreateAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthToken not implemented")
}
func (UnimplementedAuthTokenServer) mustEmbedUnimplementedAuthTokenServer() {}

// UnsafeAuthTokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthTokenServer will
// result in compilation errors.
type UnsafeAuthTokenServer interface {
	mustEmbedUnimplementedAuthTokenServer()
}

func RegisterAuthTokenServer(s grpc.ServiceRegistrar, srv AuthTokenServer) {
	s.RegisterService(&AuthToken_ServiceDesc, srv)
}

func _AuthToken_CreateAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTokenServer).CreateAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AuthToken/CreateAuthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTokenServer).CreateAuthToken(ctx, req.(*CreateAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthToken_ServiceDesc is the grpc.ServiceDesc for AuthToken service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthToken_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AuthToken",
	HandlerType: (*AuthTokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuthToken",
			Handler:    _AuthToken_CreateAuthToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
