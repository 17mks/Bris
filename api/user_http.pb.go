// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: user.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserUserBind = "/api.User/UserBind"
const OperationUserUserCertification = "/api.User/UserCertification"
const OperationUserUserCreate = "/api.User/UserCreate"
const OperationUserUserDelete = "/api.User/UserDelete"
const OperationUserUserDetail = "/api.User/UserDetail"
const OperationUserUserFilter = "/api.User/UserFilter"
const OperationUserUserImport = "/api.User/UserImport"
const OperationUserUserPwdReset = "/api.User/UserPwdReset"
const OperationUserUserRegister = "/api.User/UserRegister"
const OperationUserUserSignIn = "/api.User/UserSignIn"
const OperationUserUserUpdate = "/api.User/UserUpdate"

type UserHTTPServer interface {
	UserBind(context.Context, *UserBindRequest) (*UserBindResponse, error)
	UserCertification(context.Context, *UserCertificationRequest) (*UserCertificationResponse, error)
	UserCreate(context.Context, *UserCreateRequest) (*UserCreateResponse, error)
	UserDelete(context.Context, *UserDeleteRequest) (*UserDeleteResponse, error)
	UserDetail(context.Context, *UserDetailRequest) (*UserDetailResponse, error)
	UserFilter(context.Context, *UserFilterRequest) (*UserFilterResponse, error)
	UserImport(context.Context, *UserImportRequest) (*UserImportResponse, error)
	UserPwdReset(context.Context, *UserPwdResetRequest) (*UserPwdResetResponse, error)
	UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	UserSignIn(context.Context, *UserSignInRequest) (*UserSignInResponse, error)
	UserUpdate(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.POST("/user", _User_UserCreate0_HTTP_Handler(srv))
	r.DELETE("/user/{id}", _User_UserDelete0_HTTP_Handler(srv))
	r.PUT("/user", _User_UserUpdate0_HTTP_Handler(srv))
	r.GET("/user/{id}", _User_UserDetail0_HTTP_Handler(srv))
	r.POST("/user/filter", _User_UserFilter0_HTTP_Handler(srv))
	r.POST("/user/import", _User_UserImport0_HTTP_Handler(srv))
	r.POST("/user/login", _User_UserSignIn0_HTTP_Handler(srv))
	r.POST("/user/Register", _User_UserRegister0_HTTP_Handler(srv))
	r.POST("/user/certification", _User_UserCertification0_HTTP_Handler(srv))
	r.PUT("/user/password/reset", _User_UserPwdReset0_HTTP_Handler(srv))
	r.POST("/user/bind", _User_UserBind0_HTTP_Handler(srv))
}

func _User_UserCreate0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserCreate(ctx, req.(*UserCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _User_UserDelete0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserDelete(ctx, req.(*UserDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _User_UserUpdate0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserUpdate(ctx, req.(*UserUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _User_UserDetail0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserDetail(ctx, req.(*UserDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _User_UserFilter0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserFilter(ctx, req.(*UserFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserFilterResponse)
		return ctx.Result(200, reply)
	}
}

func _User_UserImport0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserImportRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserImport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserImport(ctx, req.(*UserImportRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserImportResponse)
		return ctx.Result(200, reply)
	}
}

func _User_UserSignIn0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserSignInRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserSignIn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserSignIn(ctx, req.(*UserSignInRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserSignInResponse)
		return ctx.Result(200, reply)
	}
}

func _User_UserRegister0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserRegister(ctx, req.(*UserRegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserRegisterResponse)
		return ctx.Result(200, reply)
	}
}

func _User_UserCertification0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserCertificationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserCertification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserCertification(ctx, req.(*UserCertificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserCertificationResponse)
		return ctx.Result(200, reply)
	}
}

func _User_UserPwdReset0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserPwdResetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserPwdReset)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserPwdReset(ctx, req.(*UserPwdResetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserPwdResetResponse)
		return ctx.Result(200, reply)
	}
}

func _User_UserBind0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserBindRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserBind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserBind(ctx, req.(*UserBindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserBindResponse)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	UserBind(ctx context.Context, req *UserBindRequest, opts ...http.CallOption) (rsp *UserBindResponse, err error)
	UserCertification(ctx context.Context, req *UserCertificationRequest, opts ...http.CallOption) (rsp *UserCertificationResponse, err error)
	UserCreate(ctx context.Context, req *UserCreateRequest, opts ...http.CallOption) (rsp *UserCreateResponse, err error)
	UserDelete(ctx context.Context, req *UserDeleteRequest, opts ...http.CallOption) (rsp *UserDeleteResponse, err error)
	UserDetail(ctx context.Context, req *UserDetailRequest, opts ...http.CallOption) (rsp *UserDetailResponse, err error)
	UserFilter(ctx context.Context, req *UserFilterRequest, opts ...http.CallOption) (rsp *UserFilterResponse, err error)
	UserImport(ctx context.Context, req *UserImportRequest, opts ...http.CallOption) (rsp *UserImportResponse, err error)
	UserPwdReset(ctx context.Context, req *UserPwdResetRequest, opts ...http.CallOption) (rsp *UserPwdResetResponse, err error)
	UserRegister(ctx context.Context, req *UserRegisterRequest, opts ...http.CallOption) (rsp *UserRegisterResponse, err error)
	UserSignIn(ctx context.Context, req *UserSignInRequest, opts ...http.CallOption) (rsp *UserSignInResponse, err error)
	UserUpdate(ctx context.Context, req *UserUpdateRequest, opts ...http.CallOption) (rsp *UserUpdateResponse, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) UserBind(ctx context.Context, in *UserBindRequest, opts ...http.CallOption) (*UserBindResponse, error) {
	var out UserBindResponse
	pattern := "/user/bind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserBind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UserCertification(ctx context.Context, in *UserCertificationRequest, opts ...http.CallOption) (*UserCertificationResponse, error) {
	var out UserCertificationResponse
	pattern := "/user/certification"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserCertification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UserCreate(ctx context.Context, in *UserCreateRequest, opts ...http.CallOption) (*UserCreateResponse, error) {
	var out UserCreateResponse
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UserDelete(ctx context.Context, in *UserDeleteRequest, opts ...http.CallOption) (*UserDeleteResponse, error) {
	var out UserDeleteResponse
	pattern := "/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserUserDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UserDetail(ctx context.Context, in *UserDetailRequest, opts ...http.CallOption) (*UserDetailResponse, error) {
	var out UserDetailResponse
	pattern := "/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserUserDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UserFilter(ctx context.Context, in *UserFilterRequest, opts ...http.CallOption) (*UserFilterResponse, error) {
	var out UserFilterResponse
	pattern := "/user/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UserImport(ctx context.Context, in *UserImportRequest, opts ...http.CallOption) (*UserImportResponse, error) {
	var out UserImportResponse
	pattern := "/user/import"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserImport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UserPwdReset(ctx context.Context, in *UserPwdResetRequest, opts ...http.CallOption) (*UserPwdResetResponse, error) {
	var out UserPwdResetResponse
	pattern := "/user/password/reset"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserPwdReset))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...http.CallOption) (*UserRegisterResponse, error) {
	var out UserRegisterResponse
	pattern := "/user/Register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UserSignIn(ctx context.Context, in *UserSignInRequest, opts ...http.CallOption) (*UserSignInResponse, error) {
	var out UserSignInResponse
	pattern := "/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserSignIn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UserUpdate(ctx context.Context, in *UserUpdateRequest, opts ...http.CallOption) (*UserUpdateResponse, error) {
	var out UserUpdateResponse
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
