// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.10
// source: columnthreshold.proto

package api

import (
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Columnthresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime     string `protobuf:"bytes,1,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Level          int32  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Max            string `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	Min            string `protobuf:"bytes,5,opt,name=min,proto3" json:"min,omitempty"`
	Reverse        bool   `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`
	TbFormColumnId string `protobuf:"bytes,7,opt,name=tbFormColumnId,proto3" json:"tbFormColumnId,omitempty"`
	UpdateTime     string `protobuf:"bytes,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	WarningInfo    string `protobuf:"bytes,9,opt,name=warningInfo,proto3" json:"warningInfo,omitempty"`
	WarningRegex   string `protobuf:"bytes,10,opt,name=warningRegex,proto3" json:"warningRegex,omitempty"`
}

func (x *Columnthresholds) Reset() {
	*x = Columnthresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnthreshold_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Columnthresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Columnthresholds) ProtoMessage() {}

func (x *Columnthresholds) ProtoReflect() protoreflect.Message {
	mi := &file_columnthreshold_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Columnthresholds.ProtoReflect.Descriptor instead.
func (*Columnthresholds) Descriptor() ([]byte, []int) {
	return file_columnthreshold_proto_rawDescGZIP(), []int{0}
}

func (x *Columnthresholds) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Columnthresholds) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Columnthresholds) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Columnthresholds) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

func (x *Columnthresholds) GetMin() string {
	if x != nil {
		return x.Min
	}
	return ""
}

func (x *Columnthresholds) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *Columnthresholds) GetTbFormColumnId() string {
	if x != nil {
		return x.TbFormColumnId
	}
	return ""
}

func (x *Columnthresholds) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Columnthresholds) GetWarningInfo() string {
	if x != nil {
		return x.WarningInfo
	}
	return ""
}

func (x *Columnthresholds) GetWarningRegex() string {
	if x != nil {
		return x.WarningRegex
	}
	return ""
}

type ColumnThresholdCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level          int32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Max            string `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	Min            string `protobuf:"bytes,3,opt,name=min,proto3" json:"min,omitempty"`
	Reverse        bool   `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse,omitempty"`
	TbFormColumnId string `protobuf:"bytes,5,opt,name=tbFormColumnId,proto3" json:"tbFormColumnId,omitempty"`
	WarningInfo    string `protobuf:"bytes,6,opt,name=warningInfo,proto3" json:"warningInfo,omitempty"`
}

func (x *ColumnThresholdCreateRequest) Reset() {
	*x = ColumnThresholdCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnthreshold_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnThresholdCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnThresholdCreateRequest) ProtoMessage() {}

func (x *ColumnThresholdCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_columnthreshold_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnThresholdCreateRequest.ProtoReflect.Descriptor instead.
func (*ColumnThresholdCreateRequest) Descriptor() ([]byte, []int) {
	return file_columnthreshold_proto_rawDescGZIP(), []int{1}
}

func (x *ColumnThresholdCreateRequest) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ColumnThresholdCreateRequest) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

func (x *ColumnThresholdCreateRequest) GetMin() string {
	if x != nil {
		return x.Min
	}
	return ""
}

func (x *ColumnThresholdCreateRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ColumnThresholdCreateRequest) GetTbFormColumnId() string {
	if x != nil {
		return x.TbFormColumnId
	}
	return ""
}

func (x *ColumnThresholdCreateRequest) GetWarningInfo() string {
	if x != nil {
		return x.WarningInfo
	}
	return ""
}

type ColumnThresholdCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ColumnThresholdCreateResponse) Reset() {
	*x = ColumnThresholdCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnthreshold_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnThresholdCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnThresholdCreateResponse) ProtoMessage() {}

func (x *ColumnThresholdCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_columnthreshold_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnThresholdCreateResponse.ProtoReflect.Descriptor instead.
func (*ColumnThresholdCreateResponse) Descriptor() ([]byte, []int) {
	return file_columnthreshold_proto_rawDescGZIP(), []int{2}
}

func (x *ColumnThresholdCreateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ColumnThresholdDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ColumnThresholdDeleteRequest) Reset() {
	*x = ColumnThresholdDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnthreshold_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnThresholdDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnThresholdDeleteRequest) ProtoMessage() {}

func (x *ColumnThresholdDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_columnthreshold_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnThresholdDeleteRequest.ProtoReflect.Descriptor instead.
func (*ColumnThresholdDeleteRequest) Descriptor() ([]byte, []int) {
	return file_columnthreshold_proto_rawDescGZIP(), []int{3}
}

func (x *ColumnThresholdDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ColumnThresholdDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ColumnThresholdDeleteResponse) Reset() {
	*x = ColumnThresholdDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnthreshold_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnThresholdDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnThresholdDeleteResponse) ProtoMessage() {}

func (x *ColumnThresholdDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_columnthreshold_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnThresholdDeleteResponse.ProtoReflect.Descriptor instead.
func (*ColumnThresholdDeleteResponse) Descriptor() ([]byte, []int) {
	return file_columnthreshold_proto_rawDescGZIP(), []int{4}
}

func (x *ColumnThresholdDeleteResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ColumnThresholdUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level          int32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Max            string `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	Min            string `protobuf:"bytes,3,opt,name=min,proto3" json:"min,omitempty"`
	Reverse        bool   `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse,omitempty"`
	TbFormColumnId string `protobuf:"bytes,5,opt,name=tbFormColumnId,proto3" json:"tbFormColumnId,omitempty"`
	WarningInfo    string `protobuf:"bytes,6,opt,name=warningInfo,proto3" json:"warningInfo,omitempty"`
}

func (x *ColumnThresholdUpdateRequest) Reset() {
	*x = ColumnThresholdUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnthreshold_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnThresholdUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnThresholdUpdateRequest) ProtoMessage() {}

func (x *ColumnThresholdUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_columnthreshold_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnThresholdUpdateRequest.ProtoReflect.Descriptor instead.
func (*ColumnThresholdUpdateRequest) Descriptor() ([]byte, []int) {
	return file_columnthreshold_proto_rawDescGZIP(), []int{5}
}

func (x *ColumnThresholdUpdateRequest) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ColumnThresholdUpdateRequest) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

func (x *ColumnThresholdUpdateRequest) GetMin() string {
	if x != nil {
		return x.Min
	}
	return ""
}

func (x *ColumnThresholdUpdateRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ColumnThresholdUpdateRequest) GetTbFormColumnId() string {
	if x != nil {
		return x.TbFormColumnId
	}
	return ""
}

func (x *ColumnThresholdUpdateRequest) GetWarningInfo() string {
	if x != nil {
		return x.WarningInfo
	}
	return ""
}

type ColumnThresholdUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime     string `protobuf:"bytes,1,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Level          int32  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Max            string `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	Min            string `protobuf:"bytes,5,opt,name=min,proto3" json:"min,omitempty"`
	Reverse        bool   `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`
	TbFormColumnId string `protobuf:"bytes,7,opt,name=tbFormColumnId,proto3" json:"tbFormColumnId,omitempty"`
	UpdateTime     string `protobuf:"bytes,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	WarningInfo    string `protobuf:"bytes,9,opt,name=warningInfo,proto3" json:"warningInfo,omitempty"`
}

func (x *ColumnThresholdUpdateResponse) Reset() {
	*x = ColumnThresholdUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnthreshold_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnThresholdUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnThresholdUpdateResponse) ProtoMessage() {}

func (x *ColumnThresholdUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_columnthreshold_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnThresholdUpdateResponse.ProtoReflect.Descriptor instead.
func (*ColumnThresholdUpdateResponse) Descriptor() ([]byte, []int) {
	return file_columnthreshold_proto_rawDescGZIP(), []int{6}
}

func (x *ColumnThresholdUpdateResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ColumnThresholdUpdateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ColumnThresholdUpdateResponse) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ColumnThresholdUpdateResponse) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

func (x *ColumnThresholdUpdateResponse) GetMin() string {
	if x != nil {
		return x.Min
	}
	return ""
}

func (x *ColumnThresholdUpdateResponse) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ColumnThresholdUpdateResponse) GetTbFormColumnId() string {
	if x != nil {
		return x.TbFormColumnId
	}
	return ""
}

func (x *ColumnThresholdUpdateResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ColumnThresholdUpdateResponse) GetWarningInfo() string {
	if x != nil {
		return x.WarningInfo
	}
	return ""
}

type ColumnThresholdDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ColumnThresholdDetailRequest) Reset() {
	*x = ColumnThresholdDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnthreshold_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnThresholdDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnThresholdDetailRequest) ProtoMessage() {}

func (x *ColumnThresholdDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_columnthreshold_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnThresholdDetailRequest.ProtoReflect.Descriptor instead.
func (*ColumnThresholdDetailRequest) Descriptor() ([]byte, []int) {
	return file_columnthreshold_proto_rawDescGZIP(), []int{7}
}

func (x *ColumnThresholdDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ColumnThresholdDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime     string `protobuf:"bytes,1,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Level          int32  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Max            string `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	Min            string `protobuf:"bytes,5,opt,name=min,proto3" json:"min,omitempty"`
	Reverse        bool   `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`
	TbFormColumnId string `protobuf:"bytes,7,opt,name=tbFormColumnId,proto3" json:"tbFormColumnId,omitempty"`
	UpdateTime     string `protobuf:"bytes,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	WarningInfo    string `protobuf:"bytes,9,opt,name=warningInfo,proto3" json:"warningInfo,omitempty"`
}

func (x *ColumnThresholdDetailResponse) Reset() {
	*x = ColumnThresholdDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnthreshold_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnThresholdDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnThresholdDetailResponse) ProtoMessage() {}

func (x *ColumnThresholdDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_columnthreshold_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnThresholdDetailResponse.ProtoReflect.Descriptor instead.
func (*ColumnThresholdDetailResponse) Descriptor() ([]byte, []int) {
	return file_columnthreshold_proto_rawDescGZIP(), []int{8}
}

func (x *ColumnThresholdDetailResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ColumnThresholdDetailResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ColumnThresholdDetailResponse) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ColumnThresholdDetailResponse) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

func (x *ColumnThresholdDetailResponse) GetMin() string {
	if x != nil {
		return x.Min
	}
	return ""
}

func (x *ColumnThresholdDetailResponse) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ColumnThresholdDetailResponse) GetTbFormColumnId() string {
	if x != nil {
		return x.TbFormColumnId
	}
	return ""
}

func (x *ColumnThresholdDetailResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ColumnThresholdDetailResponse) GetWarningInfo() string {
	if x != nil {
		return x.WarningInfo
	}
	return ""
}

type ColumnThresholdFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter  *ColumnThresholdFilterRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Page    int32                                `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int32                                `protobuf:"varint,3,opt,name=perPage,proto3" json:"perPage,omitempty"`
}

func (x *ColumnThresholdFilterRequest) Reset() {
	*x = ColumnThresholdFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnthreshold_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnThresholdFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnThresholdFilterRequest) ProtoMessage() {}

func (x *ColumnThresholdFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_columnthreshold_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnThresholdFilterRequest.ProtoReflect.Descriptor instead.
func (*ColumnThresholdFilterRequest) Descriptor() ([]byte, []int) {
	return file_columnthreshold_proto_rawDescGZIP(), []int{9}
}

func (x *ColumnThresholdFilterRequest) GetFilter() *ColumnThresholdFilterRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ColumnThresholdFilterRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ColumnThresholdFilterRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type ColumnThresholdFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int32                                    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int32                                    `protobuf:"varint,2,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Results []*ColumnThresholdFilterResponse_Results `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Total   int32                                    `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ColumnThresholdFilterResponse) Reset() {
	*x = ColumnThresholdFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnthreshold_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnThresholdFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnThresholdFilterResponse) ProtoMessage() {}

func (x *ColumnThresholdFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_columnthreshold_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnThresholdFilterResponse.ProtoReflect.Descriptor instead.
func (*ColumnThresholdFilterResponse) Descriptor() ([]byte, []int) {
	return file_columnthreshold_proto_rawDescGZIP(), []int{10}
}

func (x *ColumnThresholdFilterResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ColumnThresholdFilterResponse) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ColumnThresholdFilterResponse) GetResults() []*ColumnThresholdFilterResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ColumnThresholdFilterResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ColumnThresholdFilterRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	ColumnIds []string `protobuf:"bytes,2,rep,name=columnIds,proto3" json:"columnIds,omitempty"`
	FormIds   []string `protobuf:"bytes,3,rep,name=formIds,proto3" json:"formIds,omitempty"`
	Key       string   `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ColumnThresholdFilterRequest_Filter) Reset() {
	*x = ColumnThresholdFilterRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnthreshold_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnThresholdFilterRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnThresholdFilterRequest_Filter) ProtoMessage() {}

func (x *ColumnThresholdFilterRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_columnthreshold_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnThresholdFilterRequest_Filter.ProtoReflect.Descriptor instead.
func (*ColumnThresholdFilterRequest_Filter) Descriptor() ([]byte, []int) {
	return file_columnthreshold_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ColumnThresholdFilterRequest_Filter) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ColumnThresholdFilterRequest_Filter) GetColumnIds() []string {
	if x != nil {
		return x.ColumnIds
	}
	return nil
}

func (x *ColumnThresholdFilterRequest_Filter) GetFormIds() []string {
	if x != nil {
		return x.FormIds
	}
	return nil
}

func (x *ColumnThresholdFilterRequest_Filter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ColumnThresholdFilterResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime     string `protobuf:"bytes,1,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Level          int32  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Max            string `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	Min            string `protobuf:"bytes,5,opt,name=min,proto3" json:"min,omitempty"`
	Reverse        bool   `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`
	TbFormColumnId string `protobuf:"bytes,7,opt,name=tbFormColumnId,proto3" json:"tbFormColumnId,omitempty"`
	UpdateTime     string `protobuf:"bytes,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	WarningInfo    string `protobuf:"bytes,9,opt,name=warningInfo,proto3" json:"warningInfo,omitempty"`
}

func (x *ColumnThresholdFilterResponse_Results) Reset() {
	*x = ColumnThresholdFilterResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_columnthreshold_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnThresholdFilterResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnThresholdFilterResponse_Results) ProtoMessage() {}

func (x *ColumnThresholdFilterResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_columnthreshold_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnThresholdFilterResponse_Results.ProtoReflect.Descriptor instead.
func (*ColumnThresholdFilterResponse_Results) Descriptor() ([]byte, []int) {
	return file_columnthreshold_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ColumnThresholdFilterResponse_Results) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ColumnThresholdFilterResponse_Results) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ColumnThresholdFilterResponse_Results) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ColumnThresholdFilterResponse_Results) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

func (x *ColumnThresholdFilterResponse_Results) GetMin() string {
	if x != nil {
		return x.Min
	}
	return ""
}

func (x *ColumnThresholdFilterResponse_Results) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ColumnThresholdFilterResponse_Results) GetTbFormColumnId() string {
	if x != nil {
		return x.TbFormColumnId
	}
	return ""
}

func (x *ColumnThresholdFilterResponse_Results) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ColumnThresholdFilterResponse_Results) GetWarningInfo() string {
	if x != nil {
		return x.WarningInfo
	}
	return ""
}

var File_columnthreshold_proto protoreflect.FileDescriptor

var file_columnthreshold_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x05, 0x0a, 0x10, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x3f, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xba, 0x47, 0x20, 0xba,
	0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x18, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97,
	0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x26, 0xba, 0x47, 0x23, 0xba, 0x01, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x92,
	0x02, 0x18, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98,
	0x88, 0xe5, 0x80, 0xbc, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x39, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0xba, 0x47, 0x24, 0xba, 0x01, 0x03, 0x6d, 0x61, 0x78, 0x92, 0x02, 0x1b, 0xe8, 0xa1, 0xa8, 0xe5,
	0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe6, 0x9c,
	0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x39, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xba, 0x47, 0x24, 0xba, 0x01,
	0x03, 0x6d, 0x69, 0x6e, 0x92, 0x02, 0x1b, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97,
	0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe5,
	0x80, 0xbc, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x92, 0x02, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0x8f, 0x8d, 0xe8, 0xbd, 0xac, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x0e, 0x74, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba, 0x47, 0x29, 0xba, 0x01, 0x0e, 0x74,
	0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x92, 0x02, 0x15,
	0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe8, 0xa1, 0xa8, 0xe7,
	0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x0e, 0x74, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xba, 0x47, 0x2f,
	0xba, 0x01, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x92, 0x02,
	0x1e, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0xa2, 0x84,
	0xe8, 0xad, 0xa6, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6a, 0x0a, 0x0c,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x46, 0xba, 0x47, 0x43, 0xba, 0x01, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x67, 0x65, 0x78, 0x92, 0x02, 0x31, 0xe9, 0xa2, 0x84, 0xe8, 0xad, 0xa6, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0xbb, 0x84, 0xe8, 0xa3, 0x85, 0xe8, 0xa7, 0x84, 0xe5, 0x88,
	0x99, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x7b, 0x7b,
	0x6b, 0x65, 0x79, 0x7d, 0x7d, 0x2c, 0x61, 0x67, 0x65, 0x29, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x65, 0x78, 0x22, 0xb6, 0x03, 0x0a, 0x1c, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x26, 0xba, 0x47, 0x23, 0xba, 0x01, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x92, 0x02, 0x18, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad,
	0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xba, 0x47, 0x24, 0xba, 0x01, 0x03, 0x6d, 0x61, 0x78, 0x92,
	0x02, 0x1b, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98,
	0x88, 0xe5, 0x80, 0xbc, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x12, 0x39, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x27, 0xba, 0x47, 0x24, 0xba, 0x01, 0x03, 0x6d, 0x69, 0x6e, 0x92, 0x02, 0x1b, 0xe8, 0xa1, 0xa8,
	0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe6,
	0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe5, 0x80, 0xbc, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x36, 0x0a,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c,
	0xba, 0x47, 0x19, 0xba, 0x01, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x92, 0x02, 0x0c,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0x8d, 0xe8, 0xbd, 0xac, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x74, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba,
	0x47, 0x29, 0xba, 0x01, 0x0e, 0x74, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x64, 0x92, 0x02, 0x15, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6,
	0xae, 0xb5, 0xe8, 0xa1, 0xa8, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x0e, 0x74, 0x62, 0x46,
	0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x32, 0xba, 0x47, 0x2f, 0xba, 0x01, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x92, 0x02, 0x1e, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6,
	0xae, 0xb5, 0xe9, 0xa2, 0x84, 0xe8, 0xad, 0xa6, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x54, 0x0a, 0x1d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0xba, 0x47, 0x20, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x18, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d,
	0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0xbc, 0x96,
	0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x1c, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0xba, 0x47, 0x20, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x18,
	0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5,
	0x80, 0xbc, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x1d,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xba, 0x47, 0x20, 0xba, 0x01,
	0x02, 0x69, 0x64, 0x92, 0x02, 0x18, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6,
	0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xb6, 0x03, 0x0a, 0x1c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x26, 0xba, 0x47, 0x23, 0xba, 0x01, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x92,
	0x02, 0x18, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98,
	0x88, 0xe5, 0x80, 0xbc, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x39, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0xba, 0x47, 0x24, 0xba, 0x01, 0x03, 0x6d, 0x61, 0x78, 0x92, 0x02, 0x1b, 0xe8, 0xa1, 0xa8, 0xe5,
	0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe6, 0x9c,
	0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x39, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xba, 0x47, 0x24, 0xba, 0x01,
	0x03, 0x6d, 0x69, 0x6e, 0x92, 0x02, 0x1b, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97,
	0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe5,
	0x80, 0xbc, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x92, 0x02, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0x8f, 0x8d, 0xe8, 0xbd, 0xac, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x0e, 0x74, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba, 0x47, 0x29, 0xba, 0x01, 0x0e, 0x74,
	0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x92, 0x02, 0x15,
	0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe8, 0xa1, 0xa8, 0xe7,
	0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x0e, 0x74, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xba, 0x47, 0x2f, 0xba,
	0x01, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x92, 0x02, 0x1e,
	0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0xa2, 0x84, 0xe8,
	0xad, 0xa6, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcd, 0x04, 0x0a, 0x1d,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xba, 0x47, 0x20, 0xba,
	0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x18, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97,
	0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x26, 0xba, 0x47, 0x23, 0xba, 0x01, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x92,
	0x02, 0x18, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98,
	0x88, 0xe5, 0x80, 0xbc, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x39, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0xba, 0x47, 0x24, 0xba, 0x01, 0x03, 0x6d, 0x61, 0x78, 0x92, 0x02, 0x1b, 0xe8, 0xa1, 0xa8, 0xe5,
	0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe6, 0x9c,
	0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x39, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xba, 0x47, 0x24, 0xba, 0x01,
	0x03, 0x6d, 0x69, 0x6e, 0x92, 0x02, 0x1b, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97,
	0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe5,
	0x80, 0xbc, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x92, 0x02, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0x8f, 0x8d, 0xe8, 0xbd, 0xac, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x0e, 0x74, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba, 0x47, 0x29, 0xba, 0x01, 0x0e, 0x74,
	0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x92, 0x02, 0x15,
	0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe8, 0xa1, 0xa8, 0xe7,
	0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x0e, 0x74, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xba, 0x47, 0x2f, 0xba,
	0x01, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x92, 0x02, 0x1e,
	0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0xa2, 0x84, 0xe8,
	0xad, 0xa6, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x1c, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xba, 0x47, 0x20, 0xba, 0x01, 0x02, 0x69,
	0x64, 0x92, 0x02, 0x18, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5,
	0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xcd, 0x04, 0x0a, 0x1d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x23, 0xba, 0x47, 0x20, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x18, 0xe8, 0xa1, 0xa8, 0xe5,
	0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0xbc,
	0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x26, 0xba, 0x47, 0x23, 0xba, 0x01, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x92, 0x02, 0x18, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97,
	0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x27, 0xba, 0x47, 0x24, 0xba, 0x01, 0x03, 0x6d, 0x61, 0x78, 0x92, 0x02,
	0x1b, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88,
	0xe5, 0x80, 0xbc, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x12, 0x39, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0xba, 0x47, 0x24, 0xba, 0x01, 0x03, 0x6d, 0x69, 0x6e, 0x92, 0x02, 0x1b, 0xe8, 0xa1, 0xa8, 0xe5,
	0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe6, 0x9c,
	0x80, 0xe5, 0xb0, 0x8f, 0xe5, 0x80, 0xbc, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0xba,
	0x47, 0x19, 0xba, 0x01, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x92, 0x02, 0x0c, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0x8d, 0xe8, 0xbd, 0xac, 0x52, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x74, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba, 0x47,
	0x29, 0xba, 0x01, 0x0e, 0x74, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x64, 0x92, 0x02, 0x15, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae,
	0xb5, 0xe8, 0xa1, 0xa8, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x0e, 0x74, 0x62, 0x46, 0x6f,
	0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x32, 0xba, 0x47, 0x2f, 0xba, 0x01, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x92, 0x02, 0x1e, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae,
	0xb5, 0xe9, 0xa2, 0x84, 0xe8, 0xad, 0xa6, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xf4, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x1a, 0x64, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xe3, 0x05, 0x0a, 0x1d, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x1a, 0xb7, 0x04, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xba, 0x47,
	0x20, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x18, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5,
	0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0xbc, 0x96, 0xe7, 0xa0,
	0x81, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x26, 0xba, 0x47, 0x23, 0xba, 0x01, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x92, 0x02, 0x18, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5,
	0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x27, 0xba, 0x47, 0x24, 0xba, 0x01, 0x03, 0x6d, 0x61, 0x78, 0x92, 0x02, 0x1b, 0xe8, 0xa1,
	0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc,
	0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x39,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xba, 0x47, 0x24,
	0xba, 0x01, 0x03, 0x6d, 0x69, 0x6e, 0x92, 0x02, 0x1b, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5,
	0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe6, 0x9c, 0x80, 0xe5, 0xb0,
	0x8f, 0xe5, 0x80, 0xbc, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba,
	0x01, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x92, 0x02, 0x0c, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0x8f, 0x8d, 0xe8, 0xbd, 0xac, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x0e, 0x74, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba, 0x47, 0x29, 0xba, 0x01,
	0x0e, 0x74, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x92,
	0x02, 0x15, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe8, 0xa1,
	0xa8, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x0e, 0x74, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xba, 0x47,
	0x2f, 0xba, 0x01, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x92,
	0x02, 0x1e, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0xa2,
	0x84, 0xe8, 0xad, 0xa6, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xff, 0x06,
	0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0xa8, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x3a, 0x01, 0x2a,
	0xba, 0x47, 0x29, 0x12, 0x27, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae,
	0xb5, 0xe9, 0xa2, 0x84, 0xe8, 0xad, 0xa6, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe8, 0xa1, 0xa8,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0x12, 0xaa, 0x01, 0x0a,
	0x15, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xba, 0x47, 0x29,
	0x12, 0x27, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0xa2,
	0x84, 0xe8, 0xad, 0xa6, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x12, 0xa8, 0x01, 0x0a, 0x15, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x1a, 0x11, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x3a, 0x01, 0x2a, 0xba, 0x47, 0x29, 0x12, 0x27, 0xe8, 0xa1, 0xa8,
	0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0xa2, 0x84, 0xe8, 0xad, 0xa6, 0xe9,
	0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0x12, 0xb0, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xba, 0x47, 0x2f, 0x12, 0x2d, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95,
	0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0xa2, 0x84, 0xe8, 0xad, 0xa6, 0xe9, 0x98, 0x88, 0xe5,
	0x80, 0xbc, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xaf, 0xa6, 0xe6, 0x83,
	0x85, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x12, 0xb5, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x22, 0x18, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0xba, 0x47, 0x2f,
	0x12, 0x2d, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe9, 0xa2,
	0x84, 0xe8, 0xad, 0xa6, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x42,
	0x0e, 0x5a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x75, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_columnthreshold_proto_rawDescOnce sync.Once
	file_columnthreshold_proto_rawDescData = file_columnthreshold_proto_rawDesc
)

func file_columnthreshold_proto_rawDescGZIP() []byte {
	file_columnthreshold_proto_rawDescOnce.Do(func() {
		file_columnthreshold_proto_rawDescData = protoimpl.X.CompressGZIP(file_columnthreshold_proto_rawDescData)
	})
	return file_columnthreshold_proto_rawDescData
}

var file_columnthreshold_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_columnthreshold_proto_goTypes = []interface{}{
	(*Columnthresholds)(nil),                      // 0: api.Columnthresholds
	(*ColumnThresholdCreateRequest)(nil),          // 1: api.ColumnThresholdCreateRequest
	(*ColumnThresholdCreateResponse)(nil),         // 2: api.ColumnThresholdCreateResponse
	(*ColumnThresholdDeleteRequest)(nil),          // 3: api.ColumnThresholdDeleteRequest
	(*ColumnThresholdDeleteResponse)(nil),         // 4: api.ColumnThresholdDeleteResponse
	(*ColumnThresholdUpdateRequest)(nil),          // 5: api.ColumnThresholdUpdateRequest
	(*ColumnThresholdUpdateResponse)(nil),         // 6: api.ColumnThresholdUpdateResponse
	(*ColumnThresholdDetailRequest)(nil),          // 7: api.ColumnThresholdDetailRequest
	(*ColumnThresholdDetailResponse)(nil),         // 8: api.ColumnThresholdDetailResponse
	(*ColumnThresholdFilterRequest)(nil),          // 9: api.ColumnThresholdFilterRequest
	(*ColumnThresholdFilterResponse)(nil),         // 10: api.ColumnThresholdFilterResponse
	(*ColumnThresholdFilterRequest_Filter)(nil),   // 11: api.ColumnThresholdFilterRequest.Filter
	(*ColumnThresholdFilterResponse_Results)(nil), // 12: api.ColumnThresholdFilterResponse.Results
}
var file_columnthreshold_proto_depIdxs = []int32{
	11, // 0: api.ColumnThresholdFilterRequest.filter:type_name -> api.ColumnThresholdFilterRequest.Filter
	12, // 1: api.ColumnThresholdFilterResponse.results:type_name -> api.ColumnThresholdFilterResponse.Results
	1,  // 2: api.ColumnThreshold.ColumnThresholdCreate:input_type -> api.ColumnThresholdCreateRequest
	3,  // 3: api.ColumnThreshold.ColumnThresholdDelete:input_type -> api.ColumnThresholdDeleteRequest
	5,  // 4: api.ColumnThreshold.ColumnThresholdUpdate:input_type -> api.ColumnThresholdUpdateRequest
	7,  // 5: api.ColumnThreshold.ColumnThresholdDetail:input_type -> api.ColumnThresholdDetailRequest
	9,  // 6: api.ColumnThreshold.ColumnThresholdFilter:input_type -> api.ColumnThresholdFilterRequest
	2,  // 7: api.ColumnThreshold.ColumnThresholdCreate:output_type -> api.ColumnThresholdCreateResponse
	4,  // 8: api.ColumnThreshold.ColumnThresholdDelete:output_type -> api.ColumnThresholdDeleteResponse
	6,  // 9: api.ColumnThreshold.ColumnThresholdUpdate:output_type -> api.ColumnThresholdUpdateResponse
	8,  // 10: api.ColumnThreshold.ColumnThresholdDetail:output_type -> api.ColumnThresholdDetailResponse
	10, // 11: api.ColumnThreshold.ColumnThresholdFilter:output_type -> api.ColumnThresholdFilterResponse
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_columnthreshold_proto_init() }
func file_columnthreshold_proto_init() {
	if File_columnthreshold_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_columnthreshold_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Columnthresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnthreshold_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnThresholdCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnthreshold_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnThresholdCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnthreshold_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnThresholdDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnthreshold_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnThresholdDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnthreshold_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnThresholdUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnthreshold_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnThresholdUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnthreshold_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnThresholdDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnthreshold_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnThresholdDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnthreshold_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnThresholdFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnthreshold_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnThresholdFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnthreshold_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnThresholdFilterRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_columnthreshold_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnThresholdFilterResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_columnthreshold_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_columnthreshold_proto_goTypes,
		DependencyIndexes: file_columnthreshold_proto_depIdxs,
		MessageInfos:      file_columnthreshold_proto_msgTypes,
	}.Build()
	File_columnthreshold_proto = out.File
	file_columnthreshold_proto_rawDesc = nil
	file_columnthreshold_proto_goTypes = nil
	file_columnthreshold_proto_depIdxs = nil
}
