// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: columnopt.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationColumnOptColumnOptCreate = "/api.ColumnOpt/ColumnOptCreate"
const OperationColumnOptColumnOptDelete = "/api.ColumnOpt/ColumnOptDelete"
const OperationColumnOptColumnOptDetail = "/api.ColumnOpt/ColumnOptDetail"
const OperationColumnOptColumnOptFilter = "/api.ColumnOpt/ColumnOptFilter"
const OperationColumnOptColumnOptUpdate = "/api.ColumnOpt/ColumnOptUpdate"

type ColumnOptHTTPServer interface {
	ColumnOptCreate(context.Context, *ColumnOptCreateRequest) (*ColumnOptCreateResponse, error)
	ColumnOptDelete(context.Context, *ColumnOptDeleteRequest) (*ColumnOptDeleteResponse, error)
	ColumnOptDetail(context.Context, *ColumnOptDetailRequest) (*ColumnOptDetailResponse, error)
	ColumnOptFilter(context.Context, *ColumnOptFilterRequest) (*ColumnOptFilterResponse, error)
	ColumnOptUpdate(context.Context, *ColumnOptUpdateRequest) (*ColumnOptUpdateResponse, error)
}

func RegisterColumnOptHTTPServer(s *http.Server, srv ColumnOptHTTPServer) {
	r := s.Route("/")
	r.POST("/column_opt", _ColumnOpt_ColumnOptCreate0_HTTP_Handler(srv))
	r.DELETE("/column_opt/{id}", _ColumnOpt_ColumnOptDelete0_HTTP_Handler(srv))
	r.PUT("/column_opt", _ColumnOpt_ColumnOptUpdate0_HTTP_Handler(srv))
	r.GET("/column_opt/{id}", _ColumnOpt_ColumnOptDetail0_HTTP_Handler(srv))
	r.POST("/column_opt/filter", _ColumnOpt_ColumnOptFilter0_HTTP_Handler(srv))
}

func _ColumnOpt_ColumnOptCreate0_HTTP_Handler(srv ColumnOptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ColumnOptCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationColumnOptColumnOptCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ColumnOptCreate(ctx, req.(*ColumnOptCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ColumnOptCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _ColumnOpt_ColumnOptDelete0_HTTP_Handler(srv ColumnOptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ColumnOptDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationColumnOptColumnOptDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ColumnOptDelete(ctx, req.(*ColumnOptDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ColumnOptDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _ColumnOpt_ColumnOptUpdate0_HTTP_Handler(srv ColumnOptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ColumnOptUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationColumnOptColumnOptUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ColumnOptUpdate(ctx, req.(*ColumnOptUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ColumnOptUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _ColumnOpt_ColumnOptDetail0_HTTP_Handler(srv ColumnOptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ColumnOptDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationColumnOptColumnOptDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ColumnOptDetail(ctx, req.(*ColumnOptDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ColumnOptDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _ColumnOpt_ColumnOptFilter0_HTTP_Handler(srv ColumnOptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ColumnOptFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationColumnOptColumnOptFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ColumnOptFilter(ctx, req.(*ColumnOptFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ColumnOptFilterResponse)
		return ctx.Result(200, reply)
	}
}

type ColumnOptHTTPClient interface {
	ColumnOptCreate(ctx context.Context, req *ColumnOptCreateRequest, opts ...http.CallOption) (rsp *ColumnOptCreateResponse, err error)
	ColumnOptDelete(ctx context.Context, req *ColumnOptDeleteRequest, opts ...http.CallOption) (rsp *ColumnOptDeleteResponse, err error)
	ColumnOptDetail(ctx context.Context, req *ColumnOptDetailRequest, opts ...http.CallOption) (rsp *ColumnOptDetailResponse, err error)
	ColumnOptFilter(ctx context.Context, req *ColumnOptFilterRequest, opts ...http.CallOption) (rsp *ColumnOptFilterResponse, err error)
	ColumnOptUpdate(ctx context.Context, req *ColumnOptUpdateRequest, opts ...http.CallOption) (rsp *ColumnOptUpdateResponse, err error)
}

type ColumnOptHTTPClientImpl struct {
	cc *http.Client
}

func NewColumnOptHTTPClient(client *http.Client) ColumnOptHTTPClient {
	return &ColumnOptHTTPClientImpl{client}
}

func (c *ColumnOptHTTPClientImpl) ColumnOptCreate(ctx context.Context, in *ColumnOptCreateRequest, opts ...http.CallOption) (*ColumnOptCreateResponse, error) {
	var out ColumnOptCreateResponse
	pattern := "/column_opt"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationColumnOptColumnOptCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ColumnOptHTTPClientImpl) ColumnOptDelete(ctx context.Context, in *ColumnOptDeleteRequest, opts ...http.CallOption) (*ColumnOptDeleteResponse, error) {
	var out ColumnOptDeleteResponse
	pattern := "/column_opt/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationColumnOptColumnOptDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ColumnOptHTTPClientImpl) ColumnOptDetail(ctx context.Context, in *ColumnOptDetailRequest, opts ...http.CallOption) (*ColumnOptDetailResponse, error) {
	var out ColumnOptDetailResponse
	pattern := "/column_opt/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationColumnOptColumnOptDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ColumnOptHTTPClientImpl) ColumnOptFilter(ctx context.Context, in *ColumnOptFilterRequest, opts ...http.CallOption) (*ColumnOptFilterResponse, error) {
	var out ColumnOptFilterResponse
	pattern := "/column_opt/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationColumnOptColumnOptFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ColumnOptHTTPClientImpl) ColumnOptUpdate(ctx context.Context, in *ColumnOptUpdateRequest, opts ...http.CallOption) (*ColumnOptUpdateResponse, error) {
	var out ColumnOptUpdateResponse
	pattern := "/column_opt"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationColumnOptColumnOptUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
