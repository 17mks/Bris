// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: plan.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlanClient is the client API for Plan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanClient interface {
	// 方案表数据添加
	PlanCreate(ctx context.Context, in *PlanCreateRequest, opts ...grpc.CallOption) (*PlanCreateResponse, error)
	// 方案表数据删除
	PlanDelById(ctx context.Context, in *PlanDelByIdRequest, opts ...grpc.CallOption) (*PlanDelByIdResponse, error)
	// 方案表数据更新
	PlanUpdate(ctx context.Context, in *PlanUpdateRequest, opts ...grpc.CallOption) (*PlanUpdateResponse, error)
	PlanDetail(ctx context.Context, in *PlanDetailRequest, opts ...grpc.CallOption) (*PlanDetailResponse, error)
	// 方案表数据过滤查询
	PlanFilterQuery(ctx context.Context, in *PlanFilterQueryRequest, opts ...grpc.CallOption) (*PlanFilterQueryResponse, error)
}

type planClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanClient(cc grpc.ClientConnInterface) PlanClient {
	return &planClient{cc}
}

func (c *planClient) PlanCreate(ctx context.Context, in *PlanCreateRequest, opts ...grpc.CallOption) (*PlanCreateResponse, error) {
	out := new(PlanCreateResponse)
	err := c.cc.Invoke(ctx, "/api.Plan/PlanCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planClient) PlanDelById(ctx context.Context, in *PlanDelByIdRequest, opts ...grpc.CallOption) (*PlanDelByIdResponse, error) {
	out := new(PlanDelByIdResponse)
	err := c.cc.Invoke(ctx, "/api.Plan/PlanDelById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planClient) PlanUpdate(ctx context.Context, in *PlanUpdateRequest, opts ...grpc.CallOption) (*PlanUpdateResponse, error) {
	out := new(PlanUpdateResponse)
	err := c.cc.Invoke(ctx, "/api.Plan/PlanUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planClient) PlanDetail(ctx context.Context, in *PlanDetailRequest, opts ...grpc.CallOption) (*PlanDetailResponse, error) {
	out := new(PlanDetailResponse)
	err := c.cc.Invoke(ctx, "/api.Plan/PlanDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planClient) PlanFilterQuery(ctx context.Context, in *PlanFilterQueryRequest, opts ...grpc.CallOption) (*PlanFilterQueryResponse, error) {
	out := new(PlanFilterQueryResponse)
	err := c.cc.Invoke(ctx, "/api.Plan/PlanFilterQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanServer is the server API for Plan service.
// All implementations must embed UnimplementedPlanServer
// for forward compatibility
type PlanServer interface {
	// 方案表数据添加
	PlanCreate(context.Context, *PlanCreateRequest) (*PlanCreateResponse, error)
	// 方案表数据删除
	PlanDelById(context.Context, *PlanDelByIdRequest) (*PlanDelByIdResponse, error)
	// 方案表数据更新
	PlanUpdate(context.Context, *PlanUpdateRequest) (*PlanUpdateResponse, error)
	PlanDetail(context.Context, *PlanDetailRequest) (*PlanDetailResponse, error)
	// 方案表数据过滤查询
	PlanFilterQuery(context.Context, *PlanFilterQueryRequest) (*PlanFilterQueryResponse, error)
	mustEmbedUnimplementedPlanServer()
}

// UnimplementedPlanServer must be embedded to have forward compatible implementations.
type UnimplementedPlanServer struct {
}

func (UnimplementedPlanServer) PlanCreate(context.Context, *PlanCreateRequest) (*PlanCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanCreate not implemented")
}
func (UnimplementedPlanServer) PlanDelById(context.Context, *PlanDelByIdRequest) (*PlanDelByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanDelById not implemented")
}
func (UnimplementedPlanServer) PlanUpdate(context.Context, *PlanUpdateRequest) (*PlanUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanUpdate not implemented")
}
func (UnimplementedPlanServer) PlanDetail(context.Context, *PlanDetailRequest) (*PlanDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanDetail not implemented")
}
func (UnimplementedPlanServer) PlanFilterQuery(context.Context, *PlanFilterQueryRequest) (*PlanFilterQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanFilterQuery not implemented")
}
func (UnimplementedPlanServer) mustEmbedUnimplementedPlanServer() {}

// UnsafePlanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanServer will
// result in compilation errors.
type UnsafePlanServer interface {
	mustEmbedUnimplementedPlanServer()
}

func RegisterPlanServer(s grpc.ServiceRegistrar, srv PlanServer) {
	s.RegisterService(&Plan_ServiceDesc, srv)
}

func _Plan_PlanCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).PlanCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Plan/PlanCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).PlanCreate(ctx, req.(*PlanCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plan_PlanDelById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanDelByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).PlanDelById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Plan/PlanDelById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).PlanDelById(ctx, req.(*PlanDelByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plan_PlanUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).PlanUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Plan/PlanUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).PlanUpdate(ctx, req.(*PlanUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plan_PlanDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).PlanDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Plan/PlanDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).PlanDetail(ctx, req.(*PlanDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plan_PlanFilterQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanFilterQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).PlanFilterQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Plan/PlanFilterQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).PlanFilterQuery(ctx, req.(*PlanFilterQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Plan_ServiceDesc is the grpc.ServiceDesc for Plan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Plan",
	HandlerType: (*PlanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlanCreate",
			Handler:    _Plan_PlanCreate_Handler,
		},
		{
			MethodName: "PlanDelById",
			Handler:    _Plan_PlanDelById_Handler,
		},
		{
			MethodName: "PlanUpdate",
			Handler:    _Plan_PlanUpdate_Handler,
		},
		{
			MethodName: "PlanDetail",
			Handler:    _Plan_PlanDetail_Handler,
		},
		{
			MethodName: "PlanFilterQuery",
			Handler:    _Plan_PlanFilterQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plan.proto",
}
