// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.10
// source: article.proto

package api

import (
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Articles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	ThumbImgUrl string `protobuf:"bytes,4,opt,name=thumbImgUrl,proto3" json:"thumbImgUrl,omitempty"`
	Summary     string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	Author      string `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	Status      string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	ContentUrl  string `protobuf:"bytes,8,opt,name=contentUrl,proto3" json:"contentUrl,omitempty"`
	Contents    string `protobuf:"bytes,9,opt,name=contents,proto3" json:"contents,omitempty"`
	CreateTime  string `protobuf:"bytes,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  string `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *Articles) Reset() {
	*x = Articles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Articles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Articles) ProtoMessage() {}

func (x *Articles) ProtoReflect() protoreflect.Message {
	mi := &file_article_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Articles.ProtoReflect.Descriptor instead.
func (*Articles) Descriptor() ([]byte, []int) {
	return file_article_proto_rawDescGZIP(), []int{0}
}

func (x *Articles) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Articles) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Articles) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Articles) GetThumbImgUrl() string {
	if x != nil {
		return x.ThumbImgUrl
	}
	return ""
}

func (x *Articles) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Articles) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Articles) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Articles) GetContentUrl() string {
	if x != nil {
		return x.ContentUrl
	}
	return ""
}

func (x *Articles) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *Articles) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Articles) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type ArticleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ThumbImgUrl string `protobuf:"bytes,3,opt,name=thumbImgUrl,proto3" json:"thumbImgUrl,omitempty"`
	Summary     string `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Author      string `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	ContentUrl  string `protobuf:"bytes,7,opt,name=contentUrl,proto3" json:"contentUrl,omitempty"`
	Contents    string `protobuf:"bytes,8,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *ArticleCreateRequest) Reset() {
	*x = ArticleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleCreateRequest) ProtoMessage() {}

func (x *ArticleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_article_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleCreateRequest.ProtoReflect.Descriptor instead.
func (*ArticleCreateRequest) Descriptor() ([]byte, []int) {
	return file_article_proto_rawDescGZIP(), []int{1}
}

func (x *ArticleCreateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ArticleCreateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ArticleCreateRequest) GetThumbImgUrl() string {
	if x != nil {
		return x.ThumbImgUrl
	}
	return ""
}

func (x *ArticleCreateRequest) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ArticleCreateRequest) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ArticleCreateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ArticleCreateRequest) GetContentUrl() string {
	if x != nil {
		return x.ContentUrl
	}
	return ""
}

func (x *ArticleCreateRequest) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type ArticleCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ArticleCreateResponse) Reset() {
	*x = ArticleCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleCreateResponse) ProtoMessage() {}

func (x *ArticleCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_article_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleCreateResponse.ProtoReflect.Descriptor instead.
func (*ArticleCreateResponse) Descriptor() ([]byte, []int) {
	return file_article_proto_rawDescGZIP(), []int{2}
}

func (x *ArticleCreateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ArticleDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ArticleDeleteRequest) Reset() {
	*x = ArticleDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleDeleteRequest) ProtoMessage() {}

func (x *ArticleDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_article_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleDeleteRequest.ProtoReflect.Descriptor instead.
func (*ArticleDeleteRequest) Descriptor() ([]byte, []int) {
	return file_article_proto_rawDescGZIP(), []int{3}
}

func (x *ArticleDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ArticleDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ArticleDeleteResponse) Reset() {
	*x = ArticleDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleDeleteResponse) ProtoMessage() {}

func (x *ArticleDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_article_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleDeleteResponse.ProtoReflect.Descriptor instead.
func (*ArticleDeleteResponse) Descriptor() ([]byte, []int) {
	return file_article_proto_rawDescGZIP(), []int{4}
}

func (x *ArticleDeleteResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ArticleUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Body *ArticleUpdateReqBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ArticleUpdateRequest) Reset() {
	*x = ArticleUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleUpdateRequest) ProtoMessage() {}

func (x *ArticleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_article_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleUpdateRequest.ProtoReflect.Descriptor instead.
func (*ArticleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_article_proto_rawDescGZIP(), []int{5}
}

func (x *ArticleUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ArticleUpdateRequest) GetBody() *ArticleUpdateReqBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type ArticleUpdateReqBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ThumbImgUrl string `protobuf:"bytes,2,opt,name=thumbImgUrl,proto3" json:"thumbImgUrl,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Summary     string `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Author      string `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	ContentUrl  string `protobuf:"bytes,7,opt,name=contentUrl,proto3" json:"contentUrl,omitempty"`
	Contents    string `protobuf:"bytes,8,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *ArticleUpdateReqBody) Reset() {
	*x = ArticleUpdateReqBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleUpdateReqBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleUpdateReqBody) ProtoMessage() {}

func (x *ArticleUpdateReqBody) ProtoReflect() protoreflect.Message {
	mi := &file_article_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleUpdateReqBody.ProtoReflect.Descriptor instead.
func (*ArticleUpdateReqBody) Descriptor() ([]byte, []int) {
	return file_article_proto_rawDescGZIP(), []int{6}
}

func (x *ArticleUpdateReqBody) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ArticleUpdateReqBody) GetThumbImgUrl() string {
	if x != nil {
		return x.ThumbImgUrl
	}
	return ""
}

func (x *ArticleUpdateReqBody) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ArticleUpdateReqBody) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ArticleUpdateReqBody) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ArticleUpdateReqBody) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ArticleUpdateReqBody) GetContentUrl() string {
	if x != nil {
		return x.ContentUrl
	}
	return ""
}

func (x *ArticleUpdateReqBody) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type ArticleUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	ThumbImgUrl string `protobuf:"bytes,4,opt,name=thumbImgUrl,proto3" json:"thumbImgUrl,omitempty"`
	Summary     string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	Author      string `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	Status      string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	ContentUrl  string `protobuf:"bytes,8,opt,name=contentUrl,proto3" json:"contentUrl,omitempty"`
	Contents    string `protobuf:"bytes,9,opt,name=contents,proto3" json:"contents,omitempty"`
	CreateTime  string `protobuf:"bytes,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  string `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *ArticleUpdateResponse) Reset() {
	*x = ArticleUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleUpdateResponse) ProtoMessage() {}

func (x *ArticleUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_article_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleUpdateResponse.ProtoReflect.Descriptor instead.
func (*ArticleUpdateResponse) Descriptor() ([]byte, []int) {
	return file_article_proto_rawDescGZIP(), []int{7}
}

func (x *ArticleUpdateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ArticleUpdateResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ArticleUpdateResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ArticleUpdateResponse) GetThumbImgUrl() string {
	if x != nil {
		return x.ThumbImgUrl
	}
	return ""
}

func (x *ArticleUpdateResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ArticleUpdateResponse) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ArticleUpdateResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ArticleUpdateResponse) GetContentUrl() string {
	if x != nil {
		return x.ContentUrl
	}
	return ""
}

func (x *ArticleUpdateResponse) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *ArticleUpdateResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ArticleUpdateResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type ArticleDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //  QueryParams QueryParams = 2;
}

func (x *ArticleDetailRequest) Reset() {
	*x = ArticleDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleDetailRequest) ProtoMessage() {}

func (x *ArticleDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_article_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleDetailRequest.ProtoReflect.Descriptor instead.
func (*ArticleDetailRequest) Descriptor() ([]byte, []int) {
	return file_article_proto_rawDescGZIP(), []int{8}
}

func (x *ArticleDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ArticleDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	ThumbImgUrl string `protobuf:"bytes,4,opt,name=thumbImgUrl,proto3" json:"thumbImgUrl,omitempty"`
	Summary     string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	Author      string `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	Status      string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	ContentUrl  string `protobuf:"bytes,8,opt,name=contentUrl,proto3" json:"contentUrl,omitempty"`
	Contents    string `protobuf:"bytes,9,opt,name=contents,proto3" json:"contents,omitempty"`
	CreateTime  string `protobuf:"bytes,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  string `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *ArticleDetailResponse) Reset() {
	*x = ArticleDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleDetailResponse) ProtoMessage() {}

func (x *ArticleDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_article_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleDetailResponse.ProtoReflect.Descriptor instead.
func (*ArticleDetailResponse) Descriptor() ([]byte, []int) {
	return file_article_proto_rawDescGZIP(), []int{9}
}

func (x *ArticleDetailResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ArticleDetailResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ArticleDetailResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ArticleDetailResponse) GetThumbImgUrl() string {
	if x != nil {
		return x.ThumbImgUrl
	}
	return ""
}

func (x *ArticleDetailResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ArticleDetailResponse) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ArticleDetailResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ArticleDetailResponse) GetContentUrl() string {
	if x != nil {
		return x.ContentUrl
	}
	return ""
}

func (x *ArticleDetailResponse) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *ArticleDetailResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ArticleDetailResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type ArticleFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int32                        `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int32                        `protobuf:"varint,2,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Filter  *ArticleFilterRequest_Filter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"` //  HeaderParams HeaderParams = 4;
}

func (x *ArticleFilterRequest) Reset() {
	*x = ArticleFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleFilterRequest) ProtoMessage() {}

func (x *ArticleFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_article_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleFilterRequest.ProtoReflect.Descriptor instead.
func (*ArticleFilterRequest) Descriptor() ([]byte, []int) {
	return file_article_proto_rawDescGZIP(), []int{10}
}

func (x *ArticleFilterRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ArticleFilterRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ArticleFilterRequest) GetFilter() *ArticleFilterRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ArticleFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPage int64       `protobuf:"varint,1,opt,name=totalPage,proto3" json:"totalPage,omitempty"`
	Page      int32       `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage   int32       `protobuf:"varint,3,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Results   []*Articles `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
	Total     int64       `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ArticleFilterResponse) Reset() {
	*x = ArticleFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleFilterResponse) ProtoMessage() {}

func (x *ArticleFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_article_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleFilterResponse.ProtoReflect.Descriptor instead.
func (*ArticleFilterResponse) Descriptor() ([]byte, []int) {
	return file_article_proto_rawDescGZIP(), []int{11}
}

func (x *ArticleFilterResponse) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *ArticleFilterResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ArticleFilterResponse) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ArticleFilterResponse) GetResults() []*Articles {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ArticleFilterResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ArticleFilterRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Id     []string     `protobuf:"bytes,2,rep,name=id,proto3" json:"id,omitempty"`
	Type   []*anypb.Any `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	Status []string     `protobuf:"bytes,4,rep,name=status,proto3" json:"status,omitempty"`
}

func (x *ArticleFilterRequest_Filter) Reset() {
	*x = ArticleFilterRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleFilterRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleFilterRequest_Filter) ProtoMessage() {}

func (x *ArticleFilterRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_article_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleFilterRequest_Filter.ProtoReflect.Descriptor instead.
func (*ArticleFilterRequest_Filter) Descriptor() ([]byte, []int) {
	return file_article_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ArticleFilterRequest_Filter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ArticleFilterRequest_Filter) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ArticleFilterRequest_Filter) GetType() []*anypb.Any {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ArticleFilterRequest_Filter) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_article_proto protoreflect.FileDescriptor

var file_article_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x61, 0x70, 0x69, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x05, 0x0a, 0x08,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x47, 0x14, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02,
	0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x58, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x44, 0xba, 0x47, 0x41, 0xba, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0x92, 0x02, 0x37, 0xe6, 0x96,
	0x87, 0xe7, 0xab, 0xa0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0xef, 0xbc, 0x9a, 0xe5, 0xae, 0xa3, 0xe6, 0x95, 0x99, 0x20, 0x4b, 0x4e, 0x4f, 0x57,
	0x4c, 0x45, 0x44, 0x47, 0x45, 0xef, 0xbc, 0x9a, 0xe4, 0xb8, 0x93, 0xe5, 0xae, 0xb6, 0xe7, 0x9f,
	0xa5, 0xe8, 0xaf, 0x86, 0x29, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xba, 0x47, 0x17, 0xba,
	0x01, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0,
	0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x45, 0x0a,
	0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x23, 0xba, 0x47, 0x20, 0xba, 0x01, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49,
	0x6d, 0x67, 0x55, 0x72, 0x6c, 0x92, 0x02, 0x0f, 0xe7, 0xbc, 0xa9, 0xe7, 0x95, 0xa5, 0xe5, 0x9b,
	0xbe, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe6, 0xa6, 0x82,
	0xe8, 0xa6, 0x81, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x47,
	0x18, 0xba, 0x01, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87,
	0xe7, 0xab, 0xa0, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x65, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4d, 0xba, 0x47, 0x4a, 0xba, 0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x92,
	0x02, 0x3e, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0x44,
	0x52, 0x41, 0x46, 0x54, 0xef, 0xbc, 0x9a, 0xe8, 0x8d, 0x89, 0xe7, 0xa8, 0xbf, 0x20, 0x4f, 0x4e,
	0x4c, 0x49, 0x4e, 0x45, 0xef, 0xbc, 0x9a, 0xe4, 0xb8, 0x8a, 0xe7, 0xba, 0xbf, 0x20, 0x20, 0x4f,
	0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0xef, 0xbc, 0x9a, 0xe4, 0xb8, 0x8b, 0xe7, 0xba, 0xbf, 0x29,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xba, 0x47,
	0x22, 0xba, 0x01, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x92, 0x02,
	0x12, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9d, 0x80, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x39, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0xba, 0x01, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbf, 0x04, 0x0a, 0x14, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x44, 0xba, 0x47, 0x41, 0xba, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0x92, 0x02, 0x37,
	0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0xef, 0xbc, 0x9a, 0xe5, 0xae, 0xa3, 0xe6, 0x95, 0x99, 0x20, 0x4b, 0x4e,
	0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0xef, 0xbc, 0x9a, 0xe4, 0xb8, 0x93, 0xe5, 0xae, 0xb6,
	0xe7, 0x9f, 0xa5, 0xe8, 0xaf, 0x86, 0x29, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xba, 0x47,
	0x17, 0xba, 0x01, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7,
	0xab, 0xa0, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x45, 0x0a, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xba, 0x47, 0x20, 0xba, 0x01, 0x0b, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x92, 0x02, 0x0f, 0xe7, 0xbc, 0xa9, 0xe7, 0x95, 0xa5,
	0xe5, 0x9b, 0xbe, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba, 0x01, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe6,
	0xa6, 0x82, 0xe8, 0xa6, 0x81, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x33,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0xba, 0x47, 0x18, 0xba, 0x01, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x92, 0x02, 0x0c, 0xe6,
	0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0x52, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x65, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4d, 0xba, 0x47, 0x4a, 0xba, 0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x92, 0x02, 0x3e, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x28, 0x44, 0x52, 0x41, 0x46, 0x54, 0xef, 0xbc, 0x9a, 0xe8, 0x8d, 0x89, 0xe7, 0xa8, 0xbf, 0x20,
	0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0xef, 0xbc, 0x9a, 0xe4, 0xb8, 0x8a, 0xe7, 0xba, 0xbf, 0x20,
	0x20, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0xef, 0xbc, 0x9a, 0xe4, 0xb8, 0x8b, 0xe7, 0xba,
	0xbf, 0x29, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25,
	0xba, 0x47, 0x22, 0xba, 0x01, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c,
	0x92, 0x02, 0x12, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0xba, 0x01, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe5, 0x86, 0x85, 0xe5,
	0xae, 0xb9, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x40, 0x0a, 0x15,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0xba, 0x47, 0x14, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x0c, 0xe6, 0x96,
	0x87, 0xe7, 0xab, 0xa0, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f,
	0x0a, 0x14, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0xba, 0x47, 0x14, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02, 0x0c, 0xe6,
	0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x40, 0x0a, 0x15, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x47, 0x14, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92, 0x02,
	0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x6e, 0x0a, 0x14, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x47, 0x14, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92,
	0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0xbf, 0x04, 0x0a, 0x14, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x58, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0xba, 0x47, 0x41, 0xba, 0x01, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x92, 0x02, 0x37, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x28, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0xef, 0xbc, 0x9a, 0xe5, 0xae,
	0xa3, 0xe6, 0x95, 0x99, 0x20, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0xef, 0xbc,
	0x9a, 0xe4, 0xb8, 0x93, 0xe5, 0xae, 0xb6, 0xe7, 0x9f, 0xa5, 0xe8, 0xaf, 0x86, 0x29, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67,
	0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xba, 0x47, 0x20, 0xba, 0x01,
	0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x92, 0x02, 0x0f, 0xe7,
	0xbc, 0xa9, 0xe7, 0x95, 0xa5, 0xe5, 0x9b, 0xbe, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0b,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xba, 0x47, 0x17, 0xba,
	0x01, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0,
	0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x36, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0xba, 0x47, 0x19, 0xba, 0x01, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x92, 0x02, 0x0c,
	0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe6, 0xa6, 0x82, 0xe8, 0xa6, 0x81, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x47, 0x18, 0xba, 0x01, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe4, 0xbd, 0x9c, 0xe8,
	0x80, 0x85, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x65, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0xba, 0x47, 0x4a, 0xba,
	0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x92, 0x02, 0x3e, 0xe6, 0x96, 0x87, 0xe7, 0xab,
	0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0x44, 0x52, 0x41, 0x46, 0x54, 0xef, 0xbc, 0x9a,
	0xe8, 0x8d, 0x89, 0xe7, 0xa8, 0xbf, 0x20, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0xef, 0xbc, 0x9a,
	0xe4, 0xb8, 0x8a, 0xe7, 0xba, 0xbf, 0x20, 0x20, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0xef,
	0xbc, 0x9a, 0xe4, 0xb8, 0x8b, 0xe7, 0xba, 0xbf, 0x29, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xba, 0x47, 0x22, 0xba, 0x01, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x92, 0x02, 0x12, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0,
	0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0xba,
	0x01, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87,
	0xe7, 0xab, 0xa0, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xeb, 0x05, 0x0a, 0x15, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x47, 0x14, 0xba, 0x01,
	0x02, 0x69, 0x64, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0xbc, 0x96, 0xe7,
	0xa0, 0x81, 0x52, 0x02, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0xba, 0x47, 0x41, 0xba, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x92, 0x02, 0x37, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0xef, 0xbc, 0x9a, 0xe5, 0xae, 0xa3, 0xe6, 0x95, 0x99,
	0x20, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0xef, 0xbc, 0x9a, 0xe4, 0xb8, 0x93,
	0xe5, 0xae, 0xb6, 0xe7, 0x9f, 0xa5, 0xe8, 0xaf, 0x86, 0x29, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xba, 0x47, 0x17, 0xba, 0x01, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x92, 0x02, 0x0c, 0xe6,
	0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xba, 0x47, 0x20, 0xba, 0x01, 0x0b, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x92, 0x02, 0x0f, 0xe7, 0xbc, 0xa9,
	0xe7, 0x95, 0xa5, 0xe5, 0x9b, 0xbe, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0b, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba,
	0x01, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7,
	0xab, 0xa0, 0xe6, 0xa6, 0x82, 0xe8, 0xa6, 0x81, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0xba, 0x47, 0x18, 0xba, 0x01, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x92,
	0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x65, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0xba, 0x47, 0x4a, 0xba, 0x01, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x92, 0x02, 0x3e, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0x28, 0x44, 0x52, 0x41, 0x46, 0x54, 0xef, 0xbc, 0x9a, 0xe8, 0x8d, 0x89, 0xe7,
	0xa8, 0xbf, 0x20, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0xef, 0xbc, 0x9a, 0xe4, 0xb8, 0x8a, 0xe7,
	0xba, 0xbf, 0x20, 0x20, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0xef, 0xbc, 0x9a, 0xe4, 0xb8,
	0x8b, 0xe7, 0xba, 0xbf, 0x29, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x25, 0xba, 0x47, 0x22, 0xba, 0x01, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x55, 0x72, 0x6c, 0x92, 0x02, 0x12, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe5, 0x86, 0x85, 0xe5,
	0xae, 0xb9, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0xba, 0x01, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe5,
	0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x3f, 0x0a, 0x14, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x47, 0x14, 0xba, 0x01, 0x02, 0x69, 0x64, 0x92,
	0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xbf, 0x05, 0x0a, 0x15, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x47, 0x14, 0xba, 0x01, 0x02,
	0x69, 0x64, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0xbc, 0x96, 0xe7, 0xa0,
	0x81, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x47, 0x16, 0xba, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0x92,
	0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0xba, 0x47, 0x17, 0xba, 0x01, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49,
	0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xba, 0x47, 0x20,
	0xba, 0x01, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x92, 0x02,
	0x0f, 0xe7, 0xbc, 0xa9, 0xe7, 0x95, 0xa5, 0xe5, 0x9b, 0xbe, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80,
	0x52, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0xba, 0x47, 0x19, 0xba, 0x01, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x92, 0x02, 0x0c,
	0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe6, 0xa6, 0x82, 0xe8, 0xa6, 0x81, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x47, 0x18, 0xba, 0x01, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe4, 0xbd, 0x9c, 0xe8,
	0x80, 0x85, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x65, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0xba, 0x47, 0x4a, 0xba,
	0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x92, 0x02, 0x3e, 0xe6, 0x96, 0x87, 0xe7, 0xab,
	0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0x44, 0x52, 0x41, 0x46, 0x54, 0xef, 0xbc, 0x9a,
	0xe8, 0x8d, 0x89, 0xe7, 0xa8, 0xbf, 0x20, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0xef, 0xbc, 0x9a,
	0xe4, 0xb8, 0x8a, 0xe7, 0xba, 0xbf, 0x20, 0x20, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0xef,
	0xbc, 0x9a, 0xe4, 0xb8, 0x8b, 0xe7, 0xba, 0xbf, 0x29, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xba, 0x47, 0x22, 0xba, 0x01, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x92, 0x02, 0x12, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0,
	0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x47, 0x19, 0xba,
	0x01, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe7,
	0xab, 0xa0, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0xba, 0x01, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x92, 0x02, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x14, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x6c, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xc5, 0x04, 0x0a, 0x07, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x6c, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x3a, 0x01,
	0x2a, 0xba, 0x47, 0x0e, 0x12, 0x0c, 0xe6, 0x96, 0xb0, 0xe5, 0xbb, 0xba, 0xe6, 0x96, 0x87, 0xe7,
	0xab, 0xa0, 0x12, 0x69, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0a, 0x2a, 0x08, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0xba, 0x47, 0x0e, 0x12,
	0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0x12, 0x75, 0x0a,
	0x0d, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x1a, 0x08, 0x2f,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0xba, 0x47, 0x14,
	0x12, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x12, 0x6f, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0xba, 0x47,
	0x14, 0x12, 0x12, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x12, 0x79, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0xba, 0x47, 0x14, 0x12, 0x12, 0xe6, 0x96,
	0x87, 0xe7, 0xab, 0xa0, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0x42, 0x0e, 0x5a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x75, 0x70, 0x2f, 0x61, 0x70, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_article_proto_rawDescOnce sync.Once
	file_article_proto_rawDescData = file_article_proto_rawDesc
)

func file_article_proto_rawDescGZIP() []byte {
	file_article_proto_rawDescOnce.Do(func() {
		file_article_proto_rawDescData = protoimpl.X.CompressGZIP(file_article_proto_rawDescData)
	})
	return file_article_proto_rawDescData
}

var file_article_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_article_proto_goTypes = []interface{}{
	(*Articles)(nil),                    // 0: api.Articles
	(*ArticleCreateRequest)(nil),        // 1: api.ArticleCreateRequest
	(*ArticleCreateResponse)(nil),       // 2: api.ArticleCreateResponse
	(*ArticleDeleteRequest)(nil),        // 3: api.ArticleDeleteRequest
	(*ArticleDeleteResponse)(nil),       // 4: api.ArticleDeleteResponse
	(*ArticleUpdateRequest)(nil),        // 5: api.ArticleUpdateRequest
	(*ArticleUpdateReqBody)(nil),        // 6: api.ArticleUpdateReqBody
	(*ArticleUpdateResponse)(nil),       // 7: api.ArticleUpdateResponse
	(*ArticleDetailRequest)(nil),        // 8: api.ArticleDetailRequest
	(*ArticleDetailResponse)(nil),       // 9: api.ArticleDetailResponse
	(*ArticleFilterRequest)(nil),        // 10: api.ArticleFilterRequest
	(*ArticleFilterResponse)(nil),       // 11: api.ArticleFilterResponse
	(*ArticleFilterRequest_Filter)(nil), // 12: api.ArticleFilterRequest.Filter
	(*anypb.Any)(nil),                   // 13: google.protobuf.Any
}
var file_article_proto_depIdxs = []int32{
	6,  // 0: api.ArticleUpdateRequest.body:type_name -> api.ArticleUpdateReqBody
	12, // 1: api.ArticleFilterRequest.filter:type_name -> api.ArticleFilterRequest.Filter
	0,  // 2: api.ArticleFilterResponse.results:type_name -> api.Articles
	13, // 3: api.ArticleFilterRequest.Filter.type:type_name -> google.protobuf.Any
	1,  // 4: api.Article.ArticleCreate:input_type -> api.ArticleCreateRequest
	3,  // 5: api.Article.ArticleDelete:input_type -> api.ArticleDeleteRequest
	5,  // 6: api.Article.ArticleUpdate:input_type -> api.ArticleUpdateRequest
	8,  // 7: api.Article.ArticleDetail:input_type -> api.ArticleDetailRequest
	10, // 8: api.Article.ArticleFilter:input_type -> api.ArticleFilterRequest
	2,  // 9: api.Article.ArticleCreate:output_type -> api.ArticleCreateResponse
	4,  // 10: api.Article.ArticleDelete:output_type -> api.ArticleDeleteResponse
	7,  // 11: api.Article.ArticleUpdate:output_type -> api.ArticleUpdateResponse
	9,  // 12: api.Article.ArticleDetail:output_type -> api.ArticleDetailResponse
	11, // 13: api.Article.ArticleFilter:output_type -> api.ArticleFilterResponse
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_article_proto_init() }
func file_article_proto_init() {
	if File_article_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_article_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Articles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleUpdateReqBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleFilterRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_article_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_article_proto_goTypes,
		DependencyIndexes: file_article_proto_depIdxs,
		MessageInfos:      file_article_proto_msgTypes,
	}.Build()
	File_article_proto = out.File
	file_article_proto_rawDesc = nil
	file_article_proto_goTypes = nil
	file_article_proto_depIdxs = nil
}
