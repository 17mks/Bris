// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: columnthreshold.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationColumnThresholdColumnThresholdCreate = "/api.ColumnThreshold/ColumnThresholdCreate"
const OperationColumnThresholdColumnThresholdDelete = "/api.ColumnThreshold/ColumnThresholdDelete"
const OperationColumnThresholdColumnThresholdDetail = "/api.ColumnThreshold/ColumnThresholdDetail"
const OperationColumnThresholdColumnThresholdFilter = "/api.ColumnThreshold/ColumnThresholdFilter"
const OperationColumnThresholdColumnThresholdUpdate = "/api.ColumnThreshold/ColumnThresholdUpdate"

type ColumnThresholdHTTPServer interface {
	ColumnThresholdCreate(context.Context, *ColumnThresholdCreateRequest) (*ColumnThresholdCreateResponse, error)
	ColumnThresholdDelete(context.Context, *ColumnThresholdDeleteRequest) (*ColumnThresholdDeleteResponse, error)
	ColumnThresholdDetail(context.Context, *ColumnThresholdDetailRequest) (*ColumnThresholdDetailResponse, error)
	ColumnThresholdFilter(context.Context, *ColumnThresholdFilterRequest) (*ColumnThresholdFilterResponse, error)
	ColumnThresholdUpdate(context.Context, *ColumnThresholdUpdateRequest) (*ColumnThresholdUpdateResponse, error)
}

func RegisterColumnThresholdHTTPServer(s *http.Server, srv ColumnThresholdHTTPServer) {
	r := s.Route("/")
	r.POST("/column_threshold", _ColumnThreshold_ColumnThresholdCreate0_HTTP_Handler(srv))
	r.DELETE("/column_threshold/{id}", _ColumnThreshold_ColumnThresholdDelete0_HTTP_Handler(srv))
	r.PUT("/column_threshold", _ColumnThreshold_ColumnThresholdUpdate0_HTTP_Handler(srv))
	r.GET("/column_threshold/{id}", _ColumnThreshold_ColumnThresholdDetail0_HTTP_Handler(srv))
	r.POST("/column_threshold/filter", _ColumnThreshold_ColumnThresholdFilter0_HTTP_Handler(srv))
}

func _ColumnThreshold_ColumnThresholdCreate0_HTTP_Handler(srv ColumnThresholdHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ColumnThresholdCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationColumnThresholdColumnThresholdCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ColumnThresholdCreate(ctx, req.(*ColumnThresholdCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ColumnThresholdCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _ColumnThreshold_ColumnThresholdDelete0_HTTP_Handler(srv ColumnThresholdHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ColumnThresholdDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationColumnThresholdColumnThresholdDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ColumnThresholdDelete(ctx, req.(*ColumnThresholdDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ColumnThresholdDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _ColumnThreshold_ColumnThresholdUpdate0_HTTP_Handler(srv ColumnThresholdHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ColumnThresholdUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationColumnThresholdColumnThresholdUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ColumnThresholdUpdate(ctx, req.(*ColumnThresholdUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ColumnThresholdUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _ColumnThreshold_ColumnThresholdDetail0_HTTP_Handler(srv ColumnThresholdHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ColumnThresholdDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationColumnThresholdColumnThresholdDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ColumnThresholdDetail(ctx, req.(*ColumnThresholdDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ColumnThresholdDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _ColumnThreshold_ColumnThresholdFilter0_HTTP_Handler(srv ColumnThresholdHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ColumnThresholdFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationColumnThresholdColumnThresholdFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ColumnThresholdFilter(ctx, req.(*ColumnThresholdFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ColumnThresholdFilterResponse)
		return ctx.Result(200, reply)
	}
}

type ColumnThresholdHTTPClient interface {
	ColumnThresholdCreate(ctx context.Context, req *ColumnThresholdCreateRequest, opts ...http.CallOption) (rsp *ColumnThresholdCreateResponse, err error)
	ColumnThresholdDelete(ctx context.Context, req *ColumnThresholdDeleteRequest, opts ...http.CallOption) (rsp *ColumnThresholdDeleteResponse, err error)
	ColumnThresholdDetail(ctx context.Context, req *ColumnThresholdDetailRequest, opts ...http.CallOption) (rsp *ColumnThresholdDetailResponse, err error)
	ColumnThresholdFilter(ctx context.Context, req *ColumnThresholdFilterRequest, opts ...http.CallOption) (rsp *ColumnThresholdFilterResponse, err error)
	ColumnThresholdUpdate(ctx context.Context, req *ColumnThresholdUpdateRequest, opts ...http.CallOption) (rsp *ColumnThresholdUpdateResponse, err error)
}

type ColumnThresholdHTTPClientImpl struct {
	cc *http.Client
}

func NewColumnThresholdHTTPClient(client *http.Client) ColumnThresholdHTTPClient {
	return &ColumnThresholdHTTPClientImpl{client}
}

func (c *ColumnThresholdHTTPClientImpl) ColumnThresholdCreate(ctx context.Context, in *ColumnThresholdCreateRequest, opts ...http.CallOption) (*ColumnThresholdCreateResponse, error) {
	var out ColumnThresholdCreateResponse
	pattern := "/column_threshold"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationColumnThresholdColumnThresholdCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ColumnThresholdHTTPClientImpl) ColumnThresholdDelete(ctx context.Context, in *ColumnThresholdDeleteRequest, opts ...http.CallOption) (*ColumnThresholdDeleteResponse, error) {
	var out ColumnThresholdDeleteResponse
	pattern := "/column_threshold/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationColumnThresholdColumnThresholdDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ColumnThresholdHTTPClientImpl) ColumnThresholdDetail(ctx context.Context, in *ColumnThresholdDetailRequest, opts ...http.CallOption) (*ColumnThresholdDetailResponse, error) {
	var out ColumnThresholdDetailResponse
	pattern := "/column_threshold/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationColumnThresholdColumnThresholdDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ColumnThresholdHTTPClientImpl) ColumnThresholdFilter(ctx context.Context, in *ColumnThresholdFilterRequest, opts ...http.CallOption) (*ColumnThresholdFilterResponse, error) {
	var out ColumnThresholdFilterResponse
	pattern := "/column_threshold/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationColumnThresholdColumnThresholdFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ColumnThresholdHTTPClientImpl) ColumnThresholdUpdate(ctx context.Context, in *ColumnThresholdUpdateRequest, opts ...http.CallOption) (*ColumnThresholdUpdateResponse, error) {
	var out ColumnThresholdUpdateResponse
	pattern := "/column_threshold"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationColumnThresholdColumnThresholdUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
