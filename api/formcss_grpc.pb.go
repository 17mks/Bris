// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: formcss.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FormCssClient is the client API for FormCss service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FormCssClient interface {
	// 表单样式表数据添加
	FormCssCreate(ctx context.Context, in *FormCssCreateRequest, opts ...grpc.CallOption) (*FormCssCreateResponse, error)
	// 表单样式表数据删除
	FormCssDelete(ctx context.Context, in *FormCssDeleteRequest, opts ...grpc.CallOption) (*FormCssDeleteResponse, error)
	// 表单样式表数据更新
	FormCssUpdate(ctx context.Context, in *FormCssUpdateRequest, opts ...grpc.CallOption) (*FormCssUpdateResponse, error)
	// 表单样式表数据详情查询
	FormCssDetail(ctx context.Context, in *FormCssDetailRequest, opts ...grpc.CallOption) (*FormCssDetailResponse, error)
	// 表单样式表数据过滤查询
	FormCssFilter(ctx context.Context, in *FormCssFilterRequest, opts ...grpc.CallOption) (*FormCssFilterResponse, error)
}

type formCssClient struct {
	cc grpc.ClientConnInterface
}

func NewFormCssClient(cc grpc.ClientConnInterface) FormCssClient {
	return &formCssClient{cc}
}

func (c *formCssClient) FormCssCreate(ctx context.Context, in *FormCssCreateRequest, opts ...grpc.CallOption) (*FormCssCreateResponse, error) {
	out := new(FormCssCreateResponse)
	err := c.cc.Invoke(ctx, "/api.FormCss/FormCssCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formCssClient) FormCssDelete(ctx context.Context, in *FormCssDeleteRequest, opts ...grpc.CallOption) (*FormCssDeleteResponse, error) {
	out := new(FormCssDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.FormCss/FormCssDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formCssClient) FormCssUpdate(ctx context.Context, in *FormCssUpdateRequest, opts ...grpc.CallOption) (*FormCssUpdateResponse, error) {
	out := new(FormCssUpdateResponse)
	err := c.cc.Invoke(ctx, "/api.FormCss/FormCssUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formCssClient) FormCssDetail(ctx context.Context, in *FormCssDetailRequest, opts ...grpc.CallOption) (*FormCssDetailResponse, error) {
	out := new(FormCssDetailResponse)
	err := c.cc.Invoke(ctx, "/api.FormCss/FormCssDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formCssClient) FormCssFilter(ctx context.Context, in *FormCssFilterRequest, opts ...grpc.CallOption) (*FormCssFilterResponse, error) {
	out := new(FormCssFilterResponse)
	err := c.cc.Invoke(ctx, "/api.FormCss/FormCssFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormCssServer is the server API for FormCss service.
// All implementations must embed UnimplementedFormCssServer
// for forward compatibility
type FormCssServer interface {
	// 表单样式表数据添加
	FormCssCreate(context.Context, *FormCssCreateRequest) (*FormCssCreateResponse, error)
	// 表单样式表数据删除
	FormCssDelete(context.Context, *FormCssDeleteRequest) (*FormCssDeleteResponse, error)
	// 表单样式表数据更新
	FormCssUpdate(context.Context, *FormCssUpdateRequest) (*FormCssUpdateResponse, error)
	// 表单样式表数据详情查询
	FormCssDetail(context.Context, *FormCssDetailRequest) (*FormCssDetailResponse, error)
	// 表单样式表数据过滤查询
	FormCssFilter(context.Context, *FormCssFilterRequest) (*FormCssFilterResponse, error)
	mustEmbedUnimplementedFormCssServer()
}

// UnimplementedFormCssServer must be embedded to have forward compatible implementations.
type UnimplementedFormCssServer struct {
}

func (UnimplementedFormCssServer) FormCssCreate(context.Context, *FormCssCreateRequest) (*FormCssCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormCssCreate not implemented")
}
func (UnimplementedFormCssServer) FormCssDelete(context.Context, *FormCssDeleteRequest) (*FormCssDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormCssDelete not implemented")
}
func (UnimplementedFormCssServer) FormCssUpdate(context.Context, *FormCssUpdateRequest) (*FormCssUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormCssUpdate not implemented")
}
func (UnimplementedFormCssServer) FormCssDetail(context.Context, *FormCssDetailRequest) (*FormCssDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormCssDetail not implemented")
}
func (UnimplementedFormCssServer) FormCssFilter(context.Context, *FormCssFilterRequest) (*FormCssFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormCssFilter not implemented")
}
func (UnimplementedFormCssServer) mustEmbedUnimplementedFormCssServer() {}

// UnsafeFormCssServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FormCssServer will
// result in compilation errors.
type UnsafeFormCssServer interface {
	mustEmbedUnimplementedFormCssServer()
}

func RegisterFormCssServer(s grpc.ServiceRegistrar, srv FormCssServer) {
	s.RegisterService(&FormCss_ServiceDesc, srv)
}

func _FormCss_FormCssCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormCssCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormCssServer).FormCssCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FormCss/FormCssCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormCssServer).FormCssCreate(ctx, req.(*FormCssCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormCss_FormCssDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormCssDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormCssServer).FormCssDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FormCss/FormCssDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormCssServer).FormCssDelete(ctx, req.(*FormCssDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormCss_FormCssUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormCssUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormCssServer).FormCssUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FormCss/FormCssUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormCssServer).FormCssUpdate(ctx, req.(*FormCssUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormCss_FormCssDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormCssDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormCssServer).FormCssDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FormCss/FormCssDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormCssServer).FormCssDetail(ctx, req.(*FormCssDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormCss_FormCssFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormCssFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormCssServer).FormCssFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FormCss/FormCssFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormCssServer).FormCssFilter(ctx, req.(*FormCssFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FormCss_ServiceDesc is the grpc.ServiceDesc for FormCss service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FormCss_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.FormCss",
	HandlerType: (*FormCssServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FormCssCreate",
			Handler:    _FormCss_FormCssCreate_Handler,
		},
		{
			MethodName: "FormCssDelete",
			Handler:    _FormCss_FormCssDelete_Handler,
		},
		{
			MethodName: "FormCssUpdate",
			Handler:    _FormCss_FormCssUpdate_Handler,
		},
		{
			MethodName: "FormCssDetail",
			Handler:    _FormCss_FormCssDetail_Handler,
		},
		{
			MethodName: "FormCssFilter",
			Handler:    _FormCss_FormCssFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "formcss.proto",
}
