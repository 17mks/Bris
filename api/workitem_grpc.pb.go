// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: workitem.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkItemClient is the client API for WorkItem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkItemClient interface {
	// 工作项创建
	WorkItemCreate(ctx context.Context, in *WorkItemCreateRequest, opts ...grpc.CallOption) (*WorkItemCreateResponse, error)
	// 工作项删除
	WorkItemDelete(ctx context.Context, in *WorkItemDeleteRequest, opts ...grpc.CallOption) (*WorkItemDeleteResponse, error)
	// 工作项信息更新
	WorkItemUpdate(ctx context.Context, in *WorkItemUpdateRequest, opts ...grpc.CallOption) (*WorkItemUpdateResponse, error)
	// 工作项详情查询
	WorkItemDetail(ctx context.Context, in *WorkItemDetailRequest, opts ...grpc.CallOption) (*WorkItemDetailResponse, error)
	// 工作项过滤查询
	WorkItemFilter(ctx context.Context, in *WorkItemFilterRequest, opts ...grpc.CallOption) (*WorkItemFilterResponse, error)
}

type workItemClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkItemClient(cc grpc.ClientConnInterface) WorkItemClient {
	return &workItemClient{cc}
}

func (c *workItemClient) WorkItemCreate(ctx context.Context, in *WorkItemCreateRequest, opts ...grpc.CallOption) (*WorkItemCreateResponse, error) {
	out := new(WorkItemCreateResponse)
	err := c.cc.Invoke(ctx, "/api.WorkItem/WorkItemCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workItemClient) WorkItemDelete(ctx context.Context, in *WorkItemDeleteRequest, opts ...grpc.CallOption) (*WorkItemDeleteResponse, error) {
	out := new(WorkItemDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.WorkItem/WorkItemDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workItemClient) WorkItemUpdate(ctx context.Context, in *WorkItemUpdateRequest, opts ...grpc.CallOption) (*WorkItemUpdateResponse, error) {
	out := new(WorkItemUpdateResponse)
	err := c.cc.Invoke(ctx, "/api.WorkItem/WorkItemUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workItemClient) WorkItemDetail(ctx context.Context, in *WorkItemDetailRequest, opts ...grpc.CallOption) (*WorkItemDetailResponse, error) {
	out := new(WorkItemDetailResponse)
	err := c.cc.Invoke(ctx, "/api.WorkItem/WorkItemDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workItemClient) WorkItemFilter(ctx context.Context, in *WorkItemFilterRequest, opts ...grpc.CallOption) (*WorkItemFilterResponse, error) {
	out := new(WorkItemFilterResponse)
	err := c.cc.Invoke(ctx, "/api.WorkItem/WorkItemFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkItemServer is the server API for WorkItem service.
// All implementations must embed UnimplementedWorkItemServer
// for forward compatibility
type WorkItemServer interface {
	// 工作项创建
	WorkItemCreate(context.Context, *WorkItemCreateRequest) (*WorkItemCreateResponse, error)
	// 工作项删除
	WorkItemDelete(context.Context, *WorkItemDeleteRequest) (*WorkItemDeleteResponse, error)
	// 工作项信息更新
	WorkItemUpdate(context.Context, *WorkItemUpdateRequest) (*WorkItemUpdateResponse, error)
	// 工作项详情查询
	WorkItemDetail(context.Context, *WorkItemDetailRequest) (*WorkItemDetailResponse, error)
	// 工作项过滤查询
	WorkItemFilter(context.Context, *WorkItemFilterRequest) (*WorkItemFilterResponse, error)
	mustEmbedUnimplementedWorkItemServer()
}

// UnimplementedWorkItemServer must be embedded to have forward compatible implementations.
type UnimplementedWorkItemServer struct {
}

func (UnimplementedWorkItemServer) WorkItemCreate(context.Context, *WorkItemCreateRequest) (*WorkItemCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkItemCreate not implemented")
}
func (UnimplementedWorkItemServer) WorkItemDelete(context.Context, *WorkItemDeleteRequest) (*WorkItemDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkItemDelete not implemented")
}
func (UnimplementedWorkItemServer) WorkItemUpdate(context.Context, *WorkItemUpdateRequest) (*WorkItemUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkItemUpdate not implemented")
}
func (UnimplementedWorkItemServer) WorkItemDetail(context.Context, *WorkItemDetailRequest) (*WorkItemDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkItemDetail not implemented")
}
func (UnimplementedWorkItemServer) WorkItemFilter(context.Context, *WorkItemFilterRequest) (*WorkItemFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkItemFilter not implemented")
}
func (UnimplementedWorkItemServer) mustEmbedUnimplementedWorkItemServer() {}

// UnsafeWorkItemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkItemServer will
// result in compilation errors.
type UnsafeWorkItemServer interface {
	mustEmbedUnimplementedWorkItemServer()
}

func RegisterWorkItemServer(s grpc.ServiceRegistrar, srv WorkItemServer) {
	s.RegisterService(&WorkItem_ServiceDesc, srv)
}

func _WorkItem_WorkItemCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkItemCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkItemServer).WorkItemCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkItem/WorkItemCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkItemServer).WorkItemCreate(ctx, req.(*WorkItemCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkItem_WorkItemDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkItemDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkItemServer).WorkItemDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkItem/WorkItemDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkItemServer).WorkItemDelete(ctx, req.(*WorkItemDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkItem_WorkItemUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkItemUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkItemServer).WorkItemUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkItem/WorkItemUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkItemServer).WorkItemUpdate(ctx, req.(*WorkItemUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkItem_WorkItemDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkItemDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkItemServer).WorkItemDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkItem/WorkItemDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkItemServer).WorkItemDetail(ctx, req.(*WorkItemDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkItem_WorkItemFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkItemFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkItemServer).WorkItemFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkItem/WorkItemFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkItemServer).WorkItemFilter(ctx, req.(*WorkItemFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkItem_ServiceDesc is the grpc.ServiceDesc for WorkItem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkItem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.WorkItem",
	HandlerType: (*WorkItemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WorkItemCreate",
			Handler:    _WorkItem_WorkItemCreate_Handler,
		},
		{
			MethodName: "WorkItemDelete",
			Handler:    _WorkItem_WorkItemDelete_Handler,
		},
		{
			MethodName: "WorkItemUpdate",
			Handler:    _WorkItem_WorkItemUpdate_Handler,
		},
		{
			MethodName: "WorkItemDetail",
			Handler:    _WorkItem_WorkItemDetail_Handler,
		},
		{
			MethodName: "WorkItemFilter",
			Handler:    _WorkItem_WorkItemFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workitem.proto",
}
