// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: disease.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDiseaseDiseaseCreate = "/api.Disease/DiseaseCreate"
const OperationDiseaseDiseaseDelete = "/api.Disease/DiseaseDelete"
const OperationDiseaseDiseaseDetail = "/api.Disease/DiseaseDetail"
const OperationDiseaseDiseaseFilter = "/api.Disease/DiseaseFilter"
const OperationDiseaseDiseaseUpdate = "/api.Disease/DiseaseUpdate"

type DiseaseHTTPServer interface {
	DiseaseCreate(context.Context, *DiseaseCreateRequest) (*DiseaseCreateResponse, error)
	DiseaseDelete(context.Context, *DiseaseDeleteRequest) (*DiseaseDeleteResponse, error)
	DiseaseDetail(context.Context, *DiseaseDetailRequest) (*DiseaseDetailResponse, error)
	DiseaseFilter(context.Context, *DiseaseFilterRequest) (*DiseaseFilterResponse, error)
	DiseaseUpdate(context.Context, *DiseaseUpdateRequest) (*DiseaseUpdateResponse, error)
}

func RegisterDiseaseHTTPServer(s *http.Server, srv DiseaseHTTPServer) {
	r := s.Route("/")
	r.POST("/disease", _Disease_DiseaseCreate0_HTTP_Handler(srv))
	r.DELETE("/disease", _Disease_DiseaseDelete0_HTTP_Handler(srv))
	r.PUT("/disease", _Disease_DiseaseUpdate0_HTTP_Handler(srv))
	r.GET("/disease", _Disease_DiseaseDetail0_HTTP_Handler(srv))
	r.POST("/disease/filter", _Disease_DiseaseFilter0_HTTP_Handler(srv))
}

func _Disease_DiseaseCreate0_HTTP_Handler(srv DiseaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DiseaseCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDiseaseDiseaseCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DiseaseCreate(ctx, req.(*DiseaseCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DiseaseCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _Disease_DiseaseDelete0_HTTP_Handler(srv DiseaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DiseaseDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDiseaseDiseaseDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DiseaseDelete(ctx, req.(*DiseaseDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DiseaseDeleteResponse)
		return ctx.Result(200, reply)
	}
}

func _Disease_DiseaseUpdate0_HTTP_Handler(srv DiseaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DiseaseUpdateRequest
		if err := ctx.Bind(&in.Body); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDiseaseDiseaseUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DiseaseUpdate(ctx, req.(*DiseaseUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DiseaseUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _Disease_DiseaseDetail0_HTTP_Handler(srv DiseaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DiseaseDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDiseaseDiseaseDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DiseaseDetail(ctx, req.(*DiseaseDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DiseaseDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Disease_DiseaseFilter0_HTTP_Handler(srv DiseaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DiseaseFilterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDiseaseDiseaseFilter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DiseaseFilter(ctx, req.(*DiseaseFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DiseaseFilterResponse)
		return ctx.Result(200, reply)
	}
}

type DiseaseHTTPClient interface {
	DiseaseCreate(ctx context.Context, req *DiseaseCreateRequest, opts ...http.CallOption) (rsp *DiseaseCreateResponse, err error)
	DiseaseDelete(ctx context.Context, req *DiseaseDeleteRequest, opts ...http.CallOption) (rsp *DiseaseDeleteResponse, err error)
	DiseaseDetail(ctx context.Context, req *DiseaseDetailRequest, opts ...http.CallOption) (rsp *DiseaseDetailResponse, err error)
	DiseaseFilter(ctx context.Context, req *DiseaseFilterRequest, opts ...http.CallOption) (rsp *DiseaseFilterResponse, err error)
	DiseaseUpdate(ctx context.Context, req *DiseaseUpdateRequest, opts ...http.CallOption) (rsp *DiseaseUpdateResponse, err error)
}

type DiseaseHTTPClientImpl struct {
	cc *http.Client
}

func NewDiseaseHTTPClient(client *http.Client) DiseaseHTTPClient {
	return &DiseaseHTTPClientImpl{client}
}

func (c *DiseaseHTTPClientImpl) DiseaseCreate(ctx context.Context, in *DiseaseCreateRequest, opts ...http.CallOption) (*DiseaseCreateResponse, error) {
	var out DiseaseCreateResponse
	pattern := "/disease"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDiseaseDiseaseCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DiseaseHTTPClientImpl) DiseaseDelete(ctx context.Context, in *DiseaseDeleteRequest, opts ...http.CallOption) (*DiseaseDeleteResponse, error) {
	var out DiseaseDeleteResponse
	pattern := "/disease"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDiseaseDiseaseDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DiseaseHTTPClientImpl) DiseaseDetail(ctx context.Context, in *DiseaseDetailRequest, opts ...http.CallOption) (*DiseaseDetailResponse, error) {
	var out DiseaseDetailResponse
	pattern := "/disease"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDiseaseDiseaseDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DiseaseHTTPClientImpl) DiseaseFilter(ctx context.Context, in *DiseaseFilterRequest, opts ...http.CallOption) (*DiseaseFilterResponse, error) {
	var out DiseaseFilterResponse
	pattern := "/disease/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDiseaseDiseaseFilter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DiseaseHTTPClientImpl) DiseaseUpdate(ctx context.Context, in *DiseaseUpdateRequest, opts ...http.CallOption) (*DiseaseUpdateResponse, error) {
	var out DiseaseUpdateResponse
	pattern := "/disease"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDiseaseDiseaseUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Body, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
